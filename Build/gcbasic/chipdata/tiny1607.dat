Out 2 bit 4 position
  EVSYS_ASYNCUSER10_5_bm = (1<<5)     ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 5 mask
  EVSYS_ASYNCUSER10_5_bp = 5          ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 5 position
  EVSYS_ASYNCUSER10_6_bm = (1<<6)     ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 6 mask
  EVSYS_ASYNCUSER10_6_bp = 6          ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 6 position
  EVSYS_ASYNCUSER10_7_bm = (1<<7)     ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 7 mask
  EVSYS_ASYNCUSER10_7_bp = 7          ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 7 position
  
  ; EVSYS_ASYNCUSER11 masks
  EVSYS_ASYNCUSER11_gm = 0xFF         ; Asynchronous User Ch 11 Input Selection - TCB1 group mask
  EVSYS_ASYNCUSER11_gp = 0            ; Asynchronous User Ch 11 Input Selection - TCB1 group position
  EVSYS_ASYNCUSER11_0_bm = (1<<0)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 0 mask
  EVSYS_ASYNCUSER11_0_bp = 0          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 0 position
  EVSYS_ASYNCUSER11_1_bm = (1<<1)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 1 mask
  EVSYS_ASYNCUSER11_1_bp = 1          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 1 position
  EVSYS_ASYNCUSER11_2_bm = (1<<2)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 2 mask
  EVSYS_ASYNCUSER11_2_bp = 2          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 2 position
  EVSYS_ASYNCUSER11_3_bm = (1<<3)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 3 mask
  EVSYS_ASYNCUSER11_3_bp = 3          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 3 position
  EVSYS_ASYNCUSER11_4_bm = (1<<4)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 4 mask
  EVSYS_ASYNCUSER11_4_bp = 4          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 4 position
  EVSYS_ASYNCUSER11_5_bm = (1<<5)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 5 mask
  EVSYS_ASYNCUSER11_5_bp = 5          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 5 position
  EVSYS_ASYNCUSER11_6_bm = (1<<6)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 6 mask
  EVSYS_ASYNCUSER11_6_bp = 6          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 6 position
  EVSYS_ASYNCUSER11_7_bm = (1<<7)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 7 mask
  EVSYS_ASYNCUSER11_7_bp = 7          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 7 position
  
  ; EVSYS_ASYNCUSER12 masks
  EVSYS_ASYNCUSER12_gm = 0xFF         ; Asynchronous User Ch 12 Input Selection - ADC0 group mask
  EVSYS_ASYNCUSER12_gp = 0            ; Asynchronous User Ch 12 Input Selection - ADC0 group position
  EVSYS_ASYNCUSER12_0_bm = (1<<0)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 0 mask
  EVSYS_ASYNCUSER12_0_bp = 0          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 0 position
  EVSYS_ASYNCUSER12_1_bm = (1<<1)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 1 mask
  EVSYS_ASYNCUSER12_1_bp = 1          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 1 position
  EVSYS_ASYNCUSER12_2_bm = (1<<2)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 2 mask
  EVSYS_ASYNCUSER12_2_bp = 2          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 2 position
  EVSYS_ASYNCUSER12_3_bm = (1<<3)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 3 mask
  EVSYS_ASYNCUSER12_3_bp = 3          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 3 position
  EVSYS_ASYNCUSER12_4_bm = (1<<4)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 4 mask
  EVSYS_ASYNCUSER12_4_bp = 4          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 4 position
  EVSYS_ASYNCUSER12_5_bm = (1<<5)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 5 mask
  EVSYS_ASYNCUSER12_5_bp = 5          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 5 position
  EVSYS_ASYNCUSER12_6_bm = (1<<6)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 6 mask
  EVSYS_ASYNCUSER12_6_bp = 6          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 6 position
  EVSYS_ASYNCUSER12_7_bm = (1<<7)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 7 mask
  EVSYS_ASYNCUSER12_7_bp = 7          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 7 position
  
  ; EVSYS_SYNCUSER0 masks
  EVSYS_SYNCUSER0_gm = 0xFF           ; Synchronous User Ch 0 - TCA0 group mask
  EVSYS_SYNCUSER0_gp = 0              ; Synchronous User Ch 0 - TCA0 group position
  EVSYS_SYNCUSER0_0_bm = (1<<0)       ; Synchronous User Ch 0 - TCA0 bit 0 mask
  EVSYS_SYNCUSER0_0_bp = 0            ; Synchronous User Ch 0 - TCA0 bit 0 position
  EVSYS_SYNCUSER0_1_bm = (1<<1)       ; Synchronous User Ch 0 - TCA0 bit 1 mask
  EVSYS_SYNCUSER0_1_bp = 1            ; Synchronous User Ch 0 - TCA0 bit 1 position
  EVSYS_SYNCUSER0_2_bm = (1<<2)       ; Synchronous User Ch 0 - TCA0 bit 2 mask
  EVSYS_SYNCUSER0_2_bp = 2            ; Synchronous User Ch 0 - TCA0 bit 2 position
  EVSYS_SYNCUSER0_3_bm = (1<<3)       ; Synchronous User Ch 0 - TCA0 bit 3 mask
  EVSYS_SYNCUSER0_3_bp = 3            ; Synchronous User Ch 0 - TCA0 bit 3 position
  EVSYS_SYNCUSER0_4_bm = (1<<4)       ; Synchronous User Ch 0 - TCA0 bit 4 mask
  EVSYS_SYNCUSER0_4_bp = 4            ; Synchronous User Ch 0 - TCA0 bit 4 position
  EVSYS_SYNCUSER0_5_bm = (1<<5)       ; Synchronous User Ch 0 - TCA0 bit 5 mask
  EVSYS_SYNCUSER0_5_bp = 5            ; Synchronous User Ch 0 - TCA0 bit 5 position
  EVSYS_SYNCUSER0_6_bm = (1<<6)       ; Synchronous User Ch 0 - TCA0 bit 6 mask
  EVSYS_SYNCUSER0_6_bp = 6            ; Synchronous User Ch 0 - TCA0 bit 6 position
  EVSYS_SYNCUSER0_7_bm = (1<<7)       ; Synchronous User Ch 0 - TCA0 bit 7 mask
  EVSYS_SYNCUSER0_7_bp = 7            ; Synchronous User Ch 0 - TCA0 bit 7 position
  
  ; EVSYS_SYNCUSER1 masks
  EVSYS_SYNCUSER1_gm = 0xFF           ; Synchronous User Ch 1 - USART0 group mask
  EVSYS_SYNCUSER1_gp = 0              ; Synchronous User Ch 1 - USART0 group position
  EVSYS_SYNCUSER1_0_bm = (1<<0)       ; Synchronous User Ch 1 - USART0 bit 0 mask
  EVSYS_SYNCUSER1_0_bp = 0            ; Synchronous User Ch 1 - USART0 bit 0 position
  EVSYS_SYNCUSER1_1_bm = (1<<1)       ; Synchronous User Ch 1 - USART0 bit 1 mask
  EVSYS_SYNCUSER1_1_bp = 1            ; Synchronous User Ch 1 - USART0 bit 1 position
  EVSYS_SYNCUSER1_2_bm = (1<<2)       ; Synchronous User Ch 1 - USART0 bit 2 mask
  EVSYS_SYNCUSER1_2_bp = 2            ; Synchronous User Ch 1 - USART0 bit 2 position
  EVSYS_SYNCUSER1_3_bm = (1<<3)       ; Synchronous User Ch 1 - USART0 bit 3 mask
  EVSYS_SYNCUSER1_3_bp = 3            ; Synchronous User Ch 1 - USART0 bit 3 position
  EVSYS_SYNCUSER1_4_bm = (1<<4)       ; Synchronous User Ch 1 - USART0 bit 4 mask
  EVSYS_SYNCUSER1_4_bp = 4            ; Synchronous User Ch 1 - USART0 bit 4 position
  EVSYS_SYNCUSER1_5_bm = (1<<5)       ; Synchronous User Ch 1 - USART0 bit 5 mask
  EVSYS_SYNCUSER1_5_bp = 5            ; Synchronous User Ch 1 - USART0 bit 5 position
  EVSYS_SYNCUSER1_6_bm = (1<<6)       ; Synchronous User Ch 1 - USART0 bit 6 mask
  EVSYS_SYNCUSER1_6_bp = 6            ; Synchronous User Ch 1 - USART0 bit 6 position
  EVSYS_SYNCUSER1_7_bm = (1<<7)       ; Synchronous User Ch 1 - USART0 bit 7 mask
  EVSYS_SYNCUSER1_7_bp = 7            ; Synchronous User Ch 1 - USART0 bit 7 position
  
  ; Asynchronous Channel 0 Generator Selection
  EVSYS_ASYNCCH0_OFF_gc = (0x00<<0)   ; Off
  EVSYS_ASYNCCH0_CCL_LUT0_gc = (0x01<<0) ; Configurable Custom Logic LUT0
  EVSYS_ASYNCCH0_CCL_LUT1_gc = (0x02<<0) ; Configurable Custom Logic LUT1
  EVSYS_ASYNCCH0_AC0_OUT_gc = (0x03<<0) ; Analog Comparator 0 out
  EVSYS_ASYNCCH0_TCD0_CMPBCLR_gc = (0x04<<0) ; Timer/Counter D0 compare B clear
  EVSYS_ASYNCCH0_TCD0_CMPASET_gc = (0x05<<0) ; Timer/Counter D0 compare A set
  EVSYS_ASYNCCH0_TCD0_CMPBSET_gc = (0x06<<0) ; Timer/Counter D0 compare B set
  EVSYS_ASYNCCH0_TCD0_PROGEV_gc = (0x07<<0) ; Timer/Counter D0 program event
  EVSYS_ASYNCCH0_RTC_OVF_gc = (0x08<<0) ; Real Time Counter overflow
  EVSYS_ASYNCCH0_RTC_CMP_gc = (0x09<<0) ; Real Time Counter compare
  EVSYS_ASYNCCH0_PORTA_PIN0_gc = (0x0A<<0) ; Asynchronous Event from Pin PA0
  EVSYS_ASYNCCH0_PORTA_PIN1_gc = (0x0B<<0) ; Asynchronous Event from Pin PA1
  EVSYS_ASYNCCH0_PORTA_PIN2_gc = (0x0C<<0) ; Asynchronous Event from Pin PA2
  EVSYS_ASYNCCH0_PORTA_PIN3_gc = (0x0D<<0) ; Asynchronous Event from Pin PA3
  EVSYS_ASYNCCH0_PORTA_PIN4_gc = (0x0E<<0) ; Asynchronous Event from Pin PA4
  EVSYS_ASYNCCH0_PORTA_PIN5_gc = (0x0F<<0) ; Asynchronous Event from Pin PA5
  EVSYS_ASYNCCH0_PORTA_PIN6_gc = (0x10<<0) ; Asynchronous Event from Pin PA6
  EVSYS_ASYNCCH0_PORTA_PIN7_gc = (0x11<<0) ; Asynchronous Event from Pin PA7
  EVSYS_ASYNCCH0_UPDI_gc = (0x12<<0)  ; Unified Program and debug interface
  EVSYS_ASYNCCH0_AC1_OUT_gc = (0x13<<0) ; Analog Comparator 1 out
  EVSYS_ASYNCCH0_AC2_OUT_gc = (0x14<<0) ; Analog Comparator 2 out
  
  ; Asynchronous Channel 1 Generator Selection
  EVSYS_ASYNCCH1_OFF_gc = (0x00<<0)   ; Off
  EVSYS_ASYNCCH1_CCL_LUT0_gc = (0x01<<0) ; Configurable custom logic LUT0
  EVSYS_ASYNCCH1_CCL_LUT1_gc = (0x02<<0) ; Configurable custom logic LUT1
  EVSYS_ASYNCCH1_AC0_OUT_gc = (0x03<<0) ; Analog Comparator 0 out
  EVSYS_ASYNCCH1_TCD0_CMPBCLR_gc = (0x04<<0) ; Timer/Counter D0 compare B clear
  EVSYS_ASYNCCH1_TCD0_CMPASET_gc = (0x05<<0) ; Timer/Counter D0 compare A set
  EVSYS_ASYNCCH1_TCD0_CMPBSET_gc = (0x06<<0) ; Timer/Counter D0 compare B set
  EVSYS_ASYNCCH1_TCD0_PROGEV_gc = (0x07<<0) ; Timer/Counter D0 program event
  EVSYS_ASYNCCH1_RTC_OVF_gc = (0x08<<0) ; Real Time Counter overflow
  EVSYS_ASYNCCH1_RTC_CMP_gc = (0x09<<0) ; Real Time Counter compare
  EVSYS_ASYNCCH1_PORTB_PIN0_gc = (0x0A<<0) ; Asynchronous Event from Pin PB0
  EVSYS_ASYNCCH1_PORTB_PIN1_gc = (0x0B<<0) ; Asynchronous Event from Pin PB1
  EVSYS_ASYNCCH1_PORTB_PIN2_gc = (0x0C<<0) ; Asynchronous Event from Pin PB2
  EVSYS_ASYNCCH1_PORTB_PIN3_gc = (0x0D<<0) ; Asynchronous Event from Pin PB3
  EVSYS_ASYNCCH1_PORTB_PIN4_gc = (0x0E<<0) ; Asynchronous Event from Pin PB4
  EVSYS_ASYNCCH1_PORTB_PIN5_gc = (0x0F<<0) ; Asynchronous Event from Pin PB5
  EVSYS_ASYNCCH1_PORTB_PIN6_gc = (0x10<<0) ; Asynchronous Event from Pin PB6
  EVSYS_ASYNCCH1_PORTB_PIN7_gc = (0x11<<0) ; Asynchronous Event from Pin PB7
  EVSYS_ASYNCCH1_AC1_OUT_gc = (0x12<<0) ; Analog Comparator 1 out
  EVSYS_ASYNCCH1_AC2_OUT_gc = (0x13<<0) ; Analog Comparator 2 out
  
  ; Asynchronous User Ch 0 Input Selection - TCB0
  EVSYS_ASYNCUSER0_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER0_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER0_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER0_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 1 Input Selection - ADC0
  EVSYS_ASYNCUSER1_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER1_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER1_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER1_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 2 Input Selection - CCL LUT0 Event 0
  EVSYS_ASYNCUSER2_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER2_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER2_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER2_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 3 Input Selection - CCL LUT1 Event 0
  EVSYS_ASYNCUSER3_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER3_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER3_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER3_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 4 Input Selection - CCL LUT0 Event 1
  EVSYS_ASYNCUSER4_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER4_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER4_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER4_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 5 Input Selection - CCL LUT1 Event 1
  EVSYS_ASYNCUSER5_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER5_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER5_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER5_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 6 Input Selection - TCD0 Event 0
  EVSYS_ASYNCUSER6_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER6_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER6_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER6_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 7 Input Selection - TCD0 Event 1
  EVSYS_ASYNCUSER7_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER7_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER7_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER7_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 8 Input Selection - Event Out 0
  EVSYS_ASYNCUSER8_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER8_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER8_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER8_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 9 Input Selection - Event Out 1
  EVSYS_ASYNCUSER9_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER9_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER9_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER9_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 10 Input Selection - Event Out 2
  EVSYS_ASYNCUSER10_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER10_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER10_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER10_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 11 Input Selection - TCB1
  EVSYS_ASYNCUSER11_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER11_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER11_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER11_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 12 Input Selection - ADC0
  EVSYS_ASYNCUSER12_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER12_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER12_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER12_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Synchronous Channel 0 Generator Selection
  EVSYS_SYNCCH0_OFF_gc = (0x00<<0)    ; Off
  EVSYS_SYNCCH0_TCB0_gc = (0x01<<0)   ; Timer/Counter B0
  EVSYS_SYNCCH0_TCA0_OVF_LUNF_gc = (0x02<<0) ; Timer/Counter A0 overflow
  EVSYS_SYNCCH0_TCA0_HUNF_gc = (0x03<<0) ; Timer/Counter A0 underflow high byte (split mode)
  EVSYS_SYNCCH0_TCA0_CMP0_gc = (0x04<<0) ; Timer/Counter A0 compare 0
  EVSYS_SYNCCH0_TCA0_CMP1_gc = (0x05<<0) ; Timer/Counter A0 compare 1
  EVSYS_SYNCCH0_TCA0_CMP2_gc = (0x06<<0) ; Timer/Counter A0 compare 2
  EVSYS_SYNCCH0_PORTC_PIN0_gc = (0x07<<0) ; Synchronous Event from Pin PC0
  EVSYS_SYNCCH0_PORTC_PIN1_gc = (0x08<<0) ; Synchronous Event from Pin PC1
  EVSYS_SYNCCH0_PORTC_PIN2_gc = (0x09<<0) ; Synchronous Event from Pin PC2
  EVSYS_SYNCCH0_PORTC_PIN3_gc = (0x0A<<0) ; Synchronous Event from Pin PC3
  EVSYS_SYNCCH0_PORTC_PIN4_gc = (0x0B<<0) ; Synchronous Event from Pin PC4
  EVSYS_SYNCCH0_PORTC_PIN5_gc = (0x0C<<0) ; Synchronous Event from Pin PC5
  EVSYS_SYNCCH0_PORTA_PIN0_gc = (0x0D<<0) ; Synchronous Event from Pin PA0
  EVSYS_SYNCCH0_PORTA_PIN1_gc = (0x0E<<0) ; Synchronous Event from Pin PA1
  EVSYS_SYNCCH0_PORTA_PIN2_gc = (0x0F<<0) ; Synchronous Event from Pin PA2
  EVSYS_SYNCCH0_PORTA_PIN3_gc = (0x10<<0) ; Synchronous Event from Pin PA3
  EVSYS_SYNCCH0_PORTA_PIN4_gc = (0x11<<0) ; Synchronous Event from Pin PA4
  EVSYS_SYNCCH0_PORTA_PIN5_gc = (0x12<<0) ; Synchronous Event from Pin PA5
  EVSYS_SYNCCH0_PORTA_PIN6_gc = (0x13<<0) ; Synchronous Event from Pin PA6
  EVSYS_SYNCCH0_PORTA_PIN7_gc = (0x14<<0) ; Synchronous Event from Pin PA7
  EVSYS_SYNCCH0_TCB1_gc = (0x15<<0)   ; Timer/Counter B1
  
  ; Synchronous User Ch 0 - TCA0 select
  EVSYS_SYNCUSER0_OFF_gc = (0x00<<0)  ; Off
  EVSYS_SYNCUSER0_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  
  ; Synchronous User Ch 1 - USART0 select
  EVSYS_SYNCUSER1_OFF_gc = (0x00<<0)  ; Off
  EVSYS_SYNCUSER1_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  
  
  ;*************************************************************************
  ;** FUSE - Fuses
  ;*************************************************************************
  
  ; FUSE_WDTCFG masks
  FUSE_PERIOD_gm = 0x0F               ; Watchdog Timeout Period group mask
  FUSE_PERIOD_gp = 0                  ; Watchdog Timeout Period group position
  FUSE_PERIOD_0_bm = (1<<0)           ; Watchdog Timeout Period bit 0 mask
  FUSE_PERIOD_0_bp = 0                ; Watchdog Timeout Period bit 0 position
  FUSE_PERIOD_1_bm = (1<<1)           ; Watchdog Timeout Period bit 1 mask
  FUSE_PERIOD_1_bp = 1                ; Watchdog Timeout Period bit 1 position
  FUSE_PERIOD_2_bm = (1<<2)           ; Watchdog Timeout Period bit 2 mask
  FUSE_PERIOD_2_bp = 2                ; Watchdog Timeout Period bit 2 position
  FUSE_PERIOD_3_bm = (1<<3)           ; Watchdog Timeout Period bit 3 mask
  FUSE_PERIOD_3_bp = 3                ; Watchdog Timeout Period bit 3 position
  FUSE_WINDOW_gm = 0xF0               ; Watchdog Window Timeout Period group mask
  FUSE_WINDOW_gp = 4                  ; Watchdog Window Timeout Period group position
  FUSE_WINDOW_0_bm = (1<<4)           ; Watchdog Window Timeout Period bit 0 mask
  FUSE_WINDOW_0_bp = 4                ; Watchdog Window Timeout Period bit 0 position
  FUSE_WINDOW_1_bm = (1<<5)           ; Watchdog Window Timeout Period bit 1 mask
  FUSE_WINDOW_1_bp = 5                ; Watchdog Window Timeout Period bit 1 position
  FUSE_WINDOW_2_bm = (1<<6)           ; Watchdog Window Timeout Period bit 2 mask
  FUSE_WINDOW_2_bp = 6                ; Watchdog Window Timeout Period bit 2 position
  FUSE_WINDOW_3_bm = (1<<7)           ; Watchdog Window Timeout Period bit 3 mask
  FUSE_WINDOW_3_bp = 7                ; Watchdog Window Timeout Period bit 3 position
  
  ; FUSE_BODCFG masks
  FUSE_SLEEP_gm = 0x03                ; BOD Operation in Sleep Mode group mask
  FUSE_SLEEP_gp = 0                   ; BOD Operation in Sleep Mode group position
  FUSE_SLEEP_0_bm = (1<<0)            ; BOD Operation in Sleep Mode bit 0 mask
  FUSE_SLEEP_0_bp = 0                 ; BOD Operation in Sleep Mode bit 0 position
  FUSE_SLEEP_1_bm = (1<<1)            ; BOD Operation in Sleep Mode bit 1 mask
  FUSE_SLEEP_1_bp = 1                 ; BOD Operation in Sleep Mode bit 1 position
  FUSE_ACTIVE_gm = 0x0C               ; BOD Operation in Active Mode group mask
  FUSE_ACTIVE_gp = 2                  ; BOD Operation in Active Mode group position
  FUSE_ACTIVE_0_bm = (1<<2)           ; BOD Operation in Active Mode bit 0 mask
  FUSE_ACTIVE_0_bp = 2                ; BOD Operation in Active Mode bit 0 position
  FUSE_ACTIVE_1_bm = (1<<3)           ; BOD Operation in Active Mode bit 1 mask
  FUSE_ACTIVE_1_bp = 3                ; BOD Operation in Active Mode bit 1 position
  FUSE_SAMPFREQ_bm = 0x10             ; BOD Sample Frequency bit mask
  FUSE_SAMPFREQ_bp = 4                ; BOD Sample Frequency bit position
  FUSE_LVL_gm = 0xE0                  ; BOD Level group mask
  FUSE_LVL_gp = 5                     ; BOD Level group position
  FUSE_LVL_0_bm = (1<<5)              ; BOD Level bit 0 mask
  FUSE_LVL_0_bp = 5                   ; BOD Level bit 0 position
  FUSE_LVL_1_bm = (1<<6)              ; BOD Level bit 1 mask
  FUSE_LVL_1_bp = 6                   ; BOD Level bit 1 position
  FUSE_LVL_2_bm = (1<<7)              ; BOD Level bit 2 mask
  FUSE_LVL_2_bp = 7                   ; BOD Level bit 2 position
  
  ; FUSE_OSCCFG masks
  FUSE_FREQSEL_gm = 0x03              ; Frequency Select group mask
  FUSE_FREQSEL_gp = 0                 ; Frequency Select group position
  FUSE_FREQSEL_0_bm = (1<<0)          ; Frequency Select bit 0 mask
  FUSE_FREQSEL_0_bp = 0               ; Frequency Select bit 0 position
  FUSE_FREQSEL_1_bm = (1<<1)          ; Frequency Select bit 1 mask
  FUSE_FREQSEL_1_bp = 1               ; Frequency Select bit 1 position
  FUSE_OSCLOCK_bm = 0x80              ; Oscillator Lock bit mask
  FUSE_OSCLOCK_bp = 7                 ; Oscillator Lock bit position
  
  ; FUSE_SYSCFG0 masks
  FUSE_EESAVE_bm = 0x01               ; EEPROM Save bit mask
  FUSE_EESAVE_bp = 0                  ; EEPROM Save bit position
  FUSE_RSTPINCFG_gm = 0x0C            ; Reset Pin Configuration group mask
  FUSE_RSTPINCFG_gp = 2               ; Reset Pin Configuration group position
  FUSE_RSTPINCFG_0_bm = (1<<2)        ; Reset Pin Configuration bit 0 mask
  FUSE_RSTPINCFG_0_bp = 2             ; Reset Pin Configuration bit 0 position
  FUSE_RSTPINCFG_1_bm = (1<<3)        ; Reset Pin Configuration bit 1 mask
  FUSE_RSTPINCFG_1_bp = 3             ; Reset Pin Configuration bit 1 position
  FUSE_CRCSRC_gm = 0xC0               ; CRC Source group mask
  FUSE_CRCSRC_gp = 6                  ; CRC Source group position
  FUSE_CRCSRC_0_bm = (1<<6)           ; CRC Source bit 0 mask
  FUSE_CRCSRC_0_bp = 6                ; CRC Source bit 0 position
  FUSE_CRCSRC_1_bm = (1<<7)           ; CRC Source bit 1 mask
  FUSE_CRCSRC_1_bp = 7                ; CRC Source bit 1 position
  
  ; FUSE_SYSCFG1 masks
  FUSE_SUT_gm = 0x07                  ; Startup Time group mask
  FUSE_SUT_gp = 0                     ; Startup Time group position
  FUSE_SUT_0_bm = (1<<0)              ; Startup Time bit 0 mask
  FUSE_SUT_0_bp = 0                   ; Startup Time bit 0 position
  FUSE_SUT_1_bm = (1<<1)              ; Startup Time bit 1 mask
  FUSE_SUT_1_bp = 1                   ; Startup Time bit 1 position
  FUSE_SUT_2_bm = (1<<2)              ; Startup Time bit 2 mask
  FUSE_SUT_2_bp = 2                   ; Startup Time bit 2 position
  
  ; BOD Operation in Active Mode select
  FUSE_ACTIVE_DIS_gc = (0x00<<2)      ; Disabled
  FUSE_ACTIVE_ENABLED_gc = (0x01<<2)  ; Enabled
  FUSE_ACTIVE_SAMPLED_gc = (0x02<<2)  ; Sampled
  FUSE_ACTIVE_ENWAKE_gc = (0x03<<2)   ; Enabled with wake-up halted until BOD is ready
  
  ; BOD Level select
  FUSE_LVL_BODLEVEL0_gc = (0x00<<5)   ; 1.8 V
  FUSE_LVL_BODLEVEL2_gc = (0x02<<5)   ; 2.6 V
  FUSE_LVL_BODLEVEL7_gc = (0x07<<5)   ; 4.2 V
  
  ; BOD Sample Frequency select
  FUSE_SAMPFREQ_1KHZ_gc = (0x00<<4)   ; 1kHz sampling frequency
  FUSE_SAMPFREQ_125HZ_gc = (0x01<<4)  ; 125Hz sampling frequency
  
  ; BOD Operation in Sleep Mode select
  FUSE_SLEEP_DIS_gc = (0x00<<0)       ; Disabled
  FUSE_SLEEP_ENABLED_gc = (0x01<<0)   ; Enabled
  FUSE_SLEEP_SAMPLED_gc = (0x02<<0)   ; Sampled
  
  ; Frequency Select
  FUSE_FREQSEL_16MHZ_gc = (0x01<<0)   ; 16 MHz
  FUSE_FREQSEL_20MHZ_gc = (0x02<<0)   ; 20 MHz
  
  ; CRC Source select
  FUSE_CRCSRC_FLASH_gc = (0x00<<6)    ; The CRC is performed on the entire Flash (boot, application code and application data section).
  FUSE_CRCSRC_BOOT_gc = (0x01<<6)     ; The CRC is performed on the boot section of Flash
  FUSE_CRCSRC_BOOTAPP_gc = (0x02<<6)  ; The CRC is performed on the boot and application code section of Flash
  FUSE_CRCSRC_NOCRC_gc = (0x03<<6)    ; Disable CRC.
  
  ; Reset Pin Configuration select
  FUSE_RSTPINCFG_GPIO_gc = (0x00<<2)  ; GPIO mode
  FUSE_RSTPINCFG_UPDI_gc = (0x01<<2)  ; UPDI mode
  FUSE_RSTPINCFG_RST_gc = (0x02<<2)   ; Reset mode
  
  ; Startup Time select
  FUSE_SUT_0MS_gc = (0x00<<0)         ; 0 ms
  FUSE_SUT_1MS_gc = (0x01<<0)         ; 1 ms
  FUSE_SUT_2MS_gc = (0x02<<0)         ; 2 ms
  FUSE_SUT_4MS_gc = (0x03<<0)         ; 4 ms
  FUSE_SUT_8MS_gc = (0x04<<0)         ; 8 ms
  FUSE_SUT_16MS_gc = (0x05<<0)        ; 16 ms
  FUSE_SUT_32MS_gc = (0x06<<0)        ; 32 ms
  FUSE_SUT_64MS_gc = (0x07<<0)        ; 64 ms
  
  ; Watchdog Timeout Period select
  FUSE_PERIOD_OFF_gc = (0x00<<0)      ; Off
  FUSE_PERIOD_8CLK_gc = (0x01<<0)     ; 8 cycles (8ms)
  FUSE_PERIOD_16CLK_gc = (0x02<<0)    ; 16 cycles (16ms)
  FUSE_PERIOD_32CLK_gc = (0x03<<0)    ; 32 cycles (32ms)
  FUSE_PERIOD_64CLK_gc = (0x04<<0)    ; 64 cycles (64ms)
  FUSE_PERIOD_128CLK_gc = (0x05<<0)   ; 128 cycles (0.128s)
  FUSE_PERIOD_256CLK_gc = (0x06<<0)   ; 256 cycles (0.256s)
  FUSE_PERIOD_512CLK_gc = (0x07<<0)   ; 512 cycles (0.512s)
  FUSE_PERIOD_1KCLK_gc = (0x08<<0)    ; 1K cycles (1.0s)
  FUSE_PERIOD_2KCLK_gc = (0x09<<0)    ; 2K cycles (2.0s)
  FUSE_PERIOD_4KCLK_gc = (0x0A<<0)    ; 4K cycles (4.1s)
  FUSE_PERIOD_8KCLK_gc = (0x0B<<0)    ; 8K cycles (8.2s)
  
  ; Watchdog Window Timeout Period select
  FUSE_WINDOW_OFF_gc = (0x00<<4)      ; Off
  FUSE_WINDOW_8CLK_gc = (0x01<<4)     ; 8 cycles (8ms)
  FUSE_WINDOW_16CLK_gc = (0x02<<4)    ; 16 cycles (16ms)
  FUSE_WINDOW_32CLK_gc = (0x03<<4)    ; 32 cycles (32ms)
  FUSE_WINDOW_64CLK_gc = (0x04<<4)    ; 64 cycles (64ms)
  FUSE_WINDOW_128CLK_gc = (0x05<<4)   ; 128 cycles (0.128s)
  FUSE_WINDOW_256CLK_gc = (0x06<<4)   ; 256 cycles (0.256s)
  FUSE_WINDOW_512CLK_gc = (0x07<<4)   ; 512 cycles (0.512s)
  FUSE_WINDOW_1KCLK_gc = (0x08<<4)    ; 1K cycles (1.0s)
  FUSE_WINDOW_2KCLK_gc = (0x09<<4)    ; 2K cycles (2.0s)
  FUSE_WINDOW_4KCLK_gc = (0x0A<<4)    ; 4K cycles (4.1s)
  FUSE_WINDOW_8KCLK_gc = (0x0B<<4)    ; 8K cycles (8.2s)
  
  
  ;*************************************************************************
  ;** GPIO - General Purpose IO
  ;*************************************************************************
  
  
  ;*************************************************************************
  ;** LOCKBIT - Lockbit
  ;*************************************************************************
  
  ; LOCKBIT_LOCKBIT masks
  LOCKBIT_LB_gm = 0xFF                ; Lock Bits group mask
  LOCKBIT_LB_gp = 0                   ; Lock Bits group position
  LOCKBIT_LB_0_bm = (1<<0)            ; Lock Bits bit 0 mask
  LOCKBIT_LB_0_bp = 0                 ; Lock Bits bit 0 position
  LOCKBIT_LB_1_bm = (1<<1)            ; Lock Bits bit 1 mask
  LOCKBIT_LB_1_bp = 1                 ; Lock Bits bit 1 position
  LOCKBIT_LB_2_bm = (1<<2)            ; Lock Bits bit 2 mask
  LOCKBIT_LB_2_bp = 2                 ; Lock Bits bit 2 position
  LOCKBIT_LB_3_bm = (1<<3)            ; Lock Bits bit 3 mask
  LOCKBIT_LB_3_bp = 3                 ; Lock Bits bit 3 position
  LOCKBIT_LB_4_bm = (1<<4)            ; Lock Bits bit 4 mask
  LOCKBIT_LB_4_bp = 4                 ; Lock Bits bit 4 position
  LOCKBIT_LB_5_bm = (1<<5)            ; Lock Bits bit 5 mask
  LOCKBIT_LB_5_bp = 5                 ; Lock Bits bit 5 position
  LOCKBIT_LB_6_bm = (1<<6)            ; Lock Bits bit 6 mask
  LOCKBIT_LB_6_bp = 6                 ; Lock Bits bit 6 position
  LOCKBIT_LB_7_bm = (1<<7)            ; Lock Bits bit 7 mask
  LOCKBIT_LB_7_bp = 7                 ; Lock Bits bit 7 position
  
  ; Lock Bits select
  LOCKBIT_LB_RWLOCK_gc = (0x3A<<0)    ; Read and write lock
  LOCKBIT_LB_NOLOCK_gc = (0xC5<<0)    ; No locks
  
  
  ;*************************************************************************
  ;** NVMCTRL - Non-volatile Memory Controller
  ;*************************************************************************
  
  ; NVMCTRL_CTRLA masks
  NVMCTRL_CMD_gm = 0x07               ; Command group mask
  NVMCTRL_CMD_gp = 0                  ; Command group position
  NVMCTRL_CMD_0_bm = (1<<0)           ; Command bit 0 mask
  NVMCTRL_CMD_0_bp = 0                ; Command bit 0 position
  NVMCTRL_CMD_1_bm = (1<<1)           ; Command bit 1 mask
  NVMCTRL_CMD_1_bp = 1                ; Command bit 1 position
  NVMCTRL_CMD_2_bm = (1<<2)           ; Command bit 2 mask
  NVMCTRL_CMD_2_bp = 2                ; Command bit 2 position
  
  ; NVMCTRL_CTRLB masks
  NVMCTRL_APCWP_bm = 0x01             ; Application code write protect bit mask
  NVMCTRL_APCWP_bp = 0                ; Application code write protect bit position
  NVMCTRL_BOOTLOCK_bm = 0x02          ; Boot Lock bit mask
  NVMCTRL_BOOTLOCK_bp = 1             ; Boot Lock bit position
  
  ; NVMCTRL_STATUS masks
  NVMCTRL_FBUSY_bm = 0x01             ; Flash busy bit mask
  NVMCTRL_FBUSY_bp = 0                ; Flash busy bit position
  NVMCTRL_EEBUSY_bm = 0x02            ; EEPROM busy bit mask
  NVMCTRL_EEBUSY_bp = 1               ; EEPROM busy bit position
  NVMCTRL_WRERROR_bm = 0x04           ; Write error bit mask
  NVMCTRL_WRERROR_bp = 2              ; Write error bit position
  
  ; NVMCTRL_INTCTRL masks
  NVMCTRL_EEREADY_bm = 0x01           ; EEPROM Ready bit mask
  NVMCTRL_EEREADY_bp = 0              ; EEPROM Ready bit position
  
  ; NVMCTRL_INTFLAGS masks
  ; Masks for NVMCTRL_EEREADY already defined
  
  ; Command select
  NVMCTRL_CMD_NONE_gc = (0x00<<0)     ; No Command
  NVMCTRL_CMD_PAGEWRITE_gc = (0x01<<0) ; Write page
  NVMCTRL_CMD_PAGEERASE_gc = (0x02<<0) ; Erase page
  NVMCTRL_CMD_PAGEERASEWRITE_gc = (0x03<<0) ; Erase and write page
  NVMCTRL_CMD_PAGEBUFCLR_gc = (0x04<<0) ; Page buffer clear
  NVMCTRL_CMD_CHIPERASE_gc = (0x05<<0) ; Chip erase
  NVMCTRL_CMD_EEERASE_gc = (0x06<<0)  ; EEPROM erase
  NVMCTRL_CMD_FUSEWRITE_gc = (0x07<<0) ; Write fuse (PDI only)
  
  
  ;*************************************************************************
  ;** PORT - I/O Ports
  ;*************************************************************************
  
  ; PORT_INTFLAGS masks
  PORT_INT_gm = 0xFF                  ; Pin Interrupt group mask
  PORT_INT_gp = 0                     ; Pin Interrupt group position
  PORT_INT_0_bm = (1<<0)              ; Pin Interrupt bit 0 mask
  PORT_INT_0_bp = 0                   ; Pin Interrupt bit 0 position
  PORT_INT_1_bm = (1<<1)              ; Pin Interrupt bit 1 mask
  PORT_INT_1_bp = 1                   ; Pin Interrupt bit 1 position
  PORT_INT_2_bm = (1<<2)              ; Pin Interrupt bit 2 mask
  PORT_INT_2_bp = 2                   ; Pin Interrupt bit 2 position
  PORT_INT_3_bm = (1<<3)              ; Pin Interrupt bit 3 mask
  PORT_INT_3_bp = 3                   ; Pin Interrupt bit 3 position
  PORT_INT_4_bm = (1<<4)              ; Pin Interrupt bit 4 mask
  PORT_INT_4_bp = 4                   ; Pin Interrupt bit 4 position
  PORT_INT_5_bm = (1<<5)              ; Pin Interrupt bit 5 mask
  PORT_INT_5_bp = 5                   ; Pin Interrupt bit 5 position
  PORT_INT_6_bm = (1<<6)              ; Pin Interrupt bit 6 mask
  PORT_INT_6_bp = 6                   ; Pin Interrupt bit 6 position
  PORT_INT_7_bm = (1<<7)              ; Pin Interrupt bit 7 mask
  PORT_INT_7_bp = 7                   ; Pin Interrupt bit 7 position
  
  ; PORT_PIN0CTRL masks
  PORT_ISC_gm = 0x07                  ; Input/Sense Configuration group mask
  PORT_ISC_gp = 0                     ; Input/Sense Configuration group position
  PORT_ISC_0_bm = (1<<0)              ; Input/Sense Configuration bit 0 mask
  PORT_ISC_0_bp = 0                   ; Input/Sense Configuration bit 0 position
  PORT_ISC_1_bm = (1<<1)              ; Input/Sense Configuration bit 1 mask
  PORT_ISC_1_bp = 1                   ; Input/Sense Configuration bit 1 position
  PORT_ISC_2_bm = (1<<2)              ; Input/Sense Configuration bit 2 mask
  PORT_ISC_2_bp = 2                   ; Input/Sense Configuration bit 2 position
  PORT_PULLUPEN_bm = 0x08             ; Pullup enable bit mask
  PORT_PULLUPEN_bp = 3                ; Pullup enable bit position
  PORT_INVEN_bm = 0x80                ; Inverted I/O Enable bit mask
  PORT_INVEN_bp = 7                   ; Inverted I/O Enable bit position
  
  ; PORT_PIN1CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN2CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN3CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN4CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN5CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN6CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN7CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; Input/Sense Configuration select
  PORT_ISC_INTDISABLE_gc = (0x00<<0)  ; Interrupt disabled but input buffer enabled
  PORT_ISC_BOTHEDGES_gc = (0x01<<0)   ; Sense Both Edges
  PORT_ISC_RISING_gc = (0x02<<0)      ; Sense Rising Edge
  PORT_ISC_FALLING_gc = (0x03<<0)     ; Sense Falling Edge
  PORT_ISC_INPUT_DISABLE_gc = (0x04<<0) ; Digital Input Buffer disabled
  PORT_ISC_LEVEL_gc = (0x05<<0)       ; Sense low Level
  
  
  ;*************************************************************************
  ;** PORTMUX - Port Multiplexer
  ;*************************************************************************
  
  ; PORTMUX_CTRLA masks
  PORTMUX_EVOUT0_bm = 0x01            ; Event Output 0 bit mask
  PORTMUX_EVOUT0_bp = 0               ; Event Output 0 bit position
  PORTMUX_EVOUT1_bm = 0x02            ; Event Output 1 bit mask
  PORTMUX_EVOUT1_bp = 1               ; Event Output 1 bit position
  PORTMUX_EVOUT2_bm = 0x04            ; Event Output 2 bit mask
  PORTMUX_EVOUT2_bp = 2               ; Event Output 2 bit position
  PORTMUX_LUT0_bm = 0x10              ; Configurable Custom Logic LUT0 bit mask
  PORTMUX_LUT0_bp = 4                 ; Configurable Custom Logic LUT0 bit position
  PORTMUX_LUT1_bm = 0x20              ; Configurable Custom Logic LUT1 bit mask
  PORTMUX_LUT1_bp = 5                 ; Configurable Custom Logic LUT1 bit position
  
  ; PORTMUX_CTRLB masks
  PORTMUX_USART0_bm = 0x01            ; Port Multiplexer USART0 bit mask
  PORTMUX_USART0_bp = 0               ; Port Multiplexer USART0 bit position
  PORTMUX_SPI0_bm = 0x04              ; Port Multiplexer SPI0 bit mask
  PORTMUX_SPI0_bp = 2                 ; Port Multiplexer SPI0 bit position
  
  ; PORTMUX_CTRLC masks
  PORTMUX_TCA00_bm = 0x01             ; Port Multiplexer TCA0 Output 0 bit mask
  PORTMUX_TCA00_bp = 0                ; Port Multiplexer TCA0 Output 0 bit position
  PORTMUX_TCA01_bm = 0x02             ; Port Multiplexer TCA0 Output 1 bit mask
  PORTMUX_TCA01_bp = 1                ; Port Multiplexer TCA0 Output 1 bit position
  PORTMUX_TCA02_bm = 0x04             ; Port Multiplexer TCA0 Output 2 bit mask
  PORTMUX_TCA02_bp = 2                ; Port Multiplexer TCA0 Output 2 bit position
  PORTMUX_TCA03_bm = 0x08             ; Port Multiplexer TCA0 Output 3 bit mask
  PORTMUX_TCA03_bp = 3                ; Port Multiplexer TCA0 Output 3 bit position
  PORTMUX_TCA04_bm = 0x10             ; Port Multiplexer TCA0 Output 4 bit mask
  PORTMUX_TCA04_bp = 4                ; Port Multiplexer TCA0 Output 4 bit position
  PORTMUX_TCA05_bm = 0x20             ; Port Multiplexer TCA0 Output 5 bit mask
  PORTMUX_TCA05_bp = 5                ; Port Multiplexer TCA0 Output 5 bit position
  
  ; PORTMUX_CTRLD masks
  PORTMUX_TCB0_bm = 0x01              ; Port Multiplexer TCB bit mask
  PORTMUX_TCB0_bp = 0                 ; Port Multiplexer TCB bit position
  
  ; Configurable Custom Logic LUT0 select
  PORTMUX_LUT0_DEFAULT_gc = (0x00<<4) ; Default pin
  PORTMUX_LUT0_ALTERNATE_gc = (0x01<<4) ; Alternate pin
  
  ; Configurable Custom Logic LUT1 select
  PORTMUX_LUT1_DEFAULT_gc = (0x00<<5) ; Default pin
  PORTMUX_LUT1_ALTERNATE_gc = (0x01<<5) ; Alternate pin
  
  ; Port Multiplexer SPI0 select
  PORTMUX_SPI0_DEFAULT_gc = (0x00<<2) ; Default pins
  PORTMUX_SPI0_ALTERNATE_gc = (0x01<<2) ; Alternate pins
  
  ; Port Multiplexer USART0 select
  PORTMUX_USART0_DEFAULT_gc = (0x00<<0) ; Default pins
  PORTMUX_USART0_ALTERNATE_gc = (0x01<<0) ; Alternate pins
  
  ; Port Multiplexer TCA0 Output 0 select
  PORTMUX_TCA00_DEFAULT_gc = (0x00<<0) ; Default pin
  PORTMUX_TCA00_ALTERNATE_gc = (0x01<<0) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 1 select
  PORTMUX_TCA01_DEFAULT_gc = (0x00<<1) ; Default pin
  PORTMUX_TCA01_ALTERNATE_gc = (0x01<<1) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 2 select
  PORTMUX_TCA02_DEFAULT_gc = (0x00<<2) ; Default pin
  PORTMUX_TCA02_ALTERNATE_gc = (0x01<<2) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 3 select
  PORTMUX_TCA03_DEFAULT_gc = (0x00<<3) ; Default pin
  PORTMUX_TCA03_ALTERNATE_gc = (0x01<<3) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 4 select
  PORTMUX_TCA04_DEFAULT_gc = (0x00<<4) ; Default pin
  PORTMUX_TCA04_ALTERNATE_gc = (0x01<<4) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 5 select
  PORTMUX_TCA05_DEFAULT_gc = (0x00<<5) ; Default pin
  PORTMUX_TCA05_ALTERNATE_gc = (0x01<<5) ; Alternate pin
  
  ; Port Multiplexer TCB select
  PORTMUX_TCB0_DEFAULT_gc = (0x00<<0) ; Default pin
  PORTMUX_TCB0_ALTERNATE_gc = (0x01<<0) ; Alternate pin
  
  
  ;*************************************************************************
  ;** RSTCTRL - Reset controller
  ;*************************************************************************
  
  ; RSTCTRL_RSTFR masks
  RSTCTRL_PORF_bm = 0x01              ; Power on Reset flag bit mask
  RSTCTRL_PORF_bp = 0                 ; Power on Reset flag bit position
  RSTCTRL_BORF_bm = 0x02              ; Brown out detector Reset flag bit mask
  RSTCTRL_BORF_bp = 1                 ; Brown out detector Reset flag bit position
  RSTCTRL_EXTRF_bm = 0x04             ; External Reset flag bit mask
  RSTCTRL_EXTRF_bp = 2                ; External Reset flag bit position
  RSTCTRL_WDRF_bm = 0x08              ; Watch dog Reset flag bit mask
  RSTCTRL_WDRF_bp = 3                 ; Watch dog Reset flag bit position
  RSTCTRL_SWRF_bm = 0x10              ; Software Reset flag bit mask
  RSTCTRL_SWRF_bp = 4                 ; Software Reset flag bit position
  RSTCTRL_UPDIRF_bm = 0x20            ; UPDI Reset flag bit mask
  RSTCTRL_UPDIRF_bp = 5               ; UPDI Reset flag bit position
  
  ; RSTCTRL_SWRR masks
  RSTCTRL_SWRE_bm = 0x01              ; Software reset enable bit mask
  RSTCTRL_SWRE_bp = 0                 ; Software reset enable bit position
  
  
  ;*************************************************************************
  ;** RTC - Real-Time Counter
  ;*************************************************************************
  
  ; RTC_CTRLA masks
  RTC_RTCEN_bm = 0x01                 ; Enable bit mask
  RTC_RTCEN_bp = 0                    ; Enable bit position
  RTC_PRESCALER_gm = 0x78             ; Prescaling Factor group mask
  RTC_PRESCALER_gp = 3                ; Prescaling Factor group position
  RTC_PRESCALER_0_bm = (1<<3)         ; Prescaling Factor bit 0 mask
  RTC_PRESCALER_0_bp = 3              ; Prescaling Factor bit 0 position
  RTC_PRESCALER_1_bm = (1<<4)         ; Prescaling Factor bit 1 mask
  RTC_PRESCALER_1_bp = 4              ; Prescaling Factor bit 1 position
  RTC_PRESCALER_2_bm = (1<<5)         ; Prescaling Factor bit 2 mask
  RTC_PRESCALER_2_bp = 5              ; Prescaling Factor bit 2 position
  RTC_PRESCALER_3_bm = (1<<6)         ; Prescaling Factor bit 3 mask
  RTC_PRESCALER_3_bp = 6              ; Prescaling Factor bit 3 position
  RTC_RUNSTDBY_bm = 0x80              ; Run In Standby bit mask
  RTC_RUNSTDBY_bp = 7                 ; Run In Standby bit position
  
  ; RTC_STATUS masks
  RTC_CTRLABUSY_bm = 0x01             ; CTRLA Synchronization Busy Flag bit mask
  RTC_CTRLABUSY_bp = 0                ; CTRLA Synchronization Busy Flag bit position
  RTC_CNTBUSY_bm = 0x02               ; Count Synchronization Busy Flag bit mask
  RTC_CNTBUSY_bp = 1                  ; Count Synchronization Busy Flag bit position
  RTC_PERBUSY_bm = 0x04               ; Period Synchronization Busy Flag bit mask
  RTC_PERBUSY_bp = 2                  ; Period Synchronization Busy Flag bit position
  RTC_CMPBUSY_bm = 0x08               ; Comparator Synchronization Busy Flag bit mask
  RTC_CMPBUSY_bp = 3                  ; Comparator Synchronization Busy Flag bit position
  
  ; RTC_INTCTRL masks
  RTC_OVF_bm = 0x01                   ; Overflow Interrupt enable bit mask
  RTC_OVF_bp = 0                      ; Overflow Interrupt enable bit position
  RTC_CMP_bm = 0x02                   ; Compare Match Interrupt enable bit mask
  RTC_CMP_bp = 1                      ; Compare Match Interrupt enable bit position
  
  ; RTC_INTFLAGS masks
  ; Masks for RTC_OVF already defined
  ; Masks for RTC_CMP already defined
  
  ; RTC_DBGCTRL masks
  RTC_DBGRUN_bm = 0x01                ; Run in debug bit mask
  RTC_DBGRUN_bp = 0                   ; Run in debug bit position
  
  ; RTC_CLKSEL masks
  RTC_CLKSEL_gm = 0x03                ; Clock Select group mask
  RTC_CLKSEL_gp = 0                   ; Clock Select group position
  RTC_CLKSEL_0_bm = (1<<0)            ; Clock Select bit 0 mask
  RTC_CLKSEL_0_bp = 0                 ; Clock Select bit 0 position
  RTC_CLKSEL_1_bm = (1<<1)            ; Clock Select bit 1 mask
  RTC_CLKSEL_1_bp = 1                 ; Clock Select bit 1 position
  
  ; RTC_PITCTRLA masks
  RTC_PITEN_bm = 0x01                 ; Enable bit mask
  RTC_PITEN_bp = 0                    ; Enable bit position
  RTC_PERIOD_gm = 0x78                ; Period group mask
  RTC_PERIOD_gp = 3                   ; Period group position
  RTC_PERIOD_0_bm = (1<<3)            ; Period bit 0 mask
  RTC_PERIOD_0_bp = 3                 ; Period bit 0 position
  RTC_PERIOD_1_bm = (1<<4)            ; Period bit 1 mask
  RTC_PERIOD_1_bp = 4                 ; Period bit 1 position
  RTC_PERIOD_2_bm = (1<<5)            ; Period bit 2 mask
  RTC_PERIOD_2_bp = 5                 ; Period bit 2 position
  RTC_PERIOD_3_bm = (1<<6)            ; Period bit 3 mask
  RTC_PERIOD_3_bp = 6                 ; Period bit 3 position
  
  ; RTC_PITSTATUS masks
  RTC_CTRLBUSY_bm = 0x01              ; CTRLA Synchronization Busy Flag bit mask
  RTC_CTRLBUSY_bp = 0                 ; CTRLA Synchronization Busy Flag bit position
  
  ; RTC_PITINTCTRL masks
  RTC_PI_bm = 0x01                    ; Periodic Interrupt bit mask
  RTC_PI_bp = 0                       ; Periodic Interrupt bit position
  
  ; RTC_PITINTFLAGS masks
  ; Masks for RTC_PI already defined
  
  ; RTC_PITDBGCTRL masks
  ; Masks for RTC_DBGRUN already defined
  
  ; Clock Select
  RTC_CLKSEL_INT32K_gc = (0x00<<0)    ; Internal 32kHz OSC
  RTC_CLKSEL_INT1K_gc = (0x01<<0)     ; Internal 1kHz OSC
  RTC_CLKSEL_EXTCLK_gc = (0x03<<0)    ; External Clock
  
  ; Prescaling Factor select
  RTC_PRESCALER_DIV1_gc = (0x00<<3)   ; RTC Clock / 1
  RTC_PRESCALER_DIV2_gc = (0x01<<3)   ; RTC Clock / 2
  RTC_PRESCALER_DIV4_gc = (0x02<<3)   ; RTC Clock / 4
  RTC_PRESCALER_DIV8_gc = (0x03<<3)   ; RTC Clock / 8
  RTC_PRESCALER_DIV16_gc = (0x04<<3)  ; RTC Clock / 16
  RTC_PRESCALER_DIV32_gc = (0x05<<3)  ; RTC Clock / 32
  RTC_PRESCALER_DIV64_gc = (0x06<<3)  ; RTC Clock / 64
  RTC_PRESCALER_DIV128_gc = (0x07<<3) ; RTC Clock / 128
  RTC_PRESCALER_DIV256_gc = (0x08<<3) ; RTC Clock / 256
  RTC_PRESCALER_DIV512_gc = (0x09<<3) ; RTC Clock / 512
  RTC_PRESCALER_DIV1024_gc = (0x0A<<3) ; RTC Clock / 1024
  RTC_PRESCALER_DIV2048_gc = (0x0B<<3) ; RTC Clock / 2048
  RTC_PRESCALER_DIV4096_gc = (0x0C<<3) ; RTC Clock / 4096
  RTC_PRESCALER_DIV8192_gc = (0x0D<<3) ; RTC Clock / 8192
  RTC_PRESCALER_DIV16384_gc = (0x0E<<3) ; RTC Clock / 16384
  RTC_PRESCALER_DIV32768_gc = (0x0F<<3) ; RTC Clock / 32768
  
  ; Period select
  RTC_PERIOD_OFF_gc = (0x00<<3)       ; Off
  RTC_PERIOD_CYC4_gc = (0x01<<3)      ; RTC Clock Cycles 4
  RTC_PERIOD_CYC8_gc = (0x02<<3)      ; RTC Clock Cycles 8
  RTC_PERIOD_CYC16_gc = (0x03<<3)     ; RTC Clock Cycles 16
  RTC_PERIOD_CYC32_gc = (0x04<<3)     ; RTC Clock Cycles 32
  RTC_PERIOD_CYC64_gc = (0x05<<3)     ; RTC Clock Cycles 64
  RTC_PERIOD_CYC128_gc = (0x06<<3)    ; RTC Clock Cycles 128
  RTC_PERIOD_CYC256_gc = (0x07<<3)    ; RTC Clock Cycles 256
  RTC_PERIOD_CYC512_gc = (0x08<<3)    ; RTC Clock Cycles 512
  RTC_PERIOD_CYC1024_gc = (0x09<<3)   ; RTC Clock Cycles 1024
  RTC_PERIOD_CYC2048_gc = (0x0A<<3)   ; RTC Clock Cycles 2048
  RTC_PERIOD_CYC4096_gc = (0x0B<<3)   ; RTC Clock Cycles 4096
  RTC_PERIOD_CYC8192_gc = (0x0C<<3)   ; RTC Clock Cycles 8192
  RTC_PERIOD_CYC16384_gc = (0x0D<<3)  ; RTC Clock Cycles 16384
  RTC_PERIOD_CYC32768_gc = (0x0E<<3)  ; RTC Clock Cycles 32768
  
  
  ;*************************************************************************
  ;** SIGROW - Signature row
  ;*************************************************************************
  
  
  ;*************************************************************************
  ;** SLPCTRL - Sleep Controller
  ;*************************************************************************
  
  ; SLPCTRL_CTRLA masks
  SLPCTRL_SEN_bm = 0x01               ; Sleep enable bit mask
  SLPCTRL_SEN_bp = 0                  ; Sleep enable bit position
  SLPCTRL_SMODE_gm = 0x06             ; Sleep mode group mask
  SLPCTRL_SMODE_gp = 1                ; Sleep mode group position
  SLPCTRL_SMODE_0_bm = (1<<1)         ; Sleep mode bit 0 mask
  SLPCTRL_SMODE_0_bp = 1              ; Sleep mode bit 0 position
  SLPCTRL_SMODE_1_bm = (1<<2)         ; Sleep mode bit 1 mask
  SLPCTRL_SMODE_1_bp = 2              ; Sleep mode bit 1 position
  
  ; Sleep mode select
  SLPCTRL_SMODE_IDLE_gc = (0x00<<1)   ; Idle mode
  SLPCTRL_SMODE_STDBY_gc = (0x01<<1)  ; Standby Mode
  SLPCTRL_SMODE_PDOWN_gc = (0x02<<1)  ; Power-down Mode
  
  
  ;*************************************************************************
  ;** SPI - Serial Peripheral Interface
  ;*************************************************************************
  
  ; SPI_CTRLA masks
  SPI_ENABLE_bm = 0x01                ; Enable Module bit mask
  SPI_ENABLE_bp = 0                   ; Enable Module bit position
  SPI_PRESC_gm = 0x06                 ; Prescaler group mask
  SPI_PRESC_gp = 1                    ; Prescaler group position
  SPI_PRESC_0_bm = (1<<1)             ; Prescaler bit 0 mask
  SPI_PRESC_0_bp = 1                  ; Prescaler bit 0 position
  SPI_PRESC_1_bm = (1<<2)             ; Prescaler bit 1 mask
  SPI_PRESC_1_bp = 2                  ; Prescaler bit 1 position
  SPI_CLK2X_bm = 0x10                 ; Enable Double Speed bit mask
  SPI_CLK2X_bp = 4                    ; Enable Double Speed bit position
  SPI_MASTER_bm = 0x20                ; Host Operation Enable bit mask
  SPI_MASTER_bp = 5                   ; Host Operation Enable bit position
  SPI_DORD_bm = 0x40                  ; Data Order Setting bit mask
  SPI_DORD_bp = 6                     ; Data Order Setting bit position
  
  ; SPI_CTRLB masks
  SPI_MODE_gm = 0x03                  ; SPI Mode group mask
  SPI_MODE_gp = 0                     ; SPI Mode group position
  SPI_MODE_0_bm = (1<<0)              ; SPI Mode bit 0 mask
  SPI_MODE_0_bp = 0                   ; SPI Mode bit 0 position
  SPI_MODE_1_bm = (1<<1)              ; SPI Mode bit 1 mask
  SPI_MODE_1_bp = 1                   ; SPI Mode bit 1 position
  SPI_SSD_bm = 0x04                   ; Client Select Disable bit mask
  SPI_SSD_bp = 2                      ; Client Select Disable bit position
  SPI_BUFWR_bm = 0x40                 ; Buffer Write Mode bit mask
  SPI_BUFWR_bp = 6                    ; Buffer Write Mode bit position
  SPI_BUFEN_bm = 0x80                 ; Buffer Mode Enable bit mask
  SPI_BUFEN_bp = 7                    ; Buffer Mode Enable bit position
  
  ; SPI_INTCTRL masks
  SPI_IE_bm = 0x01                    ; Interrupt Enable bit mask
  SPI_IE_bp = 0                       ; Interrupt Enable bit position
  SPI_SSIE_bm = 0x10                  ; Client Select Trigger Interrupt Enable bit mask
  SPI_SSIE_bp = 4                     ; Client Select Trigger Interrupt Enable bit position
  SPI_DREIE_bm = 0x20                 ; Data Register Empty Interrupt Enable bit mask
  SPI_DREIE_bp = 5                    ; Data Register Empty Interrupt Enable bit position
  SPI_TXCIE_bm = 0x40                 ; Transfer Complete Interrupt Enable bit mask
  SPI_TXCIE_bp = 6                    ; Transfer Complete Interrupt Enable bit position
  SPI_RXCIE_bm = 0x80                 ; Receive Complete Interrupt Enable bit mask
  SPI_RXCIE_bp = 7                    ; Receive Complete Interrupt Enable bit position
  
  ; SPI_INTFLAGS masks
  SPI_BUFOVF_bm = 0x01                ; Buffer Overflow bit mask
  SPI_BUFOVF_bp = 0                   ; Buffer Overflow bit position
  SPI_SSIF_bm = 0x10                  ; Client Select Trigger Interrupt Flag bit mask
  SPI_SSIF_bp = 4                     ; Client Select Trigger Interrupt Flag bit position
  SPI_DREIF_bm = 0x20                 ; Data Register Empty Interrupt Flag bit mask
  SPI_DREIF_bp = 5                    ; Data Register Empty Interrupt Flag bit position
  SPI_TXCIF_bm = 0x40                 ; Transfer Complete Interrupt Flag bit mask
  SPI_TXCIF_bp = 6                    ; Transfer Complete Interrupt Flag bit position
  SPI_WRCOL_bm = 0x40                 ; Write Collision bit mask
  SPI_WRCOL_bp = 6                    ; Write Collision bit position
  SPI_RXCIF_bm = 0x80                 ; Receive Complete Interrupt Flag bit mask
  SPI_RXCIF_bp = 7                    ; Receive Complete Interrupt Flag bit position
  SPI_IF_bm = 0x80                    ; Interrupt Flag bit mask
  SPI_IF_bp = 7                       ; Interrupt Flag bit position
  
  ; Prescaler select
  SPI_PRESC_DIV4_gc = (0x00<<1)       ; System Clock / 4
  SPI_PRESC_DIV16_gc = (0x01<<1)      ; System Clock / 16
  SPI_PRESC_DIV64_gc = (0x02<<1)      ; System Clock / 64
  SPI_PRESC_DIV128_gc = (0x03<<1)     ; System Clock / 128
  
  ; SPI Mode select
  SPI_MODE_0_gc = (0x00<<0)           ; SPI Mode 0
  SPI_MODE_1_gc = (0x01<<0)           ; SPI Mode 1
  SPI_MODE_2_gc = (0x02<<0)           ; SPI Mode 2
  SPI_MODE_3_gc = (0x03<<0)           ; SPI Mode 3
  
  
  ;*************************************************************************
  ;** SYSCFG - System Configuration Registers
  ;*************************************************************************
  
  ; SYSCFG_EXTBRK masks
  SYSCFG_ENEXTBRK_bm = 0x01           ; External break enable bit mask
  SYSCFG_ENEXTBRK_bp = 0              ; External break enable bit position
  
  
  ;*************************************************************************
  ;** TCA - 16-bit Timer/Counter Type A
  ;*************************************************************************
  
  ; TCA_SINGLE_CTRLA masks
  TCA_SINGLE_ENABLE_bm = 0x01         ; Module Enable bit mask
  TCA_SINGLE_ENABLE_bp = 0            ; Module Enable bit position
  TCA_SINGLE_CLKSEL_gm = 0x0E         ; Clock Selection group mask
  TCA_SINGLE_CLKSEL_gp = 1            ; Clock Selection group position
  TCA_SINGLE_CLKSEL_0_bm = (1<<1)     ; Clock Selection bit 0 mask
  TCA_SINGLE_CLKSEL_0_bp = 1          ; Clock Selection bit 0 position
  TCA_SINGLE_CLKSEL_1_bm = (1<<2)     ; Clock Selection bit 1 mask
  TCA_SINGLE_CLKSEL_1_bp = 2          ; Clock Selection bit 1 position
  TCA_SINGLE_CLKSEL_2_bm = (1<<3)     ; Clock Selection bit 2 mask
  TCA_SINGLE_CLKSEL_2_bp = 3          ; Clock Selection bit 2 position
  
  ; TCA_SINGLE_CTRLB masks
  TCA_SINGLE_WGMODE_gm = 0x07         ; Waveform generation mode group mask
  TCA_SINGLE_WGMODE_gp = 0            ; Waveform generation mode group position
  TCA_SINGLE_WGMODE_0_bm = (1<<0)     ; Waveform generation mode bit 0 mask
  TCA_SINGLE_WGMODE_0_bp = 0          ; Waveform generation mode bit 0 position
  TCA_SINGLE_WGMODE_1_bm = (1<<1)     ; Waveform generation mode bit 1 mask
  TCA_SINGLE_WGMODE_1_bp = 1          ; Waveform generation mode bit 1 position
  TCA_SINGLE_WGMODE_2_bm = (1<<2)     ; Waveform generation mode bit 2 mask
  TCA_SINGLE_WGMODE_2_bp = 2          ; Waveform generation mode bit 2 position
  TCA_SINGLE_ALUPD_bm = 0x08          ; Auto Lock Update bit mask
  TCA_SINGLE_ALUPD_bp = 3             ; Auto Lock Update bit position
  TCA_SINGLE_CMP0EN_bm = 0x10         ; Compare 0 Enable bit mask
  TCA_SINGLE_CMP0EN_bp = 4            ; Compare 0 Enable bit position
  TCA_SINGLE_CMP1EN_bm = 0x20         ; Compare 1 Enable bit mask
  TCA_SINGLE_CMP1EN_bp = 5            ; Compare 1 Enable bit position
  TCA_SINGLE_CMP2EN_bm = 0x40         ; Compare 2 Enable bit mask
  TCA_SINGLE_CMP2EN_bp = 6            ; Compare 2 Enable bit position
  
  ; TCA_SINGLE_CTRLC masks
  TCA_SINGLE_CMP0OV_bm = 0x01         ; Compare 0 Waveform Output Value bit mask
  TCA_SINGLE_CMP0OV_bp = 0            ; Compare 0 Waveform Output Value bit position
  TCA_SINGLE_CMP1OV_bm = 0x02         ; Compare 1 Waveform Output Value bit mask
  TCA_SINGLE_CMP1OV_bp = 1            ; Compare 1 Waveform Output Value bit position
  TCA_SINGLE_CMP2OV_bm = 0x04         ; Compare 2 Waveform Output Value bit mask
  TCA_SINGLE_CMP2OV_bp = 2            ; Compare 2 Waveform Output Value bit position
  
  ; TCA_SINGLE_CTRLD masks
  TCA_SINGLE_SPLITM_bm = 0x01         ; Split Mode Enable bit mask
  TCA_SINGLE_SPLITM_bp = 0            ; Split Mode Enable bit position
  
  ; TCA_SINGLE_CTRLECLR masks
  TCA_SINGLE_DIR_bm = 0x01            ; Direction bit mask
  TCA_SINGLE_DIR_bp = 0               ; Direction bit position
  TCA_SINGLE_LUPD_bm = 0x02           ; Lock Update bit mask
  TCA_SINGLE_LUPD_bp = 1              ; Lock Update bit position
  TCA_SINGLE_CMD_gm = 0x0C            ; Command group mask
  TCA_SINGLE_CMD_gp = 2               ; Command group position
  TCA_SINGLE_CMD_0_bm = (1<<2)        ; Command bit 0 mask
  TCA_SINGLE_CMD_0_bp = 2             ; Command bit 0 position
  TCA_SINGLE_CMD_1_bm = (1<<3)        ; Command bit 1 mask
  TCA_SINGLE_CMD_1_bp = 3             ; Command bit 1 position
  
  ; TCA_SINGLE_CTRLESET masks
  ; Masks for TCA_SINGLE_DIR already defined
  ; Masks for TCA_SINGLE_LUPD already defined
  ; Masks for TCA_SINGLE_CMD already defined
  
  ; TCA_SINGLE_CTRLFCLR masks
  TCA_SINGLE_PERBV_bm = 0x01          ; Period Buffer Valid bit mask
  TCA_SINGLE_PERBV_bp = 0             ; Period Buffer Valid bit position
  TCA_SINGLE_CMP0BV_bm = 0x02         ; Compare 0 Buffer Valid bit mask
  TCA_SINGLE_CMP0BV_bp = 1            ; Compare 0 Buffer Valid bit position
  TCA_SINGLE_CMP1BV_bm = 0x04         ; Compare 1 Buffer Valid bit mask
  TCA_SINGLE_CMP1BV_bp = 2            ; Compare 1 Buffer Valid bit position
  TCA_SINGLE_CMP2BV_bm = 0x08         ; Compare 2 Buffer Valid bit mask
  TCA_SINGLE_CMP2BV_bp = 3            ; Compare 2 Buffer Valid bit position
  
  ; TCA_SINGLE_CTRLFSET masks
  ; Masks for TCA_SINGLE_PERBV already defined
  ; Masks for TCA_SINGLE_CMP0BV already defined
  ; Masks for TCA_SINGLE_CMP1BV already defined
  ; Masks for TCA_SINGLE_CMP2BV already defined
  
  ; TCA_SINGLE_EVCTRL masks
  TCA_SINGLE_CNTEI_bm = 0x01          ; Count on Event Input bit mask
  TCA_SINGLE_CNTEI_bp = 0             ; Count on Event Input bit position
  TCA_SINGLE_EVACT_gm = 0x06          ; Event Action group mask
  TCA_SINGLE_EVACT_gp = 1             ; Event Action group position
  TCA_SINGLE_EVACT_0_bm = (1<<1)      ; Event Action bit 0 mask
  TCA_SINGLE_EVACT_0_bp = 1           ; Event Action bit 0 position
  TCA_SINGLE_EVACT_1_bm = (1<<2)      ; Event Action bit 1 mask
  TCA_SINGLE_EVACT_1_bp = 2           ; Event Action bit 1 position
  
  ; TCA_SINGLE_INTCTRL masks
  TCA_SINGLE_OVF_bm = 0x01            ; Overflow Interrupt bit mask
  TCA_SINGLE_OVF_bp = 0               ; Overflow Interrupt bit position
  TCA_SINGLE_CMP0_bm = 0x10           ; Compare 0 Interrupt bit mask
  TCA_SINGLE_CMP0_bp = 4              ; Compare 0 Interrupt bit position
  TCA_SINGLE_CMP1_bm = 0x20           ; Compare 1 Interrupt bit mask
  TCA_SINGLE_CMP1_bp = 5              ; Compare 1 Interrupt bit position
  TCA_SINGLE_CMP2_bm = 0x40           ; Compare 2 Interrupt bit mask
  TCA_SINGLE_CMP2_bp = 6              ; Compare 2 Interrupt bit position
  
  ; TCA_SINGLE_INTFLAGS masks
  ; Masks for TCA_SINGLE_OVF already defined
  ; Masks for TCA_SINGLE_CMP0 already defined
  ; Masks for TCA_SINGLE_CMP1 already defined
  ; Masks for TCA_SINGLE_CMP2 already defined
  
  ; TCA_SINGLE_DBGCTRL masks
  TCA_SINGLE_DBGRUN_bm = 0x01         ; Debug Run bit mask
  TCA_SINGLE_DBGRUN_bp = 0            ; Debug Run bit position
  
  ; Masks for CTRLA already defined
  ; Masks for CTRLB already defined
  ; Masks for CTRLC already defined
  ; Masks for CTRLD already defined
  ; Masks for CTRLECLR already defined
  ; Masks for CTRLESET already defined
  ; Masks for INTCTRL already defined
  ; Masks for INTFLAGS already defined
  ; Masks for DBGCTRL already defined
  ; TCA_SPLIT_CTRLA masks
  TCA_SPLIT_ENABLE_bm = 0x01          ; Module Enable bit mask
  TCA_SPLIT_ENABLE_bp = 0             ; Module Enable bit position
  TCA_SPLIT_CLKSEL_gm = 0x0E          ; Clock Selection group mask
  TCA_SPLIT_CLKSEL_gp = 1             ; Clock Selection group position
  TCA_SPLIT_CLKSEL_0_bm = (1<<1)      ; Clock Selection bit 0 mask
  TCA_SPLIT_CLKSEL_0_bp = 1           ; Clock Selection bit 0 position
  TCA_SPLIT_CLKSEL_1_bm = (1<<2)      ; Clock Selection bit 1 mask
  TCA_SPLIT_CLKSEL_1_bp = 2           ; Clock Selection bit 1 position
  TCA_SPLIT_CLKSEL_2_bm = (1<<3)      ; Clock Selection bit 2 mask
  TCA_SPLIT_CLKSEL_2_bp = 3           ; Clock Selection bit 2 position
  
  ; TCA_SPLIT_CTRLB masks
  TCA_SPLIT_LCMP0EN_bm = 0x01         ; Low Compare 0 Enable bit mask
  TCA_SPLIT_LCMP0EN_bp = 0            ; Low Compare 0 Enable bit position
  TCA_SPLIT_LCMP1EN_bm = 0x02         ; Low Compare 1 Enable bit mask
  TCA_SPLIT_LCMP1EN_bp = 1            ; Low Compare 1 Enable bit position
  TCA_SPLIT_LCMP2EN_bm = 0x04         ; Low Compare 2 Enable bit mask
  TCA_SPLIT_LCMP2EN_bp = 2            ; Low Compare 2 Enable bit position
  TCA_SPLIT_HCMP0EN_bm = 0x10         ; High Compare 0 Enable bit mask
  TCA_SPLIT_HCMP0EN_bp = 4            ; High Compare 0 Enable bit position
  TCA_SPLIT_HCMP1EN_bm = 0x20         ; High Compare 1 Enable bit mask
  TCA_SPLIT_HCMP1EN_bp = 5            ; High Compare 1 Enable bit position
  TCA_SPLIT_HCMP2EN_bm = 0x40         ; High Compare 2 Enable bit mask
  TCA_SPLIT_HCMP2EN_bp = 6            ; High Compare 2 Enable bit position
  
  ; TCA_SPLIT_CTRLC masks
  TCA_SPLIT_LCMP0OV_bm = 0x01         ; Low Compare 0 Output Value bit mask
  TCA_SPLIT_LCMP0OV_bp = 0            ; Low Compare 0 Output Value bit position
  TCA_SPLIT_LCMP1OV_bm = 0x02         ; Low Compare 1 Output Value bit mask
  TCA_SPLIT_LCMP1OV_bp = 1            ; Low Compare 1 Output Value bit position
  TCA_SPLIT_LCMP2OV_bm = 0x04         ; Low Compare 2 Output Value bit mask
  TCA_SPLIT_LCMP2OV_bp = 2            ; Low Compare 2 Output Value bit position
  TCA_SPLIT_HCMP0OV_bm = 0x10         ; High Compare 0 Output Value bit mask
  TCA_SPLIT_HCMP0OV_bp = 4            ; High Compare 0 Output Value bit position
  TCA_SPLIT_HCMP1OV_bm = 0x20         ; High Compare 1 Output Value bit mask
  TCA_SPLIT_HCMP1OV_bp = 5            ; High Compare 1 Output Value bit position
  TCA_SPLIT_HCMP2OV_bm = 0x40         ; High Compare 2 Output Value bit mask
  TCA_SPLIT_HCMP2OV_bp = 6            ; High Compare 2 Output Value bit position
  
  ; TCA_SPLIT_CTRLD masks
  TCA_SPLIT_SPLITM_bm = 0x01          ; Split Mode Enable bit mask
  TCA_SPLIT_SPLITM_bp = 0             ; Split Mode Enable bit position
  
  ; TCA_SPLIT_CTRLECLR masks
  TCA_SPLIT_CMD_gm = 0x0C             ; Command group mask
  TCA_SPLIT_CMD_gp = 2                ; Command group position
  TCA_SPLIT_CMD_0_bm = (1<<2)         ; Command bit 0 mask
  TCA_SPLIT_CMD_0_bp = 2              ; Command bit 0 position
  TCA_SPLIT_CMD_1_bm = (1<<3)         ; Command bit 1 mask
  TCA_SPLIT_CMD_1_bp = 3              ; Command bit 1 position
  
  ; TCA_SPLIT_CTRLESET masks
  ; Masks for TCA_SPLIT_CMD already defined
  
  ; TCA_SPLIT_INTCTRL masks
  TCA_SPLIT_LUNF_bm = 0x01            ; Low Underflow Interrupt Enable bit mask
  TCA_SPLIT_LUNF_bp = 0               ; Low Underflow Interrupt Enable bit position
  TCA_SPLIT_HUNF_bm = 0x02            ; High Underflow Interrupt Enable bit mask
  TCA_SPLIT_HUNF_bp = 1               ; High Underflow Interrupt Enable bit position
  TCA_SPLIT_LCMP0_bm = 0x10           ; Low Compare 0 Interrupt Enable bit mask
  TCA_SPLIT_LCMP0_bp = 4              ; Low Compare 0 Interrupt Enable bit position
  TCA_SPLIT_LCMP1_bm = 0x20           ; Low Compare 1 Interrupt Enable bit mask
  TCA_SPLIT_LCMP1_bp = 5              ; Low Compare 1 Interrupt Enable bit position
  TCA_SPLIT_LCMP2_bm = 0x40           ; Low Compare 2 Interrupt Enable bit mask
  TCA_SPLIT_LCMP2_bp = 6              ; Low Compare 2 Interrupt Enable bit position
  
  ; TCA_SPLIT_INTFLAGS masks
  ; Masks for TCA_SPLIT_LUNF already defined
  ; Masks for TCA_SPLIT_HUNF already defined
  ; Masks for TCA_SPLIT_LCMP0 already defined
  ; Masks for TCA_SPLIT_LCMP1 already defined
  ; Masks for TCA_SPLIT_LCMP2 already defined
  
  ; TCA_SPLIT_DBGCTRL masks
  TCA_SPLIT_DBGRUN_bm = 0x01          ; Debug Run bit mask
  TCA_SPLIT_DBGRUN_bp = 0             ; Debug Run bit position
  
  ; Clock Selection
  TCA_SINGLE_CLKSEL_DIV1_gc = (0x00<<1) ; System Clock
  TCA_SINGLE_CLKSEL_DIV2_gc = (0x01<<1) ; System Clock / 2
  TCA_SINGLE_CLKSEL_DIV4_gc = (0x02<<1) ; System Clock / 4
  TCA_SINGLE_CLKSEL_DIV8_gc = (0x03<<1) ; System Clock / 8
  TCA_SINGLE_CLKSEL_DIV16_gc = (0x04<<1) ; System Clock / 16
  TCA_SINGLE_CLKSEL_DIV64_gc = (0x05<<1) ; System Clock / 64
  TCA_SINGLE_CLKSEL_DIV256_gc = (0x06<<1) ; System Clock / 256
  TCA_SINGLE_CLKSEL_DIV1024_gc = (0x07<<1) ; System Clock / 1024
  
  ; Waveform generation mode select
  TCA_SINGLE_WGMODE_NORMAL_gc = (0x00<<0) ; Normal Mode
  TCA_SINGLE_WGMODE_FRQ_gc = (0x01<<0) ; Frequency Generation Mode
  TCA_SINGLE_WGMODE_SINGLESLOPE_gc = (0x03<<0) ; Single Slope PWM
  TCA_SINGLE_WGMODE_DSTOP_gc = (0x05<<0) ; Dual Slope PWM, overflow on TOP
  TCA_SINGLE_WGMODE_DSBOTH_gc = (0x06<<0) ; Dual Slope PWM, overflow on TOP and BOTTOM
  TCA_SINGLE_WGMODE_DSBOTTOM_gc = (0x07<<0) ; Dual Slope PWM, overflow on BOTTOM
  
  ; Command select
  TCA_SINGLE_CMD_NONE_gc = (0x00<<2)  ; No Command
  TCA_SINGLE_CMD_UPDATE_gc = (0x01<<2) ; Force Update
  TCA_SINGLE_CMD_RESTART_gc = (0x02<<2) ; Force Restart
  TCA_SINGLE_CMD_RESET_gc = (0x03<<2) ; Force Hard Reset
  
  ; Direction select
  TCA_SINGLE_DIR_UP_gc = (0x00<<0)    ; Count up
  TCA_SINGLE_DIR_DOWN_gc = (0x01<<0)  ; Count down
  
  ; Event Action select
  TCA_SINGLE_EVACT_POSEDGE_gc = (0x00<<1) ; Count on positive edge event
  TCA_SINGLE_EVACT_ANYEDGE_gc = (0x01<<1) ; Count on any edge event
  TCA_SINGLE_EVACT_HIGHLVL_gc = (0x02<<1) ; Count on prescaled clock while event line is 1.
  TCA_SINGLE_EVACT_UPDOWN_gc = (0x03<<1) ; Count on prescaled clock. Event controls count direction. Up-count when event line is 0, down-count when event line is 1.
  
  ; Clock Selection
  TCA_SPLIT_CLKSEL_DIV1_gc = (0x00<<1) ; System Clock
  TCA_SPLIT_CLKSEL_DIV2_gc = (0x01<<1) ; System Clock / 2
  TCA_SPLIT_CLKSEL_DIV4_gc = (0x02<<1) ; System Clock / 4
  TCA_SPLIT_CLKSEL_DIV8_gc = (0x03<<1) ; System Clock / 8
  TCA_SPLIT_CLKSEL_DIV16_gc = (0x04<<1) ; System Clock / 16
  TCA_SPLIT_CLKSEL_DIV64_gc = (0x05<<1) ; System Clock / 64
  TCA_SPLIT_CLKSEL_DIV256_gc = (0x06<<1) ; System Clock / 256
  TCA_SPLIT_CLKSEL_DIV1024_gc = (0x07<<1) ; System Clock / 1024
  
  ; Command select
  TCA_SPLIT_CMD_NONE_gc = (0x00<<2)   ; No Command
  TCA_SPLIT_CMD_UPDATE_gc = (0x01<<2) ; Force Update
  TCA_SPLIT_CMD_RESTART_gc = (0x02<<2) ; Force Restart
  TCA_SPLIT_CMD_RESET_gc = (0x03<<2)  ; Force Hard Reset
  
  
  ;*************************************************************************
  ;** TCB - 16-bit Timer Type B
  ;*************************************************************************
  
  ; TCB_CTRLA masks
  TCB_ENABLE_bm = 0x01                ; Enable bit mask
  TCB_ENABLE_bp = 0                   ; Enable bit position
  TCB_CLKSEL_gm = 0x06                ; Clock Select group mask
  TCB_CLKSEL_gp = 1                   ; Clock Select group position
  TCB_CLKSEL_0_bm = (1<<1)            ; Clock Select bit 0 mask
  TCB_CLKSEL_0_bp = 1                 ; Clock Select bit 0 position
  TCB_CLKSEL_1_bm = (1<<2)            ; Clock Select bit 1 mask
  TCB_CLKSEL_1_bp = 2                 ; Clock Select bit 1 position
  TCB_SYNCUPD_bm = 0x10               ; Synchronize Update bit mask
  TCB_SYNCUPD_bp = 4                  ; Synchronize Update bit position
  TCB_RUNSTDBY_bm = 0x40              ; Run Standby bit mask
  TCB_RUNSTDBY_bp = 6                 ; Run Standby bit position
  
  ; TCB_CTRLB masks
  TCB_CNTMODE_gm = 0x07               ; Timer Mode group mask
  TCB_CNTMODE_gp = 0                  ; Timer Mode group position
  TCB_CNTMODE_0_bm = (1<<0)           ; Timer Mode bit 0 mask
  TCB_CNTMODE_0_bp = 0                ; Timer Mode bit 0 position
  TCB_CNTMODE_1_bm = (1<<1)           ; Timer Mode bit 1 mask
  TCB_CNTMODE_1_bp = 1                ; Timer Mode bit 1 position
  TCB_CNTMODE_2_bm = (1<<2)           ; Timer Mode bit 2 mask
  TCB_CNTMODE_2_bp = 2                ; Timer Mode bit 2 position
  TCB_CCMPEN_bm = 0x10                ; Pin Output Enable bit mask
  TCB_CCMPEN_bp = 4                   ; Pin Output Enable bit position
  TCB_CCMPINIT_bm = 0x20              ; Pin Initial State bit mask
  TCB_CCMPINIT_bp = 5                 ; Pin Initial State bit position
  TCB_ASYNC_bm = 0x40                 ; Asynchronous Enable bit mask
  TCB_ASYNC_bp = 6                    ; Asynchronous Enable bit position
  
  ; TCB_EVCTRL masks
  TCB_CAPTEI_bm = 0x01                ; Event Input Enable bit mask
  TCB_CAPTEI_bp = 0                   ; Event Input Enable bit position
  TCB_EDGE_bm = 0x10                  ; Event Edge bit mask
  TCB_EDGE_bp = 4                     ; Event Edge bit position
  TCB_FILTER_bm = 0x40                ; Input Capture Noise Cancellation Filter bit mask
  TCB_FILTER_bp = 6                   ; Input Capture Noise Cancellation Filter bit position
  
  ; TCB_INTCTRL masks
  TCB_CAPT_bm = 0x01                  ; Capture or Timeout bit mask
  TCB_CAPT_bp = 0                     ; Capture or Timeout bit position
  
  ; TCB_INTFLAGS masks
  ; Masks for TCB_CAPT already defined
  
  ; TCB_STATUS masks
  TCB_RUN_bm = 0x01                   ; Run bit mask
  TCB_RUN_bp = 0                      ; Run bit position
  
  ; TCB_DBGCTRL masks
  TCB_DBGRUN_bm = 0x01                ; Debug Run bit mask
  TCB_DBGRUN_bp = 0                   ; Debug Run bit position
  
  ; Clock Select
  TCB_CLKSEL_CLKDIV1_gc = (0x00<<1)   ; CLK_PER (No Prescaling)
  TCB_CLKSEL_CLKDIV2_gc = (0x01<<1)   ; CLK_PER/2 (From Prescaler)
  TCB_CLKSEL_CLKTCA_gc = (0x02<<1)    ; Use Clock from TCA
  
  ; Timer Mode select
  TCB_CNTMODE_INT_gc = (0x00<<0)      ; Periodic Interrupt
  TCB_CNTMODE_TIMEOUT_gc = (0x01<<0)  ; Periodic Timeout
  TCB_CNTMODE_CAPT_gc = (0x02<<0)     ; Input Capture Event
  TCB_CNTMODE_FRQ_gc = (0x03<<0)      ; Input Capture Frequency measurement
  TCB_CNTMODE_PW_gc = (0x04<<0)       ; Input Capture Pulse-Width measurement
  TCB_CNTMODE_FRQPW_gc = (0x05<<0)    ; Input Capture Frequency and Pulse-Width measurement
  TCB_CNTMODE_SINGLE_gc = (0x06<<0)   ; Single Shot
  TCB_CNTMODE_PWM8_gc = (0x07<<0)     ; 8-bit PWM
  
  
  ;*************************************************************************
  ;** TWI - Two-Wire Interface
  ;*************************************************************************
  
  ; TWI_CTRLA masks
  TWI_FMPEN_bm = 0x02                 ; FM Plus Enable bit mask
  TWI_FMPEN_bp = 1                    ; FM Plus Enable bit position
  TWI_SDAHOLD_gm = 0x0C               ; SDA Hold Time group mask
  TWI_SDAHOLD_gp = 2                  ; SDA Hold Time group position
  TWI_SDAHOLD_0_bm = (1<<2)           ; SDA Hold Time bit 0 mask
  TWI_SDAHOLD_0_bp = 2                ; SDA Hold Time bit 0 position
  TWI_SDAHOLD_1_bm = (1<<3)           ; SDA Hold Time bit 1 mask
  TWI_SDAHOLD_1_bp = 3                ; SDA Hold Time bit 1 position
  TWI_SDASETUP_bm = 0x10              ; SDA Setup Time bit mask
  TWI_SDASETUP_bp = 4                 ; SDA Setup Time bit position
  
  ; TWI_DBGCTRL masks
  TWI_DBGRUN_bm = 0x01                ; Debug Run bit mask
  TWI_DBGRUN_bp = 0                   ; Debug Run bit position
  
  ; TWI_MCTRLA masks
  TWI_ENABLE_bm = 0x01                ; Enable TWI Host bit mask
  TWI_ENABLE_bp = 0                   ; Enable TWI Host bit position
  TWI_SMEN_bm = 0x02                  ; Smart Mode Enable bit mask
  TWI_SMEN_bp = 1                     ; Smart Mode Enable bit position
  TWI_TIMEOUT_gm = 0x0C               ; Inactive Bus Timeout group mask
  TWI_TIMEOUT_gp = 2                  ; Inactive Bus Timeout group position
  TWI_TIMEOUT_0_bm = (1<<2)           ; Inactive Bus Timeout bit 0 mask
  TWI_TIMEOUT_0_bp = 2                ; Inactive Bus Timeout bit 0 position
  TWI_TIMEOUT_1_bm = (1<<3)           ; Inactive Bus Timeout bit 1 mask
  TWI_TIMEOUT_1_bp = 3                ; Inactive Bus Timeout bit 1 position
  TWI_QCEN_bm = 0x10                  ; Quick Command Enable bit mask
  TWI_QCEN_bp = 4                     ; Quick Command Enable bit position
  TWI_WIEN_bm = 0x40                  ; Write Interrupt Enable bit mask
  TWI_WIEN_bp = 6                     ; Write Interrupt Enable bit position
  TWI_RIEN_bm = 0x80                  ; Read Interrupt Enable bit mask
  TWI_RIEN_bp = 7                     ; Read Interrupt Enable bit position
  
  ; TWI_MCTRLB masks
  TWI_MCMD_gm = 0x03                  ; Command group mask
  TWI_MCMD_gp = 0                     ; Command group position
  TWI_MCMD_0_bm = (1<<0)              ; Command bit 0 mask
  TWI_MCMD_0_bp = 0                   ; Command bit 0 position
  TWI_MCMD_1_bm = (1<<1)              ; Command bit 1 mask
  TWI_MCMD_1_bp = 1                   ; Command bit 1 position
  TWI_ACKACT_bm = 0x04                ; Acknowledge Action bit mask
  TWI_ACKACT_bp = 2                   ; Acknowledge Action bit position
  TWI_FLUSH_bm = 0x08                 ; Flush bit mask
  TWI_FLUSH_bp = 3                    ; Flush bit position
  
  ; TWI_MSTATUS masks
  TWI_BUSSTATE_gm = 0x03              ; Bus State group mask
  TWI_BUSSTATE_gp = 0                 ; Bus State group position
  TWI_BUSSTATE_0_bm = (1<<0)          ; Bus State bit 0 mask
  TWI_BUSSTATE_0_bp = 0               ; Bus State bit 0 position
  TWI_BUSSTATE_1_bm = (1<<1)          ; Bus State bit 1 mask
  TWI_BUSSTATE_1_bp = 1               ; Bus State bit 1 position
  TWI_BUSERR_bm = 0x04                ; Bus Error bit mask
  TWI_BUSERR_bp = 2                   ; Bus Error bit position
  TWI_ARBLOST_bm = 0x08               ; Arbitration Lost bit mask
  TWI_ARBLOST_bp = 3                  ; Arbitration Lost bit position
  TWI_RXACK_bm = 0x10                 ; Received Acknowledge bit mask
  TWI_RXACK_bp = 4                    ; Received Acknowledge bit position
  TWI_CLKHOLD_bm = 0x20               ; Clock Hold bit mask
  TWI_CLKHOLD_bp = 5                  ; Clock Hold bit position
  TWI_WIF_bm = 0x40                   ; Write Interrupt Flag bit mask
  TWI_WIF_bp = 6                      ; Write Interrupt Flag bit position
  TWI_RIF_bm = 0x80                   ; Read Interrupt Flag bit mask
  TWI_RIF_bp = 7                      ; Read Interrupt Flag bit position
  
  ; TWI_SCTRLA masks
  ; Masks for TWI_ENABLE already defined
  ; Masks for TWI_SMEN already defined
  TWI_PMEN_bm = 0x04                  ; Promiscuous Mode Enable bit mask
  TWI_PMEN_bp = 2                     ; Promiscuous Mode Enable bit position
  TWI_PIEN_bm = 0x20                  ; Stop Interrupt Enable bit mask
  TWI_PIEN_bp = 5                     ; Stop Interrupt Enable bit position
  TWI_APIEN_bm = 0x40                 ; Address/Stop Interrupt Enable bit mask
  TWI_APIEN_bp = 6                    ; Address/Stop Interrupt Enable bit position
  TWI_DIEN_bm = 0x80                  ; Data Interrupt Enable bit mask
  TWI_DIEN_bp = 7                     ; Data Interrupt Enable bit position
  
  ; TWI_SCTRLB masks
  TWI_SCMD_gm = 0x03                  ; Command group mask
  TWI_SCMD_gp = 0                     ; Command group position
  TWI_SCMD_0_bm = (1<<0)              ; Command bit 0 mask
  TWI_SCMD_0_bp = 0                   ; Command bit 0 position
  TWI_SCMD_1_bm = (1<<1)              ; Command bit 1 mask
  TWI_SCMD_1_bp = 1                   ; Command bit 1 position
  ; Masks for TWI_ACKACT already defined
  
  ; TWI_SSTATUS masks
  TWI_AP_bm = 0x01                    ; Client Address or Stop bit mask
  TWI_AP_bp = 0                       ; Client Address or Stop bit position
  TWI_DIR_bm = 0x02                   ; Read/Write Direction bit mask
  TWI_DIR_bp = 1                      ; Read/Write Direction bit position
  ; Masks for TWI_BUSERR already defined
  TWI_COLL_bm = 0x08                  ; Collision bit mask
  TWI_COLL_bp = 3                     ; Collision bit position
  ; Masks for TWI_RXACK already defined
  ; Masks for TWI_CLKHOLD already defined
  TWI_APIF_bm = 0x40                  ; Address/Stop Interrupt Flag bit mask
  TWI_APIF_bp = 6                     ; Address/Stop Interrupt Flag bit position
  TWI_DIF_bm = 0x80                   ; Data Interrupt Flag bit mask
  TWI_DIF_bp = 7                      ; Data Interrupt Flag bit position
  
  ; TWI_SADDRMASK masks
  TWI_ADDREN_bm = 0x01                ; Address Enable bit mask
  TWI_ADDREN_bp = 0                   ; Address Enable bit position
  TWI_ADDRMASK_gm = 0xFE              ; Address Mask group mask
  TWI_ADDRMASK_gp = 1                 ; Address Mask group position
  TWI_ADDRMASK_0_bm = (1<<1)          ; Address Mask bit 0 mask
  TWI_ADDRMASK_0_bp = 1               ; Address Mask bit 0 position
  TWI_ADDRMASK_1_bm = (1<<2)          ; Address Mask bit 1 mask
  TWI_ADDRMASK_1_bp = 2               ; Address Mask bit 1 position
  TWI_ADDRMASK_2_bm = (1<<3)          ; Address Mask bit 2 mask
  TWI_ADDRMASK_2_bp = 3               ; Address Mask bit 2 position
  TWI_ADDRMASK_3_bm = (1<<4)          ; Address Mask bit 3 mask
  TWI_ADDRMASK_3_bp = 4               ; Address Mask bit 3 position
  TWI_ADDRMASK_4_bm = (1<<5)          ; Address Mask bit 4 mask
  TWI_ADDRMASK_4_bp = 5               ; Address Mask bit 4 position
  TWI_ADDRMASK_5_bm = (1<<6)          ; Address Mask bit 5 mask
  TWI_ADDRMASK_5_bp = 6               ; Address Mask bit 5 position
  TWI_ADDRMASK_6_bm = (1<<7)          ; Address Mask bit 6 mask
  TWI_ADDRMASK_6_bp = 7               ; Address Mask bit 6 position
  
  ; SDA Hold Time select
  TWI_SDAHOLD_OFF_gc = (0x00<<2)      ; SDA hold time off
  TWI_SDAHOLD_50NS_gc = (0x01<<2)     ; Typical 50ns hold time
  TWI_SDAHOLD_300NS_gc = (0x02<<2)    ; Typical 300ns hold time
  TWI_SDAHOLD_500NS_gc = (0x03<<2)    ; Typical 500ns hold time
  
  ; SDA Setup Time select
  TWI_SDASETUP_4CYC_gc = (0x00<<4)    ; SDA setup time is 4 clock cycles
  TWI_SDASETUP_8CYC_gc = (0x01<<4)    ; SDA setup time is 8 clock cycles
  
  ; Inactive Bus Timeout select
  TWI_TIMEOUT_DISABLED_gc = (0x00<<2) ; Bus Timeout Disabled
  TWI_TIMEOUT_50US_gc = (0x01<<2)     ; 50 Microseconds
  TWI_TIMEOUT_100US_gc = (0x02<<2)    ; 100 Microseconds
  TWI_TIMEOUT_200US_gc = (0x03<<2)    ; 200 Microseconds
  
  ; Acknowledge Action select
  TWI_ACKACT_ACK_gc = (0x00<<2)       ; Send ACK
  TWI_ACKACT_NACK_gc = (0x01<<2)      ; Send NACK
  
  ; Command select
  TWI_MCMD_NOACT_gc = (0x00<<0)       ; No Action
  TWI_MCMD_REPSTART_gc = (0x01<<0)    ; Issue Repeated Start Condition
  TWI_MCMD_RECVTRANS_gc = (0x02<<0)   ; Receive or Transmit Data, depending on DIR
  TWI_MCMD_STOP_gc = (0x03<<0)        ; Issue Stop Condition
  
  ; Bus State select
  TWI_BUSSTATE_UNKNOWN_gc = (0x00<<0) ; Unknown Bus State
  TWI_BUSSTATE_IDLE_gc = (0x01<<0)    ; Bus is Idle
  TWI_BUSSTATE_OWNER_gc = (0x02<<0)   ; This Module Controls The Bus
  TWI_BUSSTATE_BUSY_gc = (0x03<<0)    ; The Bus is Busy
  
  ; Command select
  TWI_SCMD_NOACT_gc = (0x00<<0)       ; No Action
  TWI_SCMD_COMPTRANS_gc = (0x02<<0)   ; Used To Complete a Transaction
  TWI_SCMD_RESPONSE_gc = (0x03<<0)    ; Used in Response to Address/Data Interrupt
  
  ; Client Address or Stop select
  TWI_AP_STOP_gc = (0x00<<0)          ; Stop condition generated APIF
  TWI_AP_ADR_gc = (0x01<<0)           ; Address detection generated APIF
  
  
  ;*************************************************************************
  ;** USART - Universal Synchronous and Asynchronous Receiver and Transmitter
  ;*************************************************************************
  
  ; USART_RXDATAL masks
  USART_DATA_gm = 0xFF                ; RX Data group mask
  USART_DATA_gp = 0                   ; RX Data group position
  USART_DATA_0_bm = (1<<0)            ; RX Data bit 0 mask
  USART_DATA_0_bp = 0                 ; RX Data bit 0 position
  USART_DATA_1_bm = (1<<1)            ; RX Data bit 1 mask
  USART_DATA_1_bp = 1                 ; RX Data bit 1 position
  USART_DATA_2_bm = (1<<2)            ; RX Data bit 2 mask
  USART_DATA_2_bp = 2                 ; RX Data bit 2 position
  USART_DATA_3_bm = (1<<3)            ; RX Data bit 3 mask
  USART_DATA_3_bp = 3                 ; RX Data bit 3 position
  USART_DATA_4_bm = (1<<4)            ; RX Data bit 4 mask
  USART_DATA_4_bp = 4                 ; RX Data bit 4 position
  USART_DATA_5_bm = (1<<5)            ; RX Data bit 5 mask
  USART_DATA_5_bp = 5                 ; RX Data bit 5 position
  USART_DATA_6_bm = (1<<6)            ; RX Data bit 6 mask
  USART_DATA_6_bp = 6                 ; RX Data bit 6 position
  USART_DATA_7_bm = (1<<7)            ; RX Data bit 7 mask
  USART_DATA_7_bp = 7                 ; RX Data bit 7 position
  
  ; USART_RXDATAH masks
  USART_DATA8_bm = 0x01               ; Receiver Data Register bit mask
  USART_DATA8_bp = 0                  ; Receiver Data Register bit position
  USART_PERR_bm = 0x02                ; Parity Error bit mask
  USART_PERR_bp = 1                   ; Parity Error bit position
  USART_FERR_bm = 0x04                ; Frame Error bit mask
  USART_FERR_bp = 2                   ; Frame Error bit position
  USART_BUFOVF_bm = 0x40              ; Buffer Overflow bit mask
  USART_BUFOVF_bp = 6                 ; Buffer Overflow bit position
  USART_RXCIF_bm = 0x80               ; Receive Complete Interrupt Flag bit mask
  USART_RXCIF_bp = 7                  ; Receive Complete Interrupt Flag bit position
  
  ; USART_TXDATAL masks
  ; Masks for USART_DATA already defined
  
  ; USART_TXDATAH masks
  ; Masks for USART_DATA8 already defined
  
  ; USART_STATUS masks
  USART_WFB_bm = 0x01                 ; Wait For Break bit mask
  USART_WFB_bp = 0                    ; Wait For Break bit position
  USART_BDF_bm = 0x02                 ; Break Detected Flag bit mask
  USART_BDF_bp = 1                    ; Break Detected Flag bit position
  USART_ISFIF_bm = 0x08               ; Inconsistent Sync Field Interrupt Flag bit mask
  USART_ISFIF_bp = 3                  ; Inconsistent Sync Field Interrupt Flag bit position
  USART_RXSIF_bm = 0x10               ; Receive Start Interrupt bit mask
  USART_RXSIF_bp = 4                  ; Receive Start Interrupt bit position
  USART_DREIF_bm = 0x20               ; Data Register Empty Flag bit mask
  USART_DREIF_bp = 5                  ; Data Register Empty Flag bit position
  USART_TXCIF_bm = 0x40               ; Transmit Interrupt Flag bit mask
  USART_TXCIF_bp = 6                  ; Transmit Interrupt Flag bit position
  ; Masks for USART_RXCIF already defined
  
  ; USART_CTRLA masks
  USART_RS485_gm = 0x03               ; RS485 Mode internal transmitter group mask
  USART_RS485_gp = 0                  ; RS485 Mode internal transmitter group position
  USART_RS485_0_bm = (1<<0)           ; RS485 Mode internal transmitter bit 0 mask
  USART_RS485_0_bp = 0                ; RS485 Mode internal transmitter bit 0 position
  USART_RS485_1_bm = (1<<1)           ; RS485 Mode internal transmitter bit 1 mask
  USART_RS485_1_bp = 1               Out 2 bit 4 position
  EVSYS_ASYNCUSER10_5_bm = (1<<5)     ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 5 mask
  EVSYS_ASYNCUSER10_5_bp = 5          ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 5 position
  EVSYS_ASYNCUSER10_6_bm = (1<<6)     ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 6 mask
  EVSYS_ASYNCUSER10_6_bp = 6          ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 6 position
  EVSYS_ASYNCUSER10_7_bm = (1<<7)     ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 7 mask
  EVSYS_ASYNCUSER10_7_bp = 7          ; Asynchronous User Ch 10 Input Selection - Event Out 2 bit 7 position
  
  ; EVSYS_ASYNCUSER11 masks
  EVSYS_ASYNCUSER11_gm = 0xFF         ; Asynchronous User Ch 11 Input Selection - TCB1 group mask
  EVSYS_ASYNCUSER11_gp = 0            ; Asynchronous User Ch 11 Input Selection - TCB1 group position
  EVSYS_ASYNCUSER11_0_bm = (1<<0)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 0 mask
  EVSYS_ASYNCUSER11_0_bp = 0          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 0 position
  EVSYS_ASYNCUSER11_1_bm = (1<<1)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 1 mask
  EVSYS_ASYNCUSER11_1_bp = 1          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 1 position
  EVSYS_ASYNCUSER11_2_bm = (1<<2)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 2 mask
  EVSYS_ASYNCUSER11_2_bp = 2          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 2 position
  EVSYS_ASYNCUSER11_3_bm = (1<<3)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 3 mask
  EVSYS_ASYNCUSER11_3_bp = 3          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 3 position
  EVSYS_ASYNCUSER11_4_bm = (1<<4)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 4 mask
  EVSYS_ASYNCUSER11_4_bp = 4          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 4 position
  EVSYS_ASYNCUSER11_5_bm = (1<<5)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 5 mask
  EVSYS_ASYNCUSER11_5_bp = 5          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 5 position
  EVSYS_ASYNCUSER11_6_bm = (1<<6)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 6 mask
  EVSYS_ASYNCUSER11_6_bp = 6          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 6 position
  EVSYS_ASYNCUSER11_7_bm = (1<<7)     ; Asynchronous User Ch 11 Input Selection - TCB1 bit 7 mask
  EVSYS_ASYNCUSER11_7_bp = 7          ; Asynchronous User Ch 11 Input Selection - TCB1 bit 7 position
  
  ; EVSYS_ASYNCUSER12 masks
  EVSYS_ASYNCUSER12_gm = 0xFF         ; Asynchronous User Ch 12 Input Selection - ADC0 group mask
  EVSYS_ASYNCUSER12_gp = 0            ; Asynchronous User Ch 12 Input Selection - ADC0 group position
  EVSYS_ASYNCUSER12_0_bm = (1<<0)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 0 mask
  EVSYS_ASYNCUSER12_0_bp = 0          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 0 position
  EVSYS_ASYNCUSER12_1_bm = (1<<1)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 1 mask
  EVSYS_ASYNCUSER12_1_bp = 1          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 1 position
  EVSYS_ASYNCUSER12_2_bm = (1<<2)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 2 mask
  EVSYS_ASYNCUSER12_2_bp = 2          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 2 position
  EVSYS_ASYNCUSER12_3_bm = (1<<3)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 3 mask
  EVSYS_ASYNCUSER12_3_bp = 3          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 3 position
  EVSYS_ASYNCUSER12_4_bm = (1<<4)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 4 mask
  EVSYS_ASYNCUSER12_4_bp = 4          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 4 position
  EVSYS_ASYNCUSER12_5_bm = (1<<5)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 5 mask
  EVSYS_ASYNCUSER12_5_bp = 5          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 5 position
  EVSYS_ASYNCUSER12_6_bm = (1<<6)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 6 mask
  EVSYS_ASYNCUSER12_6_bp = 6          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 6 position
  EVSYS_ASYNCUSER12_7_bm = (1<<7)     ; Asynchronous User Ch 12 Input Selection - ADC0 bit 7 mask
  EVSYS_ASYNCUSER12_7_bp = 7          ; Asynchronous User Ch 12 Input Selection - ADC0 bit 7 position
  
  ; EVSYS_SYNCUSER0 masks
  EVSYS_SYNCUSER0_gm = 0xFF           ; Synchronous User Ch 0 - TCA0 group mask
  EVSYS_SYNCUSER0_gp = 0              ; Synchronous User Ch 0 - TCA0 group position
  EVSYS_SYNCUSER0_0_bm = (1<<0)       ; Synchronous User Ch 0 - TCA0 bit 0 mask
  EVSYS_SYNCUSER0_0_bp = 0            ; Synchronous User Ch 0 - TCA0 bit 0 position
  EVSYS_SYNCUSER0_1_bm = (1<<1)       ; Synchronous User Ch 0 - TCA0 bit 1 mask
  EVSYS_SYNCUSER0_1_bp = 1            ; Synchronous User Ch 0 - TCA0 bit 1 position
  EVSYS_SYNCUSER0_2_bm = (1<<2)       ; Synchronous User Ch 0 - TCA0 bit 2 mask
  EVSYS_SYNCUSER0_2_bp = 2            ; Synchronous User Ch 0 - TCA0 bit 2 position
  EVSYS_SYNCUSER0_3_bm = (1<<3)       ; Synchronous User Ch 0 - TCA0 bit 3 mask
  EVSYS_SYNCUSER0_3_bp = 3            ; Synchronous User Ch 0 - TCA0 bit 3 position
  EVSYS_SYNCUSER0_4_bm = (1<<4)       ; Synchronous User Ch 0 - TCA0 bit 4 mask
  EVSYS_SYNCUSER0_4_bp = 4            ; Synchronous User Ch 0 - TCA0 bit 4 position
  EVSYS_SYNCUSER0_5_bm = (1<<5)       ; Synchronous User Ch 0 - TCA0 bit 5 mask
  EVSYS_SYNCUSER0_5_bp = 5            ; Synchronous User Ch 0 - TCA0 bit 5 position
  EVSYS_SYNCUSER0_6_bm = (1<<6)       ; Synchronous User Ch 0 - TCA0 bit 6 mask
  EVSYS_SYNCUSER0_6_bp = 6            ; Synchronous User Ch 0 - TCA0 bit 6 position
  EVSYS_SYNCUSER0_7_bm = (1<<7)       ; Synchronous User Ch 0 - TCA0 bit 7 mask
  EVSYS_SYNCUSER0_7_bp = 7            ; Synchronous User Ch 0 - TCA0 bit 7 position
  
  ; EVSYS_SYNCUSER1 masks
  EVSYS_SYNCUSER1_gm = 0xFF           ; Synchronous User Ch 1 - USART0 group mask
  EVSYS_SYNCUSER1_gp = 0              ; Synchronous User Ch 1 - USART0 group position
  EVSYS_SYNCUSER1_0_bm = (1<<0)       ; Synchronous User Ch 1 - USART0 bit 0 mask
  EVSYS_SYNCUSER1_0_bp = 0            ; Synchronous User Ch 1 - USART0 bit 0 position
  EVSYS_SYNCUSER1_1_bm = (1<<1)       ; Synchronous User Ch 1 - USART0 bit 1 mask
  EVSYS_SYNCUSER1_1_bp = 1            ; Synchronous User Ch 1 - USART0 bit 1 position
  EVSYS_SYNCUSER1_2_bm = (1<<2)       ; Synchronous User Ch 1 - USART0 bit 2 mask
  EVSYS_SYNCUSER1_2_bp = 2            ; Synchronous User Ch 1 - USART0 bit 2 position
  EVSYS_SYNCUSER1_3_bm = (1<<3)       ; Synchronous User Ch 1 - USART0 bit 3 mask
  EVSYS_SYNCUSER1_3_bp = 3            ; Synchronous User Ch 1 - USART0 bit 3 position
  EVSYS_SYNCUSER1_4_bm = (1<<4)       ; Synchronous User Ch 1 - USART0 bit 4 mask
  EVSYS_SYNCUSER1_4_bp = 4            ; Synchronous User Ch 1 - USART0 bit 4 position
  EVSYS_SYNCUSER1_5_bm = (1<<5)       ; Synchronous User Ch 1 - USART0 bit 5 mask
  EVSYS_SYNCUSER1_5_bp = 5            ; Synchronous User Ch 1 - USART0 bit 5 position
  EVSYS_SYNCUSER1_6_bm = (1<<6)       ; Synchronous User Ch 1 - USART0 bit 6 mask
  EVSYS_SYNCUSER1_6_bp = 6            ; Synchronous User Ch 1 - USART0 bit 6 position
  EVSYS_SYNCUSER1_7_bm = (1<<7)       ; Synchronous User Ch 1 - USART0 bit 7 mask
  EVSYS_SYNCUSER1_7_bp = 7            ; Synchronous User Ch 1 - USART0 bit 7 position
  
  ; Asynchronous Channel 0 Generator Selection
  EVSYS_ASYNCCH0_OFF_gc = (0x00<<0)   ; Off
  EVSYS_ASYNCCH0_CCL_LUT0_gc = (0x01<<0) ; Configurable Custom Logic LUT0
  EVSYS_ASYNCCH0_CCL_LUT1_gc = (0x02<<0) ; Configurable Custom Logic LUT1
  EVSYS_ASYNCCH0_AC0_OUT_gc = (0x03<<0) ; Analog Comparator 0 out
  EVSYS_ASYNCCH0_TCD0_CMPBCLR_gc = (0x04<<0) ; Timer/Counter D0 compare B clear
  EVSYS_ASYNCCH0_TCD0_CMPASET_gc = (0x05<<0) ; Timer/Counter D0 compare A set
  EVSYS_ASYNCCH0_TCD0_CMPBSET_gc = (0x06<<0) ; Timer/Counter D0 compare B set
  EVSYS_ASYNCCH0_TCD0_PROGEV_gc = (0x07<<0) ; Timer/Counter D0 program event
  EVSYS_ASYNCCH0_RTC_OVF_gc = (0x08<<0) ; Real Time Counter overflow
  EVSYS_ASYNCCH0_RTC_CMP_gc = (0x09<<0) ; Real Time Counter compare
  EVSYS_ASYNCCH0_PORTA_PIN0_gc = (0x0A<<0) ; Asynchronous Event from Pin PA0
  EVSYS_ASYNCCH0_PORTA_PIN1_gc = (0x0B<<0) ; Asynchronous Event from Pin PA1
  EVSYS_ASYNCCH0_PORTA_PIN2_gc = (0x0C<<0) ; Asynchronous Event from Pin PA2
  EVSYS_ASYNCCH0_PORTA_PIN3_gc = (0x0D<<0) ; Asynchronous Event from Pin PA3
  EVSYS_ASYNCCH0_PORTA_PIN4_gc = (0x0E<<0) ; Asynchronous Event from Pin PA4
  EVSYS_ASYNCCH0_PORTA_PIN5_gc = (0x0F<<0) ; Asynchronous Event from Pin PA5
  EVSYS_ASYNCCH0_PORTA_PIN6_gc = (0x10<<0) ; Asynchronous Event from Pin PA6
  EVSYS_ASYNCCH0_PORTA_PIN7_gc = (0x11<<0) ; Asynchronous Event from Pin PA7
  EVSYS_ASYNCCH0_UPDI_gc = (0x12<<0)  ; Unified Program and debug interface
  EVSYS_ASYNCCH0_AC1_OUT_gc = (0x13<<0) ; Analog Comparator 1 out
  EVSYS_ASYNCCH0_AC2_OUT_gc = (0x14<<0) ; Analog Comparator 2 out
  
  ; Asynchronous Channel 1 Generator Selection
  EVSYS_ASYNCCH1_OFF_gc = (0x00<<0)   ; Off
  EVSYS_ASYNCCH1_CCL_LUT0_gc = (0x01<<0) ; Configurable custom logic LUT0
  EVSYS_ASYNCCH1_CCL_LUT1_gc = (0x02<<0) ; Configurable custom logic LUT1
  EVSYS_ASYNCCH1_AC0_OUT_gc = (0x03<<0) ; Analog Comparator 0 out
  EVSYS_ASYNCCH1_TCD0_CMPBCLR_gc = (0x04<<0) ; Timer/Counter D0 compare B clear
  EVSYS_ASYNCCH1_TCD0_CMPASET_gc = (0x05<<0) ; Timer/Counter D0 compare A set
  EVSYS_ASYNCCH1_TCD0_CMPBSET_gc = (0x06<<0) ; Timer/Counter D0 compare B set
  EVSYS_ASYNCCH1_TCD0_PROGEV_gc = (0x07<<0) ; Timer/Counter D0 program event
  EVSYS_ASYNCCH1_RTC_OVF_gc = (0x08<<0) ; Real Time Counter overflow
  EVSYS_ASYNCCH1_RTC_CMP_gc = (0x09<<0) ; Real Time Counter compare
  EVSYS_ASYNCCH1_PORTB_PIN0_gc = (0x0A<<0) ; Asynchronous Event from Pin PB0
  EVSYS_ASYNCCH1_PORTB_PIN1_gc = (0x0B<<0) ; Asynchronous Event from Pin PB1
  EVSYS_ASYNCCH1_PORTB_PIN2_gc = (0x0C<<0) ; Asynchronous Event from Pin PB2
  EVSYS_ASYNCCH1_PORTB_PIN3_gc = (0x0D<<0) ; Asynchronous Event from Pin PB3
  EVSYS_ASYNCCH1_PORTB_PIN4_gc = (0x0E<<0) ; Asynchronous Event from Pin PB4
  EVSYS_ASYNCCH1_PORTB_PIN5_gc = (0x0F<<0) ; Asynchronous Event from Pin PB5
  EVSYS_ASYNCCH1_PORTB_PIN6_gc = (0x10<<0) ; Asynchronous Event from Pin PB6
  EVSYS_ASYNCCH1_PORTB_PIN7_gc = (0x11<<0) ; Asynchronous Event from Pin PB7
  EVSYS_ASYNCCH1_AC1_OUT_gc = (0x12<<0) ; Analog Comparator 1 out
  EVSYS_ASYNCCH1_AC2_OUT_gc = (0x13<<0) ; Analog Comparator 2 out
  
  ; Asynchronous User Ch 0 Input Selection - TCB0
  EVSYS_ASYNCUSER0_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER0_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER0_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER0_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 1 Input Selection - ADC0
  EVSYS_ASYNCUSER1_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER1_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER1_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER1_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 2 Input Selection - CCL LUT0 Event 0
  EVSYS_ASYNCUSER2_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER2_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER2_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER2_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 3 Input Selection - CCL LUT1 Event 0
  EVSYS_ASYNCUSER3_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER3_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER3_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER3_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 4 Input Selection - CCL LUT0 Event 1
  EVSYS_ASYNCUSER4_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER4_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER4_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER4_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 5 Input Selection - CCL LUT1 Event 1
  EVSYS_ASYNCUSER5_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER5_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER5_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER5_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 6 Input Selection - TCD0 Event 0
  EVSYS_ASYNCUSER6_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER6_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER6_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER6_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 7 Input Selection - TCD0 Event 1
  EVSYS_ASYNCUSER7_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER7_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER7_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER7_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 8 Input Selection - Event Out 0
  EVSYS_ASYNCUSER8_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER8_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER8_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER8_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 9 Input Selection - Event Out 1
  EVSYS_ASYNCUSER9_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER9_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER9_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER9_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 10 Input Selection - Event Out 2
  EVSYS_ASYNCUSER10_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER10_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER10_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER10_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 11 Input Selection - TCB1
  EVSYS_ASYNCUSER11_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER11_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER11_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER11_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Asynchronous User Ch 12 Input Selection - ADC0
  EVSYS_ASYNCUSER12_OFF_gc = (0x00<<0) ; Off
  EVSYS_ASYNCUSER12_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  EVSYS_ASYNCUSER12_ASYNCCH0_gc = (0x03<<0) ; Asynchronous Event Channel 0
  EVSYS_ASYNCUSER12_ASYNCCH1_gc = (0x04<<0) ; Asynchronous Event Channel 1
  
  ; Synchronous Channel 0 Generator Selection
  EVSYS_SYNCCH0_OFF_gc = (0x00<<0)    ; Off
  EVSYS_SYNCCH0_TCB0_gc = (0x01<<0)   ; Timer/Counter B0
  EVSYS_SYNCCH0_TCA0_OVF_LUNF_gc = (0x02<<0) ; Timer/Counter A0 overflow
  EVSYS_SYNCCH0_TCA0_HUNF_gc = (0x03<<0) ; Timer/Counter A0 underflow high byte (split mode)
  EVSYS_SYNCCH0_TCA0_CMP0_gc = (0x04<<0) ; Timer/Counter A0 compare 0
  EVSYS_SYNCCH0_TCA0_CMP1_gc = (0x05<<0) ; Timer/Counter A0 compare 1
  EVSYS_SYNCCH0_TCA0_CMP2_gc = (0x06<<0) ; Timer/Counter A0 compare 2
  EVSYS_SYNCCH0_PORTC_PIN0_gc = (0x07<<0) ; Synchronous Event from Pin PC0
  EVSYS_SYNCCH0_PORTC_PIN1_gc = (0x08<<0) ; Synchronous Event from Pin PC1
  EVSYS_SYNCCH0_PORTC_PIN2_gc = (0x09<<0) ; Synchronous Event from Pin PC2
  EVSYS_SYNCCH0_PORTC_PIN3_gc = (0x0A<<0) ; Synchronous Event from Pin PC3
  EVSYS_SYNCCH0_PORTC_PIN4_gc = (0x0B<<0) ; Synchronous Event from Pin PC4
  EVSYS_SYNCCH0_PORTC_PIN5_gc = (0x0C<<0) ; Synchronous Event from Pin PC5
  EVSYS_SYNCCH0_PORTA_PIN0_gc = (0x0D<<0) ; Synchronous Event from Pin PA0
  EVSYS_SYNCCH0_PORTA_PIN1_gc = (0x0E<<0) ; Synchronous Event from Pin PA1
  EVSYS_SYNCCH0_PORTA_PIN2_gc = (0x0F<<0) ; Synchronous Event from Pin PA2
  EVSYS_SYNCCH0_PORTA_PIN3_gc = (0x10<<0) ; Synchronous Event from Pin PA3
  EVSYS_SYNCCH0_PORTA_PIN4_gc = (0x11<<0) ; Synchronous Event from Pin PA4
  EVSYS_SYNCCH0_PORTA_PIN5_gc = (0x12<<0) ; Synchronous Event from Pin PA5
  EVSYS_SYNCCH0_PORTA_PIN6_gc = (0x13<<0) ; Synchronous Event from Pin PA6
  EVSYS_SYNCCH0_PORTA_PIN7_gc = (0x14<<0) ; Synchronous Event from Pin PA7
  EVSYS_SYNCCH0_TCB1_gc = (0x15<<0)   ; Timer/Counter B1
  
  ; Synchronous User Ch 0 - TCA0 select
  EVSYS_SYNCUSER0_OFF_gc = (0x00<<0)  ; Off
  EVSYS_SYNCUSER0_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  
  ; Synchronous User Ch 1 - USART0 select
  EVSYS_SYNCUSER1_OFF_gc = (0x00<<0)  ; Off
  EVSYS_SYNCUSER1_SYNCCH0_gc = (0x01<<0) ; Synchronous Event Channel 0
  
  
  ;*************************************************************************
  ;** FUSE - Fuses
  ;*************************************************************************
  
  ; FUSE_WDTCFG masks
  FUSE_PERIOD_gm = 0x0F               ; Watchdog Timeout Period group mask
  FUSE_PERIOD_gp = 0                  ; Watchdog Timeout Period group position
  FUSE_PERIOD_0_bm = (1<<0)           ; Watchdog Timeout Period bit 0 mask
  FUSE_PERIOD_0_bp = 0                ; Watchdog Timeout Period bit 0 position
  FUSE_PERIOD_1_bm = (1<<1)           ; Watchdog Timeout Period bit 1 mask
  FUSE_PERIOD_1_bp = 1                ; Watchdog Timeout Period bit 1 position
  FUSE_PERIOD_2_bm = (1<<2)           ; Watchdog Timeout Period bit 2 mask
  FUSE_PERIOD_2_bp = 2                ; Watchdog Timeout Period bit 2 position
  FUSE_PERIOD_3_bm = (1<<3)           ; Watchdog Timeout Period bit 3 mask
  FUSE_PERIOD_3_bp = 3                ; Watchdog Timeout Period bit 3 position
  FUSE_WINDOW_gm = 0xF0               ; Watchdog Window Timeout Period group mask
  FUSE_WINDOW_gp = 4                  ; Watchdog Window Timeout Period group position
  FUSE_WINDOW_0_bm = (1<<4)           ; Watchdog Window Timeout Period bit 0 mask
  FUSE_WINDOW_0_bp = 4                ; Watchdog Window Timeout Period bit 0 position
  FUSE_WINDOW_1_bm = (1<<5)           ; Watchdog Window Timeout Period bit 1 mask
  FUSE_WINDOW_1_bp = 5                ; Watchdog Window Timeout Period bit 1 position
  FUSE_WINDOW_2_bm = (1<<6)           ; Watchdog Window Timeout Period bit 2 mask
  FUSE_WINDOW_2_bp = 6                ; Watchdog Window Timeout Period bit 2 position
  FUSE_WINDOW_3_bm = (1<<7)           ; Watchdog Window Timeout Period bit 3 mask
  FUSE_WINDOW_3_bp = 7                ; Watchdog Window Timeout Period bit 3 position
  
  ; FUSE_BODCFG masks
  FUSE_SLEEP_gm = 0x03                ; BOD Operation in Sleep Mode group mask
  FUSE_SLEEP_gp = 0                   ; BOD Operation in Sleep Mode group position
  FUSE_SLEEP_0_bm = (1<<0)            ; BOD Operation in Sleep Mode bit 0 mask
  FUSE_SLEEP_0_bp = 0                 ; BOD Operation in Sleep Mode bit 0 position
  FUSE_SLEEP_1_bm = (1<<1)            ; BOD Operation in Sleep Mode bit 1 mask
  FUSE_SLEEP_1_bp = 1                 ; BOD Operation in Sleep Mode bit 1 position
  FUSE_ACTIVE_gm = 0x0C               ; BOD Operation in Active Mode group mask
  FUSE_ACTIVE_gp = 2                  ; BOD Operation in Active Mode group position
  FUSE_ACTIVE_0_bm = (1<<2)           ; BOD Operation in Active Mode bit 0 mask
  FUSE_ACTIVE_0_bp = 2                ; BOD Operation in Active Mode bit 0 position
  FUSE_ACTIVE_1_bm = (1<<3)           ; BOD Operation in Active Mode bit 1 mask
  FUSE_ACTIVE_1_bp = 3                ; BOD Operation in Active Mode bit 1 position
  FUSE_SAMPFREQ_bm = 0x10             ; BOD Sample Frequency bit mask
  FUSE_SAMPFREQ_bp = 4                ; BOD Sample Frequency bit position
  FUSE_LVL_gm = 0xE0                  ; BOD Level group mask
  FUSE_LVL_gp = 5                     ; BOD Level group position
  FUSE_LVL_0_bm = (1<<5)              ; BOD Level bit 0 mask
  FUSE_LVL_0_bp = 5                   ; BOD Level bit 0 position
  FUSE_LVL_1_bm = (1<<6)              ; BOD Level bit 1 mask
  FUSE_LVL_1_bp = 6                   ; BOD Level bit 1 position
  FUSE_LVL_2_bm = (1<<7)              ; BOD Level bit 2 mask
  FUSE_LVL_2_bp = 7                   ; BOD Level bit 2 position
  
  ; FUSE_OSCCFG masks
  FUSE_FREQSEL_gm = 0x03              ; Frequency Select group mask
  FUSE_FREQSEL_gp = 0                 ; Frequency Select group position
  FUSE_FREQSEL_0_bm = (1<<0)          ; Frequency Select bit 0 mask
  FUSE_FREQSEL_0_bp = 0               ; Frequency Select bit 0 position
  FUSE_FREQSEL_1_bm = (1<<1)          ; Frequency Select bit 1 mask
  FUSE_FREQSEL_1_bp = 1               ; Frequency Select bit 1 position
  FUSE_OSCLOCK_bm = 0x80              ; Oscillator Lock bit mask
  FUSE_OSCLOCK_bp = 7                 ; Oscillator Lock bit position
  
  ; FUSE_SYSCFG0 masks
  FUSE_EESAVE_bm = 0x01               ; EEPROM Save bit mask
  FUSE_EESAVE_bp = 0                  ; EEPROM Save bit position
  FUSE_RSTPINCFG_gm = 0x0C            ; Reset Pin Configuration group mask
  FUSE_RSTPINCFG_gp = 2               ; Reset Pin Configuration group position
  FUSE_RSTPINCFG_0_bm = (1<<2)        ; Reset Pin Configuration bit 0 mask
  FUSE_RSTPINCFG_0_bp = 2             ; Reset Pin Configuration bit 0 position
  FUSE_RSTPINCFG_1_bm = (1<<3)        ; Reset Pin Configuration bit 1 mask
  FUSE_RSTPINCFG_1_bp = 3             ; Reset Pin Configuration bit 1 position
  FUSE_CRCSRC_gm = 0xC0               ; CRC Source group mask
  FUSE_CRCSRC_gp = 6                  ; CRC Source group position
  FUSE_CRCSRC_0_bm = (1<<6)           ; CRC Source bit 0 mask
  FUSE_CRCSRC_0_bp = 6                ; CRC Source bit 0 position
  FUSE_CRCSRC_1_bm = (1<<7)           ; CRC Source bit 1 mask
  FUSE_CRCSRC_1_bp = 7                ; CRC Source bit 1 position
  
  ; FUSE_SYSCFG1 masks
  FUSE_SUT_gm = 0x07                  ; Startup Time group mask
  FUSE_SUT_gp = 0                     ; Startup Time group position
  FUSE_SUT_0_bm = (1<<0)              ; Startup Time bit 0 mask
  FUSE_SUT_0_bp = 0                   ; Startup Time bit 0 position
  FUSE_SUT_1_bm = (1<<1)              ; Startup Time bit 1 mask
  FUSE_SUT_1_bp = 1                   ; Startup Time bit 1 position
  FUSE_SUT_2_bm = (1<<2)              ; Startup Time bit 2 mask
  FUSE_SUT_2_bp = 2                   ; Startup Time bit 2 position
  
  ; BOD Operation in Active Mode select
  FUSE_ACTIVE_DIS_gc = (0x00<<2)      ; Disabled
  FUSE_ACTIVE_ENABLED_gc = (0x01<<2)  ; Enabled
  FUSE_ACTIVE_SAMPLED_gc = (0x02<<2)  ; Sampled
  FUSE_ACTIVE_ENWAKE_gc = (0x03<<2)   ; Enabled with wake-up halted until BOD is ready
  
  ; BOD Level select
  FUSE_LVL_BODLEVEL0_gc = (0x00<<5)   ; 1.8 V
  FUSE_LVL_BODLEVEL2_gc = (0x02<<5)   ; 2.6 V
  FUSE_LVL_BODLEVEL7_gc = (0x07<<5)   ; 4.2 V
  
  ; BOD Sample Frequency select
  FUSE_SAMPFREQ_1KHZ_gc = (0x00<<4)   ; 1kHz sampling frequency
  FUSE_SAMPFREQ_125HZ_gc = (0x01<<4)  ; 125Hz sampling frequency
  
  ; BOD Operation in Sleep Mode select
  FUSE_SLEEP_DIS_gc = (0x00<<0)       ; Disabled
  FUSE_SLEEP_ENABLED_gc = (0x01<<0)   ; Enabled
  FUSE_SLEEP_SAMPLED_gc = (0x02<<0)   ; Sampled
  
  ; Frequency Select
  FUSE_FREQSEL_16MHZ_gc = (0x01<<0)   ; 16 MHz
  FUSE_FREQSEL_20MHZ_gc = (0x02<<0)   ; 20 MHz
  
  ; CRC Source select
  FUSE_CRCSRC_FLASH_gc = (0x00<<6)    ; The CRC is performed on the entire Flash (boot, application code and application data section).
  FUSE_CRCSRC_BOOT_gc = (0x01<<6)     ; The CRC is performed on the boot section of Flash
  FUSE_CRCSRC_BOOTAPP_gc = (0x02<<6)  ; The CRC is performed on the boot and application code section of Flash
  FUSE_CRCSRC_NOCRC_gc = (0x03<<6)    ; Disable CRC.
  
  ; Reset Pin Configuration select
  FUSE_RSTPINCFG_GPIO_gc = (0x00<<2)  ; GPIO mode
  FUSE_RSTPINCFG_UPDI_gc = (0x01<<2)  ; UPDI mode
  FUSE_RSTPINCFG_RST_gc = (0x02<<2)   ; Reset mode
  
  ; Startup Time select
  FUSE_SUT_0MS_gc = (0x00<<0)         ; 0 ms
  FUSE_SUT_1MS_gc = (0x01<<0)         ; 1 ms
  FUSE_SUT_2MS_gc = (0x02<<0)         ; 2 ms
  FUSE_SUT_4MS_gc = (0x03<<0)         ; 4 ms
  FUSE_SUT_8MS_gc = (0x04<<0)         ; 8 ms
  FUSE_SUT_16MS_gc = (0x05<<0)        ; 16 ms
  FUSE_SUT_32MS_gc = (0x06<<0)        ; 32 ms
  FUSE_SUT_64MS_gc = (0x07<<0)        ; 64 ms
  
  ; Watchdog Timeout Period select
  FUSE_PERIOD_OFF_gc = (0x00<<0)      ; Off
  FUSE_PERIOD_8CLK_gc = (0x01<<0)     ; 8 cycles (8ms)
  FUSE_PERIOD_16CLK_gc = (0x02<<0)    ; 16 cycles (16ms)
  FUSE_PERIOD_32CLK_gc = (0x03<<0)    ; 32 cycles (32ms)
  FUSE_PERIOD_64CLK_gc = (0x04<<0)    ; 64 cycles (64ms)
  FUSE_PERIOD_128CLK_gc = (0x05<<0)   ; 128 cycles (0.128s)
  FUSE_PERIOD_256CLK_gc = (0x06<<0)   ; 256 cycles (0.256s)
  FUSE_PERIOD_512CLK_gc = (0x07<<0)   ; 512 cycles (0.512s)
  FUSE_PERIOD_1KCLK_gc = (0x08<<0)    ; 1K cycles (1.0s)
  FUSE_PERIOD_2KCLK_gc = (0x09<<0)    ; 2K cycles (2.0s)
  FUSE_PERIOD_4KCLK_gc = (0x0A<<0)    ; 4K cycles (4.1s)
  FUSE_PERIOD_8KCLK_gc = (0x0B<<0)    ; 8K cycles (8.2s)
  
  ; Watchdog Window Timeout Period select
  FUSE_WINDOW_OFF_gc = (0x00<<4)      ; Off
  FUSE_WINDOW_8CLK_gc = (0x01<<4)     ; 8 cycles (8ms)
  FUSE_WINDOW_16CLK_gc = (0x02<<4)    ; 16 cycles (16ms)
  FUSE_WINDOW_32CLK_gc = (0x03<<4)    ; 32 cycles (32ms)
  FUSE_WINDOW_64CLK_gc = (0x04<<4)    ; 64 cycles (64ms)
  FUSE_WINDOW_128CLK_gc = (0x05<<4)   ; 128 cycles (0.128s)
  FUSE_WINDOW_256CLK_gc = (0x06<<4)   ; 256 cycles (0.256s)
  FUSE_WINDOW_512CLK_gc = (0x07<<4)   ; 512 cycles (0.512s)
  FUSE_WINDOW_1KCLK_gc = (0x08<<4)    ; 1K cycles (1.0s)
  FUSE_WINDOW_2KCLK_gc = (0x09<<4)    ; 2K cycles (2.0s)
  FUSE_WINDOW_4KCLK_gc = (0x0A<<4)    ; 4K cycles (4.1s)
  FUSE_WINDOW_8KCLK_gc = (0x0B<<4)    ; 8K cycles (8.2s)
  
  
  ;*************************************************************************
  ;** GPIO - General Purpose IO
  ;*************************************************************************
  
  
  ;*************************************************************************
  ;** LOCKBIT - Lockbit
  ;*************************************************************************
  
  ; LOCKBIT_LOCKBIT masks
  LOCKBIT_LB_gm = 0xFF                ; Lock Bits group mask
  LOCKBIT_LB_gp = 0                   ; Lock Bits group position
  LOCKBIT_LB_0_bm = (1<<0)            ; Lock Bits bit 0 mask
  LOCKBIT_LB_0_bp = 0                 ; Lock Bits bit 0 position
  LOCKBIT_LB_1_bm = (1<<1)            ; Lock Bits bit 1 mask
  LOCKBIT_LB_1_bp = 1                 ; Lock Bits bit 1 position
  LOCKBIT_LB_2_bm = (1<<2)            ; Lock Bits bit 2 mask
  LOCKBIT_LB_2_bp = 2                 ; Lock Bits bit 2 position
  LOCKBIT_LB_3_bm = (1<<3)            ; Lock Bits bit 3 mask
  LOCKBIT_LB_3_bp = 3                 ; Lock Bits bit 3 position
  LOCKBIT_LB_4_bm = (1<<4)            ; Lock Bits bit 4 mask
  LOCKBIT_LB_4_bp = 4                 ; Lock Bits bit 4 position
  LOCKBIT_LB_5_bm = (1<<5)            ; Lock Bits bit 5 mask
  LOCKBIT_LB_5_bp = 5                 ; Lock Bits bit 5 position
  LOCKBIT_LB_6_bm = (1<<6)            ; Lock Bits bit 6 mask
  LOCKBIT_LB_6_bp = 6                 ; Lock Bits bit 6 position
  LOCKBIT_LB_7_bm = (1<<7)            ; Lock Bits bit 7 mask
  LOCKBIT_LB_7_bp = 7                 ; Lock Bits bit 7 position
  
  ; Lock Bits select
  LOCKBIT_LB_RWLOCK_gc = (0x3A<<0)    ; Read and write lock
  LOCKBIT_LB_NOLOCK_gc = (0xC5<<0)    ; No locks
  
  
  ;*************************************************************************
  ;** NVMCTRL - Non-volatile Memory Controller
  ;*************************************************************************
  
  ; NVMCTRL_CTRLA masks
  NVMCTRL_CMD_gm = 0x07               ; Command group mask
  NVMCTRL_CMD_gp = 0                  ; Command group position
  NVMCTRL_CMD_0_bm = (1<<0)           ; Command bit 0 mask
  NVMCTRL_CMD_0_bp = 0                ; Command bit 0 position
  NVMCTRL_CMD_1_bm = (1<<1)           ; Command bit 1 mask
  NVMCTRL_CMD_1_bp = 1                ; Command bit 1 position
  NVMCTRL_CMD_2_bm = (1<<2)           ; Command bit 2 mask
  NVMCTRL_CMD_2_bp = 2                ; Command bit 2 position
  
  ; NVMCTRL_CTRLB masks
  NVMCTRL_APCWP_bm = 0x01             ; Application code write protect bit mask
  NVMCTRL_APCWP_bp = 0                ; Application code write protect bit position
  NVMCTRL_BOOTLOCK_bm = 0x02          ; Boot Lock bit mask
  NVMCTRL_BOOTLOCK_bp = 1             ; Boot Lock bit position
  
  ; NVMCTRL_STATUS masks
  NVMCTRL_FBUSY_bm = 0x01             ; Flash busy bit mask
  NVMCTRL_FBUSY_bp = 0                ; Flash busy bit position
  NVMCTRL_EEBUSY_bm = 0x02            ; EEPROM busy bit mask
  NVMCTRL_EEBUSY_bp = 1               ; EEPROM busy bit position
  NVMCTRL_WRERROR_bm = 0x04           ; Write error bit mask
  NVMCTRL_WRERROR_bp = 2              ; Write error bit position
  
  ; NVMCTRL_INTCTRL masks
  NVMCTRL_EEREADY_bm = 0x01           ; EEPROM Ready bit mask
  NVMCTRL_EEREADY_bp = 0              ; EEPROM Ready bit position
  
  ; NVMCTRL_INTFLAGS masks
  ; Masks for NVMCTRL_EEREADY already defined
  
  ; Command select
  NVMCTRL_CMD_NONE_gc = (0x00<<0)     ; No Command
  NVMCTRL_CMD_PAGEWRITE_gc = (0x01<<0) ; Write page
  NVMCTRL_CMD_PAGEERASE_gc = (0x02<<0) ; Erase page
  NVMCTRL_CMD_PAGEERASEWRITE_gc = (0x03<<0) ; Erase and write page
  NVMCTRL_CMD_PAGEBUFCLR_gc = (0x04<<0) ; Page buffer clear
  NVMCTRL_CMD_CHIPERASE_gc = (0x05<<0) ; Chip erase
  NVMCTRL_CMD_EEERASE_gc = (0x06<<0)  ; EEPROM erase
  NVMCTRL_CMD_FUSEWRITE_gc = (0x07<<0) ; Write fuse (PDI only)
  
  
  ;*************************************************************************
  ;** PORT - I/O Ports
  ;*************************************************************************
  
  ; PORT_INTFLAGS masks
  PORT_INT_gm = 0xFF                  ; Pin Interrupt group mask
  PORT_INT_gp = 0                     ; Pin Interrupt group position
  PORT_INT_0_bm = (1<<0)              ; Pin Interrupt bit 0 mask
  PORT_INT_0_bp = 0                   ; Pin Interrupt bit 0 position
  PORT_INT_1_bm = (1<<1)              ; Pin Interrupt bit 1 mask
  PORT_INT_1_bp = 1                   ; Pin Interrupt bit 1 position
  PORT_INT_2_bm = (1<<2)              ; Pin Interrupt bit 2 mask
  PORT_INT_2_bp = 2                   ; Pin Interrupt bit 2 position
  PORT_INT_3_bm = (1<<3)              ; Pin Interrupt bit 3 mask
  PORT_INT_3_bp = 3                   ; Pin Interrupt bit 3 position
  PORT_INT_4_bm = (1<<4)              ; Pin Interrupt bit 4 mask
  PORT_INT_4_bp = 4                   ; Pin Interrupt bit 4 position
  PORT_INT_5_bm = (1<<5)              ; Pin Interrupt bit 5 mask
  PORT_INT_5_bp = 5                   ; Pin Interrupt bit 5 position
  PORT_INT_6_bm = (1<<6)              ; Pin Interrupt bit 6 mask
  PORT_INT_6_bp = 6                   ; Pin Interrupt bit 6 position
  PORT_INT_7_bm = (1<<7)              ; Pin Interrupt bit 7 mask
  PORT_INT_7_bp = 7                   ; Pin Interrupt bit 7 position
  
  ; PORT_PIN0CTRL masks
  PORT_ISC_gm = 0x07                  ; Input/Sense Configuration group mask
  PORT_ISC_gp = 0                     ; Input/Sense Configuration group position
  PORT_ISC_0_bm = (1<<0)              ; Input/Sense Configuration bit 0 mask
  PORT_ISC_0_bp = 0                   ; Input/Sense Configuration bit 0 position
  PORT_ISC_1_bm = (1<<1)              ; Input/Sense Configuration bit 1 mask
  PORT_ISC_1_bp = 1                   ; Input/Sense Configuration bit 1 position
  PORT_ISC_2_bm = (1<<2)              ; Input/Sense Configuration bit 2 mask
  PORT_ISC_2_bp = 2                   ; Input/Sense Configuration bit 2 position
  PORT_PULLUPEN_bm = 0x08             ; Pullup enable bit mask
  PORT_PULLUPEN_bp = 3                ; Pullup enable bit position
  PORT_INVEN_bm = 0x80                ; Inverted I/O Enable bit mask
  PORT_INVEN_bp = 7                   ; Inverted I/O Enable bit position
  
  ; PORT_PIN1CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN2CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN3CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN4CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN5CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN6CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; PORT_PIN7CTRL masks
  ; Masks for PORT_ISC already defined
  ; Masks for PORT_PULLUPEN already defined
  ; Masks for PORT_INVEN already defined
  
  ; Input/Sense Configuration select
  PORT_ISC_INTDISABLE_gc = (0x00<<0)  ; Interrupt disabled but input buffer enabled
  PORT_ISC_BOTHEDGES_gc = (0x01<<0)   ; Sense Both Edges
  PORT_ISC_RISING_gc = (0x02<<0)      ; Sense Rising Edge
  PORT_ISC_FALLING_gc = (0x03<<0)     ; Sense Falling Edge
  PORT_ISC_INPUT_DISABLE_gc = (0x04<<0) ; Digital Input Buffer disabled
  PORT_ISC_LEVEL_gc = (0x05<<0)       ; Sense low Level
  
  
  ;*************************************************************************
  ;** PORTMUX - Port Multiplexer
  ;*************************************************************************
  
  ; PORTMUX_CTRLA masks
  PORTMUX_EVOUT0_bm = 0x01            ; Event Output 0 bit mask
  PORTMUX_EVOUT0_bp = 0               ; Event Output 0 bit position
  PORTMUX_EVOUT1_bm = 0x02            ; Event Output 1 bit mask
  PORTMUX_EVOUT1_bp = 1               ; Event Output 1 bit position
  PORTMUX_EVOUT2_bm = 0x04            ; Event Output 2 bit mask
  PORTMUX_EVOUT2_bp = 2               ; Event Output 2 bit position
  PORTMUX_LUT0_bm = 0x10              ; Configurable Custom Logic LUT0 bit mask
  PORTMUX_LUT0_bp = 4                 ; Configurable Custom Logic LUT0 bit position
  PORTMUX_LUT1_bm = 0x20              ; Configurable Custom Logic LUT1 bit mask
  PORTMUX_LUT1_bp = 5                 ; Configurable Custom Logic LUT1 bit position
  
  ; PORTMUX_CTRLB masks
  PORTMUX_USART0_bm = 0x01            ; Port Multiplexer USART0 bit mask
  PORTMUX_USART0_bp = 0               ; Port Multiplexer USART0 bit position
  PORTMUX_SPI0_bm = 0x04              ; Port Multiplexer SPI0 bit mask
  PORTMUX_SPI0_bp = 2                 ; Port Multiplexer SPI0 bit position
  
  ; PORTMUX_CTRLC masks
  PORTMUX_TCA00_bm = 0x01             ; Port Multiplexer TCA0 Output 0 bit mask
  PORTMUX_TCA00_bp = 0                ; Port Multiplexer TCA0 Output 0 bit position
  PORTMUX_TCA01_bm = 0x02             ; Port Multiplexer TCA0 Output 1 bit mask
  PORTMUX_TCA01_bp = 1                ; Port Multiplexer TCA0 Output 1 bit position
  PORTMUX_TCA02_bm = 0x04             ; Port Multiplexer TCA0 Output 2 bit mask
  PORTMUX_TCA02_bp = 2                ; Port Multiplexer TCA0 Output 2 bit position
  PORTMUX_TCA03_bm = 0x08             ; Port Multiplexer TCA0 Output 3 bit mask
  PORTMUX_TCA03_bp = 3                ; Port Multiplexer TCA0 Output 3 bit position
  PORTMUX_TCA04_bm = 0x10             ; Port Multiplexer TCA0 Output 4 bit mask
  PORTMUX_TCA04_bp = 4                ; Port Multiplexer TCA0 Output 4 bit position
  PORTMUX_TCA05_bm = 0x20             ; Port Multiplexer TCA0 Output 5 bit mask
  PORTMUX_TCA05_bp = 5                ; Port Multiplexer TCA0 Output 5 bit position
  
  ; PORTMUX_CTRLD masks
  PORTMUX_TCB0_bm = 0x01              ; Port Multiplexer TCB bit mask
  PORTMUX_TCB0_bp = 0                 ; Port Multiplexer TCB bit position
  
  ; Configurable Custom Logic LUT0 select
  PORTMUX_LUT0_DEFAULT_gc = (0x00<<4) ; Default pin
  PORTMUX_LUT0_ALTERNATE_gc = (0x01<<4) ; Alternate pin
  
  ; Configurable Custom Logic LUT1 select
  PORTMUX_LUT1_DEFAULT_gc = (0x00<<5) ; Default pin
  PORTMUX_LUT1_ALTERNATE_gc = (0x01<<5) ; Alternate pin
  
  ; Port Multiplexer SPI0 select
  PORTMUX_SPI0_DEFAULT_gc = (0x00<<2) ; Default pins
  PORTMUX_SPI0_ALTERNATE_gc = (0x01<<2) ; Alternate pins
  
  ; Port Multiplexer USART0 select
  PORTMUX_USART0_DEFAULT_gc = (0x00<<0) ; Default pins
  PORTMUX_USART0_ALTERNATE_gc = (0x01<<0) ; Alternate pins
  
  ; Port Multiplexer TCA0 Output 0 select
  PORTMUX_TCA00_DEFAULT_gc = (0x00<<0) ; Default pin
  PORTMUX_TCA00_ALTERNATE_gc = (0x01<<0) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 1 select
  PORTMUX_TCA01_DEFAULT_gc = (0x00<<1) ; Default pin
  PORTMUX_TCA01_ALTERNATE_gc = (0x01<<1) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 2 select
  PORTMUX_TCA02_DEFAULT_gc = (0x00<<2) ; Default pin
  PORTMUX_TCA02_ALTERNATE_gc = (0x01<<2) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 3 select
  PORTMUX_TCA03_DEFAULT_gc = (0x00<<3) ; Default pin
  PORTMUX_TCA03_ALTERNATE_gc = (0x01<<3) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 4 select
  PORTMUX_TCA04_DEFAULT_gc = (0x00<<4) ; Default pin
  PORTMUX_TCA04_ALTERNATE_gc = (0x01<<4) ; Alternate pin
  
  ; Port Multiplexer TCA0 Output 5 select
  PORTMUX_TCA05_DEFAULT_gc = (0x00<<5) ; Default pin
  PORTMUX_TCA05_ALTERNATE_gc = (0x01<<5) ; Alternate pin
  
  ; Port Multiplexer TCB select
  PORTMUX_TCB0_DEFAULT_gc = (0x00<<0) ; Default pin
  PORTMUX_TCB0_ALTERNATE_gc = (0x01<<0) ; Alternate pin
  
  
  ;*************************************************************************
  ;** RSTCTRL - Reset controller
  ;*************************************************************************
  
  ; RSTCTRL_RSTFR masks
  RSTCTRL_PORF_bm = 0x01              ; Power on Reset flag bit mask
  RSTCTRL_PORF_bp = 0                 ; Power on Reset flag bit position
  RSTCTRL_BORF_bm = 0x02              ; Brown out detector Reset flag bit mask
  RSTCTRL_BORF_bp = 1                 ; Brown out detector Reset flag bit position
  RSTCTRL_EXTRF_bm = 0x04             ; External Reset flag bit mask
  RSTCTRL_EXTRF_bp = 2                ; External Reset flag bit position
  RSTCTRL_WDRF_bm = 0x08              ; Watch dog Reset flag bit mask
  RSTCTRL_WDRF_bp = 3                 ; Watch dog Reset flag bit position
  RSTCTRL_SWRF_bm = 0x10              ; Software Reset flag bit mask
  RSTCTRL_SWRF_bp = 4                 ; Software Reset flag bit position
  RSTCTRL_UPDIRF_bm = 0x20            ; UPDI Reset flag bit mask
  RSTCTRL_UPDIRF_bp = 5               ; UPDI Reset flag bit position
  
  ; RSTCTRL_SWRR masks
  RSTCTRL_SWRE_bm = 0x01              ; Software reset enable bit mask
  RSTCTRL_SWRE_bp = 0                 ; Software reset enable bit position
  
  
  ;*************************************************************************
  ;** RTC - Real-Time Counter
  ;*************************************************************************
  
  ; RTC_CTRLA masks
  RTC_RTCEN_bm = 0x01                 ; Enable bit mask
  RTC_RTCEN_bp = 0                    ; Enable bit position
  RTC_PRESCALER_gm = 0x78             ; Prescaling Factor group mask
  RTC_PRESCALER_gp = 3                ; Prescaling Factor group position
  RTC_PRESCALER_0_bm = (1<<3)         ; Prescaling Factor bit 0 mask
  RTC_PRESCALER_0_bp = 3              ; Prescaling Factor bit 0 position
  RTC_PRESCALER_1_bm = (1<<4)         ; Prescaling Factor bit 1 mask
  RTC_PRESCALER_1_bp = 4              ; Prescaling Factor bit 1 position
  RTC_PRESCALER_2_bm = (1<<5)         ; Prescaling Factor bit 2 mask
  RTC_PRESCALER_2_bp = 5              ; Prescaling Factor bit 2 position
  RTC_PRESCALER_3_bm = (1<<6)         ; Prescaling Factor bit 3 mask
  RTC_PRESCALER_3_bp = 6              ; Prescaling Factor bit 3 position
  RTC_RUNSTDBY_bm = 0x80              ; Run In Standby bit mask
  RTC_RUNSTDBY_bp = 7                 ; Run In Standby bit position
  
  ; RTC_STATUS masks
  RTC_CTRLABUSY_bm = 0x01             ; CTRLA Synchronization Busy Flag bit mask
  RTC_CTRLABUSY_bp = 0                ; CTRLA Synchronization Busy Flag bit position
  RTC_CNTBUSY_bm = 0x02               ; Count Synchronization Busy Flag bit mask
  RTC_CNTBUSY_bp = 1                  ; Count Synchronization Busy Flag bit position
  RTC_PERBUSY_bm = 0x04               ; Period Synchronization Busy Flag bit mask
  RTC_PERBUSY_bp = 2                  ; Period Synchronization Busy Flag bit position
  RTC_CMPBUSY_bm = 0x08               ; Comparator Synchronization Busy Flag bit mask
  RTC_CMPBUSY_bp = 3                  ; Comparator Synchronization Busy Flag bit position
  
  ; RTC_INTCTRL masks
  RTC_OVF_bm = 0x01                   ; Overflow Interrupt enable bit mask
  RTC_OVF_bp = 0                      ; Overflow Interrupt enable bit position
  RTC_CMP_bm = 0x02                   ; Compare Match Interrupt enable bit mask
  RTC_CMP_bp = 1                      ; Compare Match Interrupt enable bit position
  
  ; RTC_INTFLAGS masks
  ; Masks for RTC_OVF already defined
  ; Masks for RTC_CMP already defined
  
  ; RTC_DBGCTRL masks
  RTC_DBGRUN_bm = 0x01                ; Run in debug bit mask
  RTC_DBGRUN_bp = 0                   ; Run in debug bit position
  
  ; RTC_CLKSEL masks
  RTC_CLKSEL_gm = 0x03                ; Clock Select group mask
  RTC_CLKSEL_gp = 0                   ; Clock Select group position
  RTC_CLKSEL_0_bm = (1<<0)            ; Clock Select bit 0 mask
  RTC_CLKSEL_0_bp = 0                 ; Clock Select bit 0 position
  RTC_CLKSEL_1_bm = (1<<1)            ; Clock Select bit 1 mask
  RTC_CLKSEL_1_bp = 1                 ; Clock Select bit 1 position
  
  ; RTC_PITCTRLA masks
  RTC_PITEN_bm = 0x01                 ; Enable bit mask
  RTC_PITEN_bp = 0                    ; Enable bit position
  RTC_PERIOD_gm = 0x78                ; Period group mask
  RTC_PERIOD_gp = 3                   ; Period group position
  RTC_PERIOD_0_bm = (1<<3)            ; Period bit 0 mask
  RTC_PERIOD_0_bp = 3                 ; Period bit 0 position
  RTC_PERIOD_1_bm = (1<<4)            ; Period bit 1 mask
  RTC_PERIOD_1_bp = 4                 ; Period bit 1 position
  RTC_PERIOD_2_bm = (1<<5)            ; Period bit 2 mask
  RTC_PERIOD_2_bp = 5                 ; Period bit 2 position
  RTC_PERIOD_3_bm = (1<<6)            ; Period bit 3 mask
  RTC_PERIOD_3_bp = 6                 ; Period bit 3 position
  
  ; RTC_PITSTATUS masks
  RTC_CTRLBUSY_bm = 0x01              ; CTRLA Synchronization Busy Flag bit mask
  RTC_CTRLBUSY_bp = 0                 ; CTRLA Synchronization Busy Flag bit position
  
  ; RTC_PITINTCTRL masks
  RTC_PI_bm = 0x01                    ; Periodic Interrupt bit mask
  RTC_PI_bp = 0                       ; Periodic Interrupt bit position
  
  ; RTC_PITINTFLAGS masks
  ; Masks for RTC_PI already defined
  
  ; RTC_PITDBGCTRL masks
  ; Masks for RTC_DBGRUN already defined
  
  ; Clock Select
  RTC_CLKSEL_INT32K_gc = (0x00<<0)    ; Internal 32kHz OSC
  RTC_CLKSEL_INT1K_gc = (0x01<<0)     ; Internal 1kHz OSC
  RTC_CLKSEL_EXTCLK_gc = (0x03<<0)    ; External Clock
  
  ; Prescaling Factor select
  RTC_PRESCALER_DIV1_gc = (0x00<<3)   ; RTC Clock / 1
  RTC_PRESCALER_DIV2_gc = (0x01<<3)   ; RTC Clock / 2
  RTC_PRESCALER_DIV4_gc = (0x02<<3)   ; RTC Clock / 4
  RTC_PRESCALER_DIV8_gc = (0x03<<3)   ; RTC Clock / 8
  RTC_PRESCALER_DIV16_gc = (0x04<<3)  ; RTC Clock / 16
  RTC_PRESCALER_DIV32_gc = (0x05<<3)  ; RTC Clock / 32
  RTC_PRESCALER_DIV64_gc = (0x06<<3)  ; RTC Clock / 64
  RTC_PRESCALER_DIV128_gc = (0x07<<3) ; RTC Clock / 128
  RTC_PRESCALER_DIV256_gc = (0x08<<3) ; RTC Clock / 256
  RTC_PRESCALER_DIV512_gc = (0x09<<3) ; RTC Clock / 512
  RTC_PRESCALER_DIV1024_gc = (0x0A<<3) ; RTC Clock / 1024
  RTC_PRESCALER_DIV2048_gc = (0x0B<<3) ; RTC Clock / 2048
  RTC_PRESCALER_DIV4096_gc = (0x0C<<3) ; RTC Clock / 4096
  RTC_PRESCALER_DIV8192_gc = (0x0D<<3) ; RTC Clock / 8192
  RTC_PRESCALER_DIV16384_gc = (0x0E<<3) ; RTC Clock / 16384
  RTC_PRESCALER_DIV32768_gc = (0x0F<<3) ; RTC Clock / 32768
  
  ; Period select
  RTC_PERIOD_OFF_gc = (0x00<<3)       ; Off
  RTC_PERIOD_CYC4_gc = (0x01<<3)      ; RTC Clock Cycles 4
  RTC_PERIOD_CYC8_gc = (0x02<<3)      ; RTC Clock Cycles 8
  RTC_PERIOD_CYC16_gc = (0x03<<3)     ; RTC Clock Cycles 16
  RTC_PERIOD_CYC32_gc = (0x04<<3)     ; RTC Clock Cycles 32
  RTC_PERIOD_CYC64_gc = (0x05<<3)     ; RTC Clock Cycles 64
  RTC_PERIOD_CYC128_gc = (0x06<<3)    ; RTC Clock Cycles 128
  RTC_PERIOD_CYC256_gc = (0x07<<3)    ; RTC Clock Cycles 256
  RTC_PERIOD_CYC512_gc = (0x08<<3)    ; RTC Clock Cycles 512
  RTC_PERIOD_CYC1024_gc = (0x09<<3)   ; RTC Clock Cycles 1024
  RTC_PERIOD_CYC2048_gc = (0x0A<<3)   ; RTC Clock Cycles 2048
  RTC_PERIOD_CYC4096_gc = (0x0B<<3)   ; RTC Clock Cycles 4096
  RTC_PERIOD_CYC8192_gc = (0x0C<<3)   ; RTC Clock Cycles 8192
  RTC_PERIOD_CYC16384_gc = (0x0D<<3)  ; RTC Clock Cycles 16384
  RTC_PERIOD_CYC32768_gc = (0x0E<<3)  ; RTC Clock Cycles 32768
  
  
  ;*************************************************************************
  ;** SIGROW - Signature row
  ;*************************************************************************
  
  
  ;*************************************************************************
  ;** SLPCTRL - Sleep Controller
  ;*************************************************************************
  
  ; SLPCTRL_CTRLA masks
  SLPCTRL_SEN_bm = 0x01               ; Sleep enable bit mask
  SLPCTRL_SEN_bp = 0                  ; Sleep enable bit position
  SLPCTRL_SMODE_gm = 0x06             ; Sleep mode group mask
  SLPCTRL_SMODE_gp = 1                ; Sleep mode group position
  SLPCTRL_SMODE_0_bm = (1<<1)         ; Sleep mode bit 0 mask
  SLPCTRL_SMODE_0_bp = 1              ; Sleep mode bit 0 position
  SLPCTRL_SMODE_1_bm = (1<<2)         ; Sleep mode bit 1 mask
  SLPCTRL_SMODE_1_bp = 2              ; Sleep mode bit 1 position
  
  ; Sleep mode select
  SLPCTRL_SMODE_IDLE_gc = (0x00<<1)   ; Idle mode
  SLPCTRL_SMODE_STDBY_gc = (0x01<<1)  ; Standby Mode
  SLPCTRL_SMODE_PDOWN_gc = (0x02<<1)  ; Power-down Mode
  
  
  ;*************************************************************************
  ;** SPI - Serial Peripheral Interface
  ;*************************************************************************
  
  ; SPI_CTRLA masks
  SPI_ENABLE_bm = 0x01                ; Enable Module bit mask
  SPI_ENABLE_bp = 0                   ; Enable Module bit position
  SPI_PRESC_gm = 0x06                 ; Prescaler group mask
  SPI_PRESC_gp = 1                    ; Prescaler group position
  SPI_PRESC_0_bm = (1<<1)             ; Prescaler bit 0 mask
  SPI_PRESC_0_bp = 1                  ; Prescaler bit 0 position
  SPI_PRESC_1_bm = (1<<2)             ; Prescaler bit 1 mask
  SPI_PRESC_1_bp = 2                  ; Prescaler bit 1 position
  SPI_CLK2X_bm = 0x10                 ; Enable Double Speed bit mask
  SPI_CLK2X_bp = 4                    ; Enable Double Speed bit position
  SPI_MASTER_bm = 0x20                ; Host Operation Enable bit mask
  SPI_MASTER_bp = 5                   ; Host Operation Enable bit position
  SPI_DORD_bm = 0x40                  ; Data Order Setting bit mask
  SPI_DORD_bp = 6                     ; Data Order Setting bit position
  
  ; SPI_CTRLB masks
  SPI_MODE_gm = 0x03                  ; SPI Mode group mask
  SPI_MODE_gp = 0                     ; SPI Mode group position
  SPI_MODE_0_bm = (1<<0)              ; SPI Mode bit 0 mask
  SPI_MODE_0_bp = 0                   ; SPI Mode bit 0 position
  SPI_MODE_1_bm = (1<<1)              ; SPI Mode bit 1 mask
  SPI_MODE_1_bp = 1                   ; SPI Mode bit 1 position
  SPI_SSD_bm = 0x04                   ; Client Select Disable bit mask
  SPI_SSD_bp = 2                      ; Client Select Disable bit position
  SPI_BUFWR_bm = 0x40                 ; Buffer Write Mode bit mask
  SPI_BUFWR_bp = 6                    ; Buffer Write Mode bit position
  SPI_BUFEN_bm = 0x80                 ; Buffer Mode Enable bit mask
  SPI_BUFEN_bp = 7                    ; Buffer Mode Enable bit position
  
  ; SPI_INTCTRL masks
  SPI_IE_bm = 0x01                    ; Interrupt Enable bit mask
  SPI_IE_bp = 0                       ; Interrupt Enable bit position
  SPI_SSIE_bm = 0x10                  ; Client Select Trigger Interrupt Enable bit mask
  SPI_SSIE_bp = 4                     ; Client Select Trigger Interrupt Enable bit position
  SPI_DREIE_bm = 0x20                 ; Data Register Empty Interrupt Enable bit mask
  SPI_DREIE_bp = 5                    ; Data Register Empty Interrupt Enable bit position
  SPI_TXCIE_bm = 0x40                 ; Transfer Complete Interrupt Enable bit mask
  SPI_TXCIE_bp = 6                    ; Transfer Complete Interrupt Enable bit position
  SPI_RXCIE_bm = 0x80                 ; Receive Complete Interrupt Enable bit mask
  SPI_RXCIE_bp = 7                    ; Receive Complete Interrupt Enable bit position
  
  ; SPI_INTFLAGS masks
  SPI_BUFOVF_bm = 0x01                ; Buffer Overflow bit mask
  SPI_BUFOVF_bp = 0                   ; Buffer Overflow bit position
  SPI_SSIF_bm = 0x10                  ; Client Select Trigger Interrupt Flag bit mask
  SPI_SSIF_bp = 4                     ; Client Select Trigger Interrupt Flag bit position
  SPI_DREIF_bm = 0x20                 ; Data Register Empty Interrupt Flag bit mask
  SPI_DREIF_bp = 5                    ; Data Register Empty Interrupt Flag bit position
  SPI_TXCIF_bm = 0x40                 ; Transfer Complete Interrupt Flag bit mask
  SPI_TXCIF_bp = 6                    ; Transfer Complete Interrupt Flag bit position
  SPI_WRCOL_bm = 0x40                 ; Write Collision bit mask
  SPI_WRCOL_bp = 6                    ; Write Collision bit position
  SPI_RXCIF_bm = 0x80                 ; Receive Complete Interrupt Flag bit mask
  SPI_RXCIF_bp = 7                    ; Receive Complete Interrupt Flag bit position
  SPI_IF_bm = 0x80                    ; Interrupt Flag bit mask
  SPI_IF_bp = 7                       ; Interrupt Flag bit position
  
  ; Prescaler select
  SPI_PRESC_DIV4_gc = (0x00<<1)       ; System Clock / 4
  SPI_PRESC_DIV16_gc = (0x01<<1)      ; System Clock / 16
  SPI_PRESC_DIV64_gc = (0x02<<1)      ; System Clock / 64
  SPI_PRESC_DIV128_gc = (0x03<<1)     ; System Clock / 128
  
  ; SPI Mode select
  SPI_MODE_0_gc = (0x00<<0)           ; SPI Mode 0
  SPI_MODE_1_gc = (0x01<<0)           ; SPI Mode 1
  SPI_MODE_2_gc = (0x02<<0)           ; SPI Mode 2
  SPI_MODE_3_gc = (0x03<<0)           ; SPI Mode 3
  
  
  ;*************************************************************************
  ;** SYSCFG - System Configuration Registers
  ;*************************************************************************
  
  ; SYSCFG_EXTBRK masks
  SYSCFG_ENEXTBRK_bm = 0x01           ; External break enable bit mask
  SYSCFG_ENEXTBRK_bp = 0              ; External break enable bit position
  
  
  ;*************************************************************************
  ;** TCA - 16-bit Timer/Counter Type A
  ;*************************************************************************
  
  ; TCA_SINGLE_CTRLA masks
  TCA_SINGLE_ENABLE_bm = 0x01         ; Module Enable bit mask
  TCA_SINGLE_ENABLE_bp = 0            ; Module Enable bit position
  TCA_SINGLE_CLKSEL_gm = 0x0E         ; Clock Selection group mask
  TCA_SINGLE_CLKSEL_gp = 1            ; Clock Selection group position
  TCA_SINGLE_CLKSEL_0_bm = (1<<1)     ; Clock Selection bit 0 mask
  TCA_SINGLE_CLKSEL_0_bp = 1          ; Clock Selection bit 0 position
  TCA_SINGLE_CLKSEL_1_bm = (1<<2)     ; Clock Selection bit 1 mask
  TCA_SINGLE_CLKSEL_1_bp = 2          ; Clock Selection bit 1 position
  TCA_SINGLE_CLKSEL_2_bm = (1<<3)     ; Clock Selection bit 2 mask
  TCA_SINGLE_CLKSEL_2_bp = 3          ; Clock Selection bit 2 position
  
  ; TCA_SINGLE_CTRLB masks
  TCA_SINGLE_WGMODE_gm = 0x07         ; Waveform generation mode group mask
  TCA_SINGLE_WGMODE_gp = 0            ; Waveform generation mode group position
  TCA_SINGLE_WGMODE_0_bm = (1<<0)     ; Waveform generation mode bit 0 mask
  TCA_SINGLE_WGMODE_0_bp = 0          ; Waveform generation mode bit 0 position
  TCA_SINGLE_WGMODE_1_bm = (1<<1)     ; Waveform generation mode bit 1 mask
  TCA_SINGLE_WGMODE_1_bp = 1          ; Waveform generation mode bit 1 position
  TCA_SINGLE_WGMODE_2_bm = (1<<2)     ; Waveform generation mode bit 2 mask
  TCA_SINGLE_WGMODE_2_bp = 2          ; Waveform generation mode bit 2 position
  TCA_SINGLE_ALUPD_bm = 0x08          ; Auto Lock Update bit mask
  TCA_SINGLE_ALUPD_bp = 3             ; Auto Lock Update bit position
  TCA_SINGLE_CMP0EN_bm = 0x10         ; Compare 0 Enable bit mask
  TCA_SINGLE_CMP0EN_bp = 4            ; Compare 0 Enable bit position
  TCA_SINGLE_CMP1EN_bm = 0x20         ; Compare 1 Enable bit mask
  TCA_SINGLE_CMP1EN_bp = 5            ; Compare 1 Enable bit position
  TCA_SINGLE_CMP2EN_bm = 0x40         ; Compare 2 Enable bit mask
  TCA_SINGLE_CMP2EN_bp = 6            ; Compare 2 Enable bit position
  
  ; TCA_SINGLE_CTRLC masks
  TCA_SINGLE_CMP0OV_bm = 0x01         ; Compare 0 Waveform Output Value bit mask
  TCA_SINGLE_CMP0OV_bp = 0            ; Compare 0 Waveform Output Value bit position
  TCA_SINGLE_CMP1OV_bm = 0x02         ; Compare 1 Waveform Output Value bit mask
  TCA_SINGLE_CMP1OV_bp = 1            ; Compare 1 Waveform Output Value bit position
  TCA_SINGLE_CMP2OV_bm = 0x04         ; Compare 2 Waveform Output Value bit mask
  TCA_SINGLE_CMP2OV_bp = 2            ; Compare 2 Waveform Output Value bit position
  
  ; TCA_SINGLE_CTRLD masks
  TCA_SINGLE_SPLITM_bm = 0x01         ; Split Mode Enable bit mask
  TCA_SINGLE_SPLITM_bp = 0            ; Split Mode Enable bit position
  
  ; TCA_SINGLE_CTRLECLR masks
  TCA_SINGLE_DIR_bm = 0x01            ; Direction bit mask
  TCA_SINGLE_DIR_bp = 0               ; Direction bit position
  TCA_SINGLE_LUPD_bm = 0x02           ; Lock Update bit mask
  TCA_SINGLE_LUPD_bp = 1              ; Lock Update bit position
  TCA_SINGLE_CMD_gm = 0x0C            ; Command group mask
  TCA_SINGLE_CMD_gp = 2               ; Command group position
  TCA_SINGLE_CMD_0_bm = (1<<2)        ; Command bit 0 mask
  TCA_SINGLE_CMD_0_bp = 2             ; Command bit 0 position
  TCA_SINGLE_CMD_1_bm = (1<<3)        ; Command bit 1 mask
  TCA_SINGLE_CMD_1_bp = 3             ; Command bit 1 position
  
  ; TCA_SINGLE_CTRLESET masks
  ; Masks for TCA_SINGLE_DIR already defined
  ; Masks for TCA_SINGLE_LUPD already defined
  ; Masks for TCA_SINGLE_CMD already defined
  
  ; TCA_SINGLE_CTRLFCLR masks
  TCA_SINGLE_PERBV_bm = 0x01          ; Period Buffer Valid bit mask
  TCA_SINGLE_PERBV_bp = 0             ; Period Buffer Valid bit position
  TCA_SINGLE_CMP0BV_bm = 0x02         ; Compare 0 Buffer Valid bit mask
  TCA_SINGLE_CMP0BV_bp = 1            ; Compare 0 Buffer Valid bit position
  TCA_SINGLE_CMP1BV_bm = 0x04         ; Compare 1 Buffer Valid bit mask
  TCA_SINGLE_CMP1BV_bp = 2            ; Compare 1 Buffer Valid bit position
  TCA_SINGLE_CMP2BV_bm = 0x08         ; Compare 2 Buffer Valid bit mask
  TCA_SINGLE_CMP2BV_bp = 3            ; Compare 2 Buffer Valid bit position
  
  ; TCA_SINGLE_CTRLFSET masks
  ; Masks for TCA_SINGLE_PERBV already defined
  ; Masks for TCA_SINGLE_CMP0BV already defined
  ; Masks for TCA_SINGLE_CMP1BV already defined
  ; Masks for TCA_SINGLE_CMP2BV already defined
  
  ; TCA_SINGLE_EVCTRL masks
  TCA_SINGLE_CNTEI_bm = 0x01          ; Count on Event Input bit mask
  TCA_SINGLE_CNTEI_bp = 0             ; Count on Event Input bit position
  TCA_SINGLE_EVACT_gm = 0x06          ; Event Action group mask
  TCA_SINGLE_EVACT_gp = 1             ; Event Action group position
  TCA_SINGLE_EVACT_0_bm = (1<<1)      ; Event Action bit 0 mask
  TCA_SINGLE_EVACT_0_bp = 1           ; Event Action bit 0 position
  TCA_SINGLE_EVACT_1_bm = (1<<2)      ; Event Action bit 1 mask
  TCA_SINGLE_EVACT_1_bp = 2           ; Event Action bit 1 position
  
  ; TCA_SINGLE_INTCTRL masks
  TCA_SINGLE_OVF_bm = 0x01            ; Overflow Interrupt bit mask
  TCA_SINGLE_OVF_bp = 0               ; Overflow Interrupt bit position
  TCA_SINGLE_CMP0_bm = 0x10           ; Compare 0 Interrupt bit mask
  TCA_SINGLE_CMP0_bp = 4              ; Compare 0 Interrupt bit position
  TCA_SINGLE_CMP1_bm = 0x20           ; Compare 1 Interrupt bit mask
  TCA_SINGLE_CMP1_bp = 5              ; Compare 1 Interrupt bit position
  TCA_SINGLE_CMP2_bm = 0x40           ; Compare 2 Interrupt bit mask
  TCA_SINGLE_CMP2_bp = 6              ; Compare 2 Interrupt bit position
  
  ; TCA_SINGLE_INTFLAGS masks
  ; Masks for TCA_SINGLE_OVF already defined
  ; Masks for TCA_SINGLE_CMP0 already defined
  ; Masks for TCA_SINGLE_CMP1 already defined
  ; Masks for TCA_SINGLE_CMP2 already defined
  
  ; TCA_SINGLE_DBGCTRL masks
  TCA_SINGLE_DBGRUN_bm = 0x01         ; Debug Run bit mask
  TCA_SINGLE_DBGRUN_bp = 0            ; Debug Run bit position
  
  ; Masks for CTRLA already defined
  ; Masks for CTRLB already defined
  ; Masks for CTRLC already defined
  ; Masks for CTRLD already defined
  ; Masks for CTRLECLR already defined
  ; Masks for CTRLESET already defined
  ; Masks for INTCTRL already defined
  ; Masks for INTFLAGS already defined
  ; Masks for DBGCTRL already defined
  ; TCA_SPLIT_CTRLA masks
  TCA_SPLIT_ENABLE_bm = 0x01          ; Module Enable bit mask
  TCA_SPLIT_ENABLE_bp = 0             ; Module Enable bit position
  TCA_SPLIT_CLKSEL_gm = 0x0E          ; Clock Selection group mask
  TCA_SPLIT_CLKSEL_gp = 1             ; Clock Selection group position
  TCA_SPLIT_CLKSEL_0_bm = (1<<1)      ; Clock Selection bit 0 mask
  TCA_SPLIT_CLKSEL_0_bp = 1           ; Clock Selection bit 0 position
  TCA_SPLIT_CLKSEL_1_bm = (1<<2)      ; Clock Selection bit 1 mask
  TCA_SPLIT_CLKSEL_1_bp = 2           ; Clock Selection bit 1 position
  TCA_SPLIT_CLKSEL_2_bm = (1<<3)      ; Clock Selection bit 2 mask
  TCA_SPLIT_CLKSEL_2_bp = 3           ; Clock Selection bit 2 position
  
  ; TCA_SPLIT_CTRLB masks
  TCA_SPLIT_LCMP0EN_bm = 0x01         ; Low Compare 0 Enable bit mask
  TCA_SPLIT_LCMP0EN_bp = 0            ; Low Compare 0 Enable bit position
  TCA_SPLIT_LCMP1EN_bm = 0x02         ; Low Compare 1 Enable bit mask
  TCA_SPLIT_LCMP1EN_bp = 1            ; Low Compare 1 Enable bit position
  TCA_SPLIT_LCMP2EN_bm = 0x04         ; Low Compare 2 Enable bit mask
  TCA_SPLIT_LCMP2EN_bp = 2            ; Low Compare 2 Enable bit position
  TCA_SPLIT_HCMP0EN_bm = 0x10         ; High Compare 0 Enable bit mask
  TCA_SPLIT_HCMP0EN_bp = 4            ; High Compare 0 Enable bit position
  TCA_SPLIT_HCMP1EN_bm = 0x20         ; High Compare 1 Enable bit mask
  TCA_SPLIT_HCMP1EN_bp = 5            ; High Compare 1 Enable bit position
  TCA_SPLIT_HCMP2EN_bm = 0x40         ; High Compare 2 Enable bit mask
  TCA_SPLIT_HCMP2EN_bp = 6            ; High Compare 2 Enable bit position
  
  ; TCA_SPLIT_CTRLC masks
  TCA_SPLIT_LCMP0OV_bm = 0x01         ; Low Compare 0 Output Value bit mask
  TCA_SPLIT_LCMP0OV_bp = 0            ; Low Compare 0 Output Value bit position
  TCA_SPLIT_LCMP1OV_bm = 0x02         ; Low Compare 1 Output Value bit mask
  TCA_SPLIT_LCMP1OV_bp = 1            ; Low Compare 1 Output Value bit position
  TCA_SPLIT_LCMP2OV_bm = 0x04         ; Low Compare 2 Output Value bit mask
  TCA_SPLIT_LCMP2OV_bp = 2            ; Low Compare 2 Output Value bit position
  TCA_SPLIT_HCMP0OV_bm = 0x10         ; High Compare 0 Output Value bit mask
  TCA_SPLIT_HCMP0OV_bp = 4            ; High Compare 0 Output Value bit position
  TCA_SPLIT_HCMP1OV_bm = 0x20         ; High Compare 1 Output Value bit mask
  TCA_SPLIT_HCMP1OV_bp = 5            ; High Compare 1 Output Value bit position
  TCA_SPLIT_HCMP2OV_bm = 0x40         ; High Compare 2 Output Value bit mask
  TCA_SPLIT_HCMP2OV_bp = 6            ; High Compare 2 Output Value bit position
  
  ; TCA_SPLIT_CTRLD masks
  TCA_SPLIT_SPLITM_bm = 0x01          ; Split Mode Enable bit mask
  TCA_SPLIT_SPLITM_bp = 0             ; Split Mode Enable bit position
  
  ; TCA_SPLIT_CTRLECLR masks
  TCA_SPLIT_CMD_gm = 0x0C             ; Command group mask
  TCA_SPLIT_CMD_gp = 2                ; Command group position
  TCA_SPLIT_CMD_0_bm = (1<<2)         ; Command bit 0 mask
  TCA_SPLIT_CMD_0_bp = 2              ; Command bit 0 position
  TCA_SPLIT_CMD_1_bm = (1<<3)         ; Command bit 1 mask
  TCA_SPLIT_CMD_1_bp = 3              ; Command bit 1 position
  
  ; TCA_SPLIT_CTRLESET masks
  ; Masks for TCA_SPLIT_CMD already defined
  
  ; TCA_SPLIT_INTCTRL masks
  TCA_SPLIT_LUNF_bm = 0x01            ; Low Underflow Interrupt Enable bit mask
  TCA_SPLIT_LUNF_bp = 0               ; Low Underflow Interrupt Enable bit position
  TCA_SPLIT_HUNF_bm = 0x02            ; High Underflow Interrupt Enable bit mask
  TCA_SPLIT_HUNF_bp = 1               ; High Underflow Interrupt Enable bit position
  TCA_SPLIT_LCMP0_bm = 0x10           ; Low Compare 0 Interrupt Enable bit mask
  TCA_SPLIT_LCMP0_bp = 4              ; Low Compare 0 Interrupt Enable bit position
  TCA_SPLIT_LCMP1_bm = 0x20           ; Low Compare 1 Interrupt Enable bit mask
  TCA_SPLIT_LCMP1_bp = 5              ; Low Compare 1 Interrupt Enable bit position
  TCA_SPLIT_LCMP2_bm = 0x40           ; Low Compare 2 Interrupt Enable bit mask
  TCA_SPLIT_LCMP2_bp = 6              ; Low Compare 2 Interrupt Enable bit position
  
  ; TCA_SPLIT_INTFLAGS masks
  ; Masks for TCA_SPLIT_LUNF already defined
  ; Masks for TCA_SPLIT_HUNF already defined
  ; Masks for TCA_SPLIT_LCMP0 already defined
  ; Masks for TCA_SPLIT_LCMP1 already defined
  ; Masks for TCA_SPLIT_LCMP2 already defined
  
  ; TCA_SPLIT_DBGCTRL masks
  TCA_SPLIT_DBGRUN_bm = 0x01          ; Debug Run bit mask
  TCA_SPLIT_DBGRUN_bp = 0             ; Debug Run bit position
  
  ; Clock Selection
  TCA_SINGLE_CLKSEL_DIV1_gc = (0x00<<1) ; System Clock
  TCA_SINGLE_CLKSEL_DIV2_gc = (0x01<<1) ; System Clock / 2
  TCA_SINGLE_CLKSEL_DIV4_gc = (0x02<<1) ; System Clock / 4
  TCA_SINGLE_CLKSEL_DIV8_gc = (0x03<<1) ; System Clock / 8
  TCA_SINGLE_CLKSEL_DIV16_gc = (0x04<<1) ; System Clock / 16
  TCA_SINGLE_CLKSEL_DIV64_gc = (0x05<<1) ; System Clock / 64
  TCA_SINGLE_CLKSEL_DIV256_gc = (0x06<<1) ; System Clock / 256
  TCA_SINGLE_CLKSEL_DIV1024_gc = (0x07<<1) ; System Clock / 1024
  
  ; Waveform generation mode select
  TCA_SINGLE_WGMODE_NORMAL_gc = (0x00<<0) ; Normal Mode
  TCA_SINGLE_WGMODE_FRQ_gc = (0x01<<0) ; Frequency Generation Mode
  TCA_SINGLE_WGMODE_SINGLESLOPE_gc = (0x03<<0) ; Single Slope PWM
  TCA_SINGLE_WGMODE_DSTOP_gc = (0x05<<0) ; Dual Slope PWM, overflow on TOP
  TCA_SINGLE_WGMODE_DSBOTH_gc = (0x06<<0) ; Dual Slope PWM, overflow on TOP and BOTTOM
  TCA_SINGLE_WGMODE_DSBOTTOM_gc = (0x07<<0) ; Dual Slope PWM, overflow on BOTTOM
  
  ; Command select
  TCA_SINGLE_CMD_NONE_gc = (0x00<<2)  ; No Command
  TCA_SINGLE_CMD_UPDATE_gc = (0x01<<2) ; Force Update
  TCA_SINGLE_CMD_RESTART_gc = (0x02<<2) ; Force Restart
  TCA_SINGLE_CMD_RESET_gc = (0x03<<2) ; Force Hard Reset
  
  ; Direction select
  TCA_SINGLE_DIR_UP_gc = (0x00<<0)    ; Count up
  TCA_SINGLE_DIR_DOWN_gc = (0x01<<0)  ; Count down
  
  ; Event Action select
  TCA_SINGLE_EVACT_POSEDGE_gc = (0x00<<1) ; Count on positive edge event
  TCA_SINGLE_EVACT_ANYEDGE_gc = (0x01<<1) ; Count on any edge event
  TCA_SINGLE_EVACT_HIGHLVL_gc = (0x02<<1) ; Count on prescaled clock while event line is 1.
  TCA_SINGLE_EVACT_UPDOWN_gc = (0x03<<1) ; Count on prescaled clock. Event controls count direction. Up-count when event line is 0, down-count when event line is 1.
  
  ; Clock Selection
  TCA_SPLIT_CLKSEL_DIV1_gc = (0x00<<1) ; System Clock
  TCA_SPLIT_CLKSEL_DIV2_gc = (0x01<<1) ; System Clock / 2
  TCA_SPLIT_CLKSEL_DIV4_gc = (0x02<<1) ; System Clock / 4
  TCA_SPLIT_CLKSEL_DIV8_gc = (0x03<<1) ; System Clock / 8
  TCA_SPLIT_CLKSEL_DIV16_gc = (0x04<<1) ; System Clock / 16
  TCA_SPLIT_CLKSEL_DIV64_gc = (0x05<<1) ; System Clock / 64
  TCA_SPLIT_CLKSEL_DIV256_gc = (0x06<<1) ; System Clock / 256
  TCA_SPLIT_CLKSEL_DIV1024_gc = (0x07<<1) ; System Clock / 1024
  
  ; Command select
  TCA_SPLIT_CMD_NONE_gc = (0x00<<2)   ; No Command
  TCA_SPLIT_CMD_UPDATE_gc = (0x01<<2) ; Force Update
  TCA_SPLIT_CMD_RESTART_gc = (0x02<<2) ; Force Restart
  TCA_SPLIT_CMD_RESET_gc = (0x03<<2)  ; Force Hard Reset
  
  
  ;*************************************************************************
  ;** TCB - 16-bit Timer Type B
  ;*************************************************************************
  
  ; TCB_CTRLA masks
  TCB_ENABLE_bm = 0x01                ; Enable bit mask
  TCB_ENABLE_bp = 0                   ; Enable bit position
  TCB_CLKSEL_gm = 0x06                ; Clock Select group mask
  TCB_CLKSEL_gp = 1                   ; Clock Select group position
  TCB_CLKSEL_0_bm = (1<<1)            ; Clock Select bit 0 mask
  TCB_CLKSEL_0_bp = 1                 ; Clock Select bit 0 position
  TCB_CLKSEL_1_bm = (1<<2)            ; Clock Select bit 1 mask
  TCB_CLKSEL_1_bp = 2                 ; Clock Select bit 1 position
  TCB_SYNCUPD_bm = 0x10               ; Synchronize Update bit mask
  TCB_SYNCUPD_bp = 4                  ; Synchronize Update bit position
  TCB_RUNSTDBY_bm = 0x40              ; Run Standby bit mask
  TCB_RUNSTDBY_bp = 6                 ; Run Standby bit position
  
  ; TCB_CTRLB masks
  TCB_CNTMODE_gm = 0x07               ; Timer Mode group mask
  TCB_CNTMODE_gp = 0                  ; Timer Mode group position
  TCB_CNTMODE_0_bm = (1<<0)           ; Timer Mode bit 0 mask
  TCB_CNTMODE_0_bp = 0                ; Timer Mode bit 0 position
  TCB_CNTMODE_1_bm = (1<<1)           ; Timer Mode bit 1 mask
  TCB_CNTMODE_1_bp = 1                ; Timer Mode bit 1 position
  TCB_CNTMODE_2_bm = (1<<2)           ; Timer Mode bit 2 mask
  TCB_CNTMODE_2_bp = 2                ; Timer Mode bit 2 position
  TCB_CCMPEN_bm = 0x10                ; Pin Output Enable bit mask
  TCB_CCMPEN_bp = 4                   ; Pin Output Enable bit position
  TCB_CCMPINIT_bm = 0x20              ; Pin Initial State bit mask
  TCB_CCMPINIT_bp = 5                 ; Pin Initial State bit position
  TCB_ASYNC_bm = 0x40                 ; Asynchronous Enable bit mask
  TCB_ASYNC_bp = 6                    ; Asynchronous Enable bit position
  
  ; TCB_EVCTRL masks
  TCB_CAPTEI_bm = 0x01                ; Event Input Enable bit mask
  TCB_CAPTEI_bp = 0                   ; Event Input Enable bit position
  TCB_EDGE_bm = 0x10                  ; Event Edge bit mask
  TCB_EDGE_bp = 4                     ; Event Edge bit position
  TCB_FILTER_bm = 0x40                ; Input Capture Noise Cancellation Filter bit mask
  TCB_FILTER_bp = 6                   ; Input Capture Noise Cancellation Filter bit position
  
  ; TCB_INTCTRL masks
  TCB_CAPT_bm = 0x01                  ; Capture or Timeout bit mask
  TCB_CAPT_bp = 0                     ; Capture or Timeout bit position
  
  ; TCB_INTFLAGS masks
  ; Masks for TCB_CAPT already defined
  
  ; TCB_STATUS masks
  TCB_RUN_bm = 0x01                   ; Run bit mask
  TCB_RUN_bp = 0                      ; Run bit position
  
  ; TCB_DBGCTRL masks
  TCB_DBGRUN_bm = 0x01                ; Debug Run bit mask
  TCB_DBGRUN_bp = 0                   ; Debug Run bit position
  
  ; Clock Select
  TCB_CLKSEL_CLKDIV1_gc = (0x00<<1)   ; CLK_PER (No Prescaling)
  TCB_CLKSEL_CLKDIV2_gc = (0x01<<1)   ; CLK_PER/2 (From Prescaler)
  TCB_CLKSEL_CLKTCA_gc = (0x02<<1)    ; Use Clock from TCA
  
  ; Timer Mode select
  TCB_CNTMODE_INT_gc = (0x00<<0)      ; Periodic Interrupt
  TCB_CNTMODE_TIMEOUT_gc = (0x01<<0)  ; Periodic Timeout
  TCB_CNTMODE_CAPT_gc = (0x02<<0)     ; Input Capture Event
  TCB_CNTMODE_FRQ_gc = (0x03<<0)      ; Input Capture Frequency measurement
  TCB_CNTMODE_PW_gc = (0x04<<0)       ; Input Capture Pulse-Width measurement
  TCB_CNTMODE_FRQPW_gc = (0x05<<0)    ; Input Capture Frequency and Pulse-Width measurement
  TCB_CNTMODE_SINGLE_gc = (0x06<<0)   ; Single Shot
  TCB_CNTMODE_PWM8_gc = (0x07<<0)     ; 8-bit PWM
  
  
  ;*************************************************************************
  ;** TWI - Two-Wire Interface
  ;*************************************************************************
  
  ; TWI_CTRLA masks
  TWI_FMPEN_bm = 0x02                 ; FM Plus Enable bit mask
  TWI_FMPEN_bp = 1                    ; FM Plus Enable bit position
  TWI_SDAHOLD_gm = 0x0C               ; SDA Hold Time group mask
  TWI_SDAHOLD_gp = 2                  ; SDA Hold Time group position
  TWI_SDAHOLD_0_bm = (1<<2)           ; SDA Hold Time bit 0 mask
  TWI_SDAHOLD_0_bp = 2                ; SDA Hold Time bit 0 position
  TWI_SDAHOLD_1_bm = (1<<3)           ; SDA Hold Time bit 1 mask
  TWI_SDAHOLD_1_bp = 3                ; SDA Hold Time bit 1 position
  TWI_SDASETUP_bm = 0x10              ; SDA Setup Time bit mask
  TWI_SDASETUP_bp = 4                 ; SDA Setup Time bit position
  
  ; TWI_DBGCTRL masks
  TWI_DBGRUN_bm = 0x01                ; Debug Run bit mask
  TWI_DBGRUN_bp = 0                   ; Debug Run bit position
  
  ; TWI_MCTRLA masks
  TWI_ENABLE_bm = 0x01                ; Enable TWI Host bit mask
  TWI_ENABLE_bp = 0                   ; Enable TWI Host bit position
  TWI_SMEN_bm = 0x02                  ; Smart Mode Enable bit mask
  TWI_SMEN_bp = 1                     ; Smart Mode Enable bit position
  TWI_TIMEOUT_gm = 0x0C               ; Inactive Bus Timeout group mask
  TWI_TIMEOUT_gp = 2                  ; Inactive Bus Timeout group position
  TWI_TIMEOUT_0_bm = (1<<2)           ; Inactive Bus Timeout bit 0 mask
  TWI_TIMEOUT_0_bp = 2                ; Inactive Bus Timeout bit 0 position
  TWI_TIMEOUT_1_bm = (1<<3)           ; Inactive Bus Timeout bit 1 mask
  TWI_TIMEOUT_1_bp = 3                ; Inactive Bus Timeout bit 1 position
  TWI_QCEN_bm = 0x10                  ; Quick Command Enable bit mask
  TWI_QCEN_bp = 4                     ; Quick Command Enable bit position
  TWI_WIEN_bm = 0x40                  ; Write Interrupt Enable bit mask
  TWI_WIEN_bp = 6                     ; Write Interrupt Enable bit position
  TWI_RIEN_bm = 0x80                  ; Read Interrupt Enable bit mask
  TWI_RIEN_bp = 7                     ; Read Interrupt Enable bit position
  
  ; TWI_MCTRLB masks
  TWI_MCMD_gm = 0x03                  ; Command group mask
  TWI_MCMD_gp = 0                     ; Command group position
  TWI_MCMD_0_bm = (1<<0)              ; Command bit 0 mask
  TWI_MCMD_0_bp = 0                   ; Command bit 0 position
  TWI_MCMD_1_bm = (1<<1)              ; Command bit 1 mask
  TWI_MCMD_1_bp = 1                   ; Command bit 1 position
  TWI_ACKACT_bm = 0x04                ; Acknowledge Action bit mask
  TWI_ACKACT_bp = 2                   ; Acknowledge Action bit position
  TWI_FLUSH_bm = 0x08                 ; Flush bit mask
  TWI_FLUSH_bp = 3                    ; Flush bit position
  
  ; TWI_MSTATUS masks
  TWI_BUSSTATE_gm = 0x03              ; Bus State group mask
  TWI_BUSSTATE_gp = 0                 ; Bus State group position
  TWI_BUSSTATE_0_bm = (1<<0)          ; Bus State bit 0 mask
  TWI_BUSSTATE_0_bp = 0               ; Bus State bit 0 position
  TWI_BUSSTATE_1_bm = (1<<1)          ; Bus State bit 1 mask
  TWI_BUSSTATE_1_bp = 1               ; Bus State bit 1 position
  TWI_BUSERR_bm = 0x04                ; Bus Error bit mask
  TWI_BUSERR_bp = 2                   ; Bus Error bit position
  TWI_ARBLOST_bm = 0x08               ; Arbitration Lost bit mask
  TWI_ARBLOST_bp = 3                  ; Arbitration Lost bit position
  TWI_RXACK_bm = 0x10                 ; Received Acknowledge bit mask
  TWI_RXACK_bp = 4                    ; Received Acknowledge bit position
  TWI_CLKHOLD_bm = 0x20               ; Clock Hold bit mask
  TWI_CLKHOLD_bp = 5                  ; Clock Hold bit position
  TWI_WIF_bm = 0x40                   ; Write Interrupt Flag bit mask
  TWI_WIF_bp = 6                      ; Write Interrupt Flag bit position
  TWI_RIF_bm = 0x80                   ; Read Interrupt Flag bit mask
  TWI_RIF_bp = 7                      ; Read Interrupt Flag bit position
  
  ; TWI_SCTRLA masks
  ; Masks for TWI_ENABLE already defined
  ; Masks for TWI_SMEN already defined
  TWI_PMEN_bm = 0x04                  ; Promiscuous Mode Enable bit mask
  TWI_PMEN_bp = 2                     ; Promiscuous Mode Enable bit position
  TWI_PIEN_bm = 0x20                  ; Stop Interrupt Enable bit mask
  TWI_PIEN_bp = 5                     ; Stop Interrupt Enable bit position
  TWI_APIEN_bm = 0x40                 ; Address/Stop Interrupt Enable bit mask
  TWI_APIEN_bp = 6                    ; Address/Stop Interrupt Enable bit position
  TWI_DIEN_bm = 0x80                  ; Data Interrupt Enable bit mask
  TWI_DIEN_bp = 7                     ; Data Interrupt Enable bit position
  
  ; TWI_SCTRLB masks
  TWI_SCMD_gm = 0x03                  ; Command group mask
  TWI_SCMD_gp = 0                     ; Command group position
  TWI_SCMD_0_bm = (1<<0)              ; Command bit 0 mask
  TWI_SCMD_0_bp = 0                   ; Command bit 0 position
  TWI_SCMD_1_bm = (1<<1)              ; Command bit 1 mask
  TWI_SCMD_1_bp = 1                   ; Command bit 1 position
  ; Masks for TWI_ACKACT already defined
  
  ; TWI_SSTATUS masks
  TWI_AP_bm = 0x01                    ; Client Address or Stop bit mask
  TWI_AP_bp = 0                       ; Client Address or Stop bit position
  TWI_DIR_bm = 0x02                   ; Read/Write Direction bit mask
  TWI_DIR_bp = 1                      ; Read/Write Direction bit position
  ; Masks for TWI_BUSERR already defined
  TWI_COLL_bm = 0x08                  ; Collision bit mask
  TWI_COLL_bp = 3                     ; Collision bit position
  ; Masks for TWI_RXACK already defined
  ; Masks for TWI_CLKHOLD already defined
  TWI_APIF_bm = 0x40                  ; Address/Stop Interrupt Flag bit mask
  TWI_APIF_bp = 6                     ; Address/Stop Interrupt Flag bit position
  TWI_DIF_bm = 0x80                   ; Data Interrupt Flag bit mask
  TWI_DIF_bp = 7                      ; Data Interrupt Flag bit position
  
  ; TWI_SADDRMASK masks
  TWI_ADDREN_bm = 0x01                ; Address Enable bit mask
  TWI_ADDREN_bp = 0                   ; Address Enable bit position
  TWI_ADDRMASK_gm = 0xFE              ; Address Mask group mask
  TWI_ADDRMASK_gp = 1                 ; Address Mask group position
  TWI_ADDRMASK_0_bm = (1<<1)          ; Address Mask bit 0 mask
  TWI_ADDRMASK_0_bp = 1               ; Address Mask bit 0 position
  TWI_ADDRMASK_1_bm = (1<<2)          ; Address Mask bit 1 mask
  TWI_ADDRMASK_1_bp = 2               ; Address Mask bit 1 position
  TWI_ADDRMASK_2_bm = (1<<3)          ; Address Mask bit 2 mask
  TWI_ADDRMASK_2_bp = 3               ; Address Mask bit 2 position
  TWI_ADDRMASK_3_bm = (1<<4)          ; Address Mask bit 3 mask
  TWI_ADDRMASK_3_bp = 4               ; Address Mask bit 3 position
  TWI_ADDRMASK_4_bm = (1<<5)          ; Address Mask bit 4 mask
  TWI_ADDRMASK_4_bp = 5               ; Address Mask bit 4 position
  TWI_ADDRMASK_5_bm = (1<<6)          ; Address Mask bit 5 mask
  TWI_ADDRMASK_5_bp = 6               ; Address Mask bit 5 position
  TWI_ADDRMASK_6_bm = (1<<7)          ; Address Mask bit 6 mask
  TWI_ADDRMASK_6_bp = 7               ; Address Mask bit 6 position
  
  ; SDA Hold Time select
  TWI_SDAHOLD_OFF_gc = (0x00<<2)      ; SDA hold time off
  TWI_SDAHOLD_50NS_gc = (0x01<<2)     ; Typical 50ns hold time
  TWI_SDAHOLD_300NS_gc = (0x02<<2)    ; Typical 300ns hold time
  TWI_SDAHOLD_500NS_gc = (0x03<<2)    ; Typical 500ns hold time
  
  ; SDA Setup Time select
  TWI_SDASETUP_4CYC_gc = (0x00<<4)    ; SDA setup time is 4 clock cycles
  TWI_SDASETUP_8CYC_gc = (0x01<<4)    ; SDA setup time is 8 clock cycles
  
  ; Inactive Bus Timeout select
  TWI_TIMEOUT_DISABLED_gc = (0x00<<2) ; Bus Timeout Disabled
  TWI_TIMEOUT_50US_gc = (0x01<<2)     ; 50 Microseconds
  TWI_TIMEOUT_100US_gc = (0x02<<2)    ; 100 Microseconds
  TWI_TIMEOUT_200US_gc = (0x03<<2)    ; 200 Microseconds
  
  ; Acknowledge Action select
  TWI_ACKACT_ACK_gc = (0x00<<2)       ; Send ACK
  TWI_ACKACT_NACK_gc = (0x01<<2)      ; Send NACK
  
  ; Command select
  TWI_MCMD_NOACT_gc = (0x00<<0)       ; No Action
  TWI_MCMD_REPSTART_gc = (0x01<<0)    ; Issue Repeated Start Condition
  TWI_MCMD_RECVTRANS_gc = (0x02<<0)   ; Receive or Transmit Data, depending on DIR
  TWI_MCMD_STOP_gc = (0x03<<0)        ; Issue Stop Condition
  
  ; Bus State select
  TWI_BUSSTATE_UNKNOWN_gc = (0x00<<0) ; Unknown Bus State
  TWI_BUSSTATE_IDLE_gc = (0x01<<0)    ; Bus is Idle
  TWI_BUSSTATE_OWNER_gc = (0x02<<0)   ; This Module Controls The Bus
  TWI_BUSSTATE_BUSY_gc = (0x03<<0)    ; The Bus is Busy
  
  ; Command select
  TWI_SCMD_NOACT_gc = (0x00<<0)       ; No Action
  TWI_SCMD_COMPTRANS_gc = (0x02<<0)   ; Used To Complete a Transaction
  TWI_SCMD_RESPONSE_gc = (0x03<<0)    ; Used in Response to Address/Data Interrupt
  
  ; Client Address or Stop select
  TWI_AP_STOP_gc = (0x00<<0)          ; Stop condition generated APIF
  TWI_AP_ADR_gc = (0x01<<0)           ; Address detection generated APIF
  
  
  ;*************************************************************************
  ;** USART - Universal Synchronous and Asynchronous Receiver and Transmitter
  ;*************************************************************************
  
  ; USART_RXDATAL masks
  USART_DATA_gm = 0xFF                ; RX Data group mask
  USART_DATA_gp = 0                   ; RX Data group position
  USART_DATA_0_bm = (1<<0)            ; RX Data bit 0 mask
  USART_DATA_0_bp = 0                 ; RX Data bit 0 position
  USART_DATA_1_bm = (1<<1)            ; RX Data bit 1 mask
  USART_DATA_1_bp = 1                 ; RX Data bit 1 position
  USART_DATA_2_bm = (1<<2)            ; RX Data bit 2 mask
  USART_DATA_2_bp = 2                 ; RX Data bit 2 position
  USART_DATA_3_bm = (1<<3)            ; RX Data bit 3 mask
  USART_DATA_3_bp = 3                 ; RX Data bit 3 position
  USART_DATA_4_bm = (1<<4)            ; RX Data bit 4 mask
  USART_DATA_4_bp = 4                 ; RX Data bit 4 position
  USART_DATA_5_bm = (1<<5)            ; RX Data bit 5 mask
  USART_DATA_5_bp = 5                 ; RX Data bit 5 position
  USART_DATA_6_bm = (1<<6)            ; RX Data bit 6 mask
  USART_DATA_6_bp = 6                 ; RX Data bit 6 position
  USART_DATA_7_bm = (1<<7)            ; RX Data bit 7 mask
  USART_DATA_7_bp = 7                 ; RX Data bit 7 position
  
  ; USART_RXDATAH masks
  USART_DATA8_bm = 0x01               ; Receiver Data Register bit mask
  USART_DATA8_bp = 0                  ; Receiver Data Register bit position
  USART_PERR_bm = 0x02                ; Parity Error bit mask
  USART_PERR_bp = 1                   ; Parity Error bit position
  USART_FERR_bm = 0x04                ; Frame Error bit mask
  USART_FERR_bp = 2                   ; Frame Error bit position
  USART_BUFOVF_bm = 0x40              ; Buffer Overflow bit mask
  USART_BUFOVF_bp = 6                 ; Buffer Overflow bit position
  USART_RXCIF_bm = 0x80               ; Receive Complete Interrupt Flag bit mask
  USART_RXCIF_bp = 7                  ; Receive Complete Interrupt Flag bit position
  
  ; USART_TXDATAL masks
  ; Masks for USART_DATA already defined
  
  ; USART_TXDATAH masks
  ; Masks for USART_DATA8 already defined
  
  ; USART_STATUS masks
  USART_WFB_bm = 0x01                 ; Wait For Break bit mask
  USART_WFB_bp = 0                    ; Wait For Break bit position
  USART_BDF_bm = 0x02                 ; Break Detected Flag bit mask
  USART_BDF_bp = 1                    ; Break Detected Flag bit position
  USART_ISFIF_bm = 0x08               ; Inconsistent Sync Field Interrupt Flag bit mask
  USART_ISFIF_bp = 3                  ; Inconsistent Sync Field Interrupt Flag bit position
  USART_RXSIF_bm = 0x10               ; Receive Start Interrupt bit mask
  USART_RXSIF_bp = 4                  ; Receive Start Interrupt bit position
  USART_DREIF_bm = 0x20               ; Data Register Empty Flag bit mask
  USART_DREIF_bp = 5                  ; Data Register Empty Flag bit position
  USART_TXCIF_bm = 0x40               ; Transmit Interrupt Flag bit mask
  USART_TXCIF_bp = 6                  ; Transmit Interrupt Flag bit position
  ; Masks for USART_RXCIF already defined
  
  ; USART_CTRLA masks
  USART_RS485_gm = 0x03               ; RS485 Mode internal transmitter group mask
  USART_RS485_gp = 0                  ; RS485 Mode internal transmitter group position
  USART_RS485_0_bm = (1<<0)           ; RS485 Mode internal transmitter bit 0 mask
  USART_RS485_0_bp = 0                ; RS485 Mode internal transmitter bit 0 position
  USART_RS485_1_bm = (1<<1)           ; RS485 Mode internal transmitter bit 1 mask
  USART_RS485_1_bp = 1                ; RS485 Mode internal transmitter bit 1 position
  USART_ABEIE_bm = 0x04               ; Auto-baud Error Interrupt Enable bit mask
  USART_ABEIE_bp = 2                  ; Auto-baud Error Interrupt Enable bit position
  USART_LBME_bm = 0x08                ; Loop-back Mode Enable bit mask
  USART_LBME_bp = 3                   ; Loop-back Mode Enable bit position
  USART_RXSIE_bm = 0x10               ; Receiver Start Frame Interrupt Enable bit mask
  USART_RXSIE_bp = 4                  ; Receiver Start Frame Interrupt Enable bit position
  USART_DREIE_bm = 0x20               ; Data Register Empty Interrupt Enable bit mask
  USART_DREIE_bp = 5                  ; Data Register Empty Interrupt Enable bit position
  USART_TXCIE_bm = 0x40               ; Transmit Complete Interrupt Enable bit mask
  USART_TXCIE_bp = 6                  ; Transmit Complete Interrupt Enable bit position
  USART_RXCIE_bm = 0x80               ; Receive Complete Interrupt Enable bit mask
  USART_RXCIE_bp = 7                  ; Receive Complete Interrupt Enable bit position
  
  ; USART_CTRLB masks
  USART_MPCM_bm = 0x01                ; Multi-processor Communication Mode bit mask
  USART_MPCM_bp = 0                   ; Multi-processor Communication Mode bit position
  USART_RXMODE_gm = 0x06              ; Receiver Mode group mask
  USART_RXMODE_gp = 1                 ; Receiver Mode group position
  USART_RXMODE_0_bm = (1<<1)          ; Receiver Mode bit 0 mask
  USART_RXMODE_0_bp = 1               ; Receiver Mode bit 0 position
  USART_RXMODE_1_bm = (1<<2)          ; Receiver Mode bit 1 mask
  USART_RXMODE_1_bp = 2               ; Receiver Mode bit 1 position
  USART_ODME_bm = 0x08                ; Open Drain Mode Enable bit mask
  USART_ODME_bp = 3                   ; Open Drain Mode Enable bit position
  USART_SFDEN_bm = 0x10               ; Start Frame Detection Enable bit mask
  USART_SFDEN_bp = 4                  ; Start Frame Detection Enable bit position
  USART_TXEN_bm = 0x40                ; Transmitter Enable bit mask
  USART_TXEN_bp = 6                   ; Transmitter Enable bit position
  USART_RXEN_bm = 0x80                ; Reciever enable bit mask
  USART_RXEN_bp = 7                   ; Reciever enable bit position
  
  ; USART_CTRLC masks
  USART_UCPHA_bm = 0x02               ; SPI Host Mode, Clock Phase bit mask
  USART_UCPHA_bp = 1                  ; SPI Host Mode, Clock Phase bit position
  USART_UDORD_bm = 0x04               ; SPI Host Mode, Data Order bit mask
  USART_UDORD_bp = 2                  ; SPI Host Mode, Data Order bit position
  USART_CHSIZE_gm = 0x07              ; Character Size group mask
  USART_CHSIZE_gp = 0                 ; Character Size group position
  USART_CHSIZE_0_bm = (1<<0)          ; Character Size bit 0 mask
  USART_CHSIZE_0_bp = 0               ; Character Size bit 0 position
  USART_CHSIZE_1_bm = (1<<1)          ; Character Size bit 1 mask
  USART_CHSIZE_1_bp = 1               ; Character Size bit 1 position
  USART_CHSIZE_2_bm = (1<<2)          ; Character Size bit 2 mask
  USART_CHSIZE_2_bp = 2               ; Character Size bit 2 position
  USART_SBMODE_bm = 0x08              ; Stop Bit Mode bit mask
  USART_SBMODE_bp = 3                 ; Stop Bit Mode bit position
  USART_PMODE_gm = 0x30               ; Parity Mode group mask
  USART_PMODE_gp = 4                  ; Parity Mode group position
  USART_PMODE_0_bm = (1<<4)           ; Parity Mode bit 0 mask
  USART_PMODE_0_bp = 4                ; Parity Mode bit 0 position
  USART_PMODE_1_bm = (1<<5)           ; Parity Mode bit 1 mask
  USART_PMODE_1_bp = 5                ; Parity Mode bit 1 position
  USART_CMODE_gm = 0xC0               ; Communication Mode group mask
  USART_CMODE_gp = 6                  ; Communication Mode group position
  USART_CMODE_0_bm = (1<<6)           ; Communication Mode bit 0 mask
  USART_CMODE_0_bp = 6                ; Communication Mode bit 0 position
  USART_CMODE_1_bm = (1<<7)           ; Communication Mode bit 1 mask
  USART_CMODE_1_bp = 7                ; Communication Mode bit 1 position
  
  ; USART_DBGCTRL masks
  USART_DBGRUN_bm = 0x01              ; Debug Run bit mask
  USART_DBGRUN_bp = 0                 ; Debug Run bit position
  
  ; USART_EVCTRL masks
  USART_IREI_bm = 0x01                ; IrDA Event Input Enable bit mask
  USART_IREI_bp = 0                   ; IrDA Event Input Enable bit position
  
  ; USART_TXPLCTRL masks
  USART_TXPL_gm = 0xFF                ; Transmit pulse length group mask
  USART_TXPL_gp = 0                   ; Transmit pulse length group position
  USART_TXPL_0_bm = (1<<0)            ; Transmit pulse length bit 0 mask
  USART_TXPL_0_bp = 0                 ; Transmit pulse length bit 0 position
  USART_TXPL_1_bm = (1<<1)            ; Transmit pulse length bit 1 mask
  USART_TXPL_1_bp = 1                 ; Transmit pulse length bit 1 position
  USART_TXPL_2_bm = (1<<2)            ; Transmit pulse length bit 2 mask
  USART_TXPL_2_bp = 2                 ; Transmit pulse length bit 2 position
  USART_TXPL_3_bm = (1<<3)            ; Transmit pulse length bit 3 mask
  USART_TXPL_3_bp = 3                 ; Transmit pulse length bit 3 position
  USART_TXPL_4_bm = (1<<4)            ; Transmit pulse length bit 4 mask
  USART_TXPL_4_bp = 4                 ; Transmit pulse length bit 4 position
  USART_TXPL_5_bm = (1<<5)            ; Transmit pulse length bit 5 mask
  USART_TXPL_5_bp = 5                 ; Transmit pulse length bit 5 position
  USART_TXPL_6_bm = (1<<6)            ; Transmit pulse length bit 6 mask
  USART_TXPL_6_bp = 6                 ; Transmit pulse length bit 6 position
  USART_TXPL_7_bm = (1<<7)            ; Transmit pulse length bit 7 mask
  USART_TXPL_7_bp = 7                 ; Transmit pulse length bit 7 position
  
  ; USART_RXPLCTRL masks
  USART_RXPL_gm = 0x7F                ; Receiver Pulse Lenght group mask
  USART_RXPL_gp = 0                   ; Receiver Pulse Lenght group position
  USART_RXPL_0_bm = (1<<0)            ; Receiver Pulse Lenght bit 0 mask
  USART_RXPL_0_bp = 0                 ; Receiver Pulse Lenght bit 0 position
  USART_RXPL_1_bm = (1<<1)            ; Receiver Pulse Lenght bit 1 mask
  USART_RXPL_1_bp = 1                 ; Receiver Pulse Lenght bit 1 position
  USART_RXPL_2_bm = (1<<2)            ; Receiver Pulse Lenght bit 2 mask
  USART_RXPL_2_bp = 2                 ; Receiver Pulse Lenght bit 2 position
  USART_RXPL_3_bm = (1<<3)            ; Receiver Pulse Lenght bit 3 mask
  USART_RXPL_3_bp = 3                 ; Receiver Pulse Lenght bit 3 position
  USART_RXPL_4_bm = (1<<4)            ; Receiver Pulse Lenght bit 4 mask
  USART_RXPL_4_bp = 4                 ; Receiver Pulse Lenght bit 4 position
  USART_RXPL_5_bm = (1<<5)            ; Receiver Pulse Lenght bit 5 mask
  USART_RXPL_5_bp = 5                 ; Receiver Pulse Lenght bit 5 position
  USART_RXPL_6_bm = (1<<6)            ; Receiver Pulse Lenght bit 6 mask
  USART_RXPL_6_bp = 6                 ; Receiver Pulse Lenght bit 6 position
  
  ; RS485 Mode internal transmitter select
  USART_RS485_OFF_gc = (0x00<<0)      ; RS485 Mode disabled
  USART_RS485_EXT_gc = (0x01<<0)      ; RS485 Mode External drive
  USART_RS485_INT_gc = (0x02<<0)      ; RS485 Mode Internal drive
  
  ; Receiver Mode select
  USART_RXMODE_NORMAL_gc = (0x00<<1)  ; Normal mode
  USART_RXMODE_CLK2X_gc = (0x01<<1)   ; CLK2x mode
  USART_RXMODE_GENAUTO_gc = (0x02<<1) ; Generic autobaud mode
  USART_RXMODE_LINAUTO_gc = (0x03<<1) ; LIN constrained autobaud mode
  
  ; Communication Mode select
  USART_CMODE_ASYNCHRONOUS_gc = (0x00<<6) ; Asynchronous Mode
  USART_CMODE_SYNCHRONOUS_gc = (0x01<<6) ; Synchronous Mode
  USART_CMODE_IRCOM_gc = (0x02<<6)    ; Infrared Communication
  USART_CMODE_MSPI_gc = (0x03<<6)     ; SPI Host Mode
  
  ; Character Size select
  USART_NORMAL_CHSIZE_5BIT_gc = (0x00<<0) ; Character size: 5 bit
  USART_NORMAL_CHSIZE_6BIT_gc = (0x01<<0) ; Character size: 6 bit
  USART_NORMAL_CHSIZE_7BIT_gc = (0x02<<0) ; Character size: 7 bit
  USART_NORMAL_CHSIZE_8BIT_gc = (0x03<<0) ; Character size: 8 bit
  USART_NORMAL_CHSIZE_9BITL_gc = (0x06<<0) ; Character size: 9 bit read low byte first
  USART_NORMAL_CHSIZE_9BITH_gc = (0x07<<0) ; Character size: 9 bit read high byte first
  
  ; Parity Mode select
  USART_NORMAL_PMODE_DISABLED_gc = (0x00<<4) ; No Parity
  USART_NORMAL_PMODE_EVEN_gc = (0x02<<4) ; Even Parity
  USART_NORMAL_PMODE_ODD_gc = (0x03<<4) ; Odd Parity
  
  ; Stop Bit Mode select
  USART_NORMAL_SBMODE_1BIT_gc = (0x00<<3) ; 1 stop bit
  USART_NORMAL_SBMODE_2BIT_gc = (0x01<<3) ; 2 stop bits
  
  
  ;*************************************************************************
  ;** USERROW - User Row
  ;*************************************************************************
  
  
  ;*************************************************************************
  ;** VPORT - Virtual Ports
  ;*************************************************************************
  
  ; VPORT_INTFLAGS masks
  VPORT_INT_gm = 0xFF                 ; Pin Interrupt group mask
  VPORT_INT_gp = 0                    ; Pin Interrupt group position
  VPORT_INT_0_bm = (1<<0)             ; Pin Interrupt bit 0 mask
  VPORT_INT_0_bp = 0                  ; Pin Interrupt bit 0 position
  VPORT_INT_1_bm = (1<<1)             ; Pin Interrupt bit 1 mask
  VPORT_INT_1_bp = 1                  ; Pin Interrupt bit 1 position
  VPORT_INT_2_bm = (1<<2)             ; Pin Interrupt bit 2 mask
  VPORT_INT_2_bp = 2                  ; Pin Interrupt bit 2 position
  VPORT_INT_3_bm = (1<<3)             ; Pin Interrupt bit 3 mask
  VPORT_INT_3_bp = 3                  ; Pin Interrupt bit 3 position
  VPORT_INT_4_bm = (1<<4)             ; Pin Interrupt bit 4 mask
  VPORT_INT_4_bp = 4                  ; Pin Interrupt bit 4 position
  VPORT_INT_5_bm = (1<<5)             ; Pin Interrupt bit 5 mask
  VPORT_INT_5_bp = 5                  ; Pin Interrupt bit 5 position
  VPORT_INT_6_bm = (1<<6)             ; Pin Interrupt bit 6 mask
  VPORT_INT_6_bp = 6                  ; Pin Interrupt bit 6 position
  VPORT_INT_7_bm = (1<<7)             ; Pin Interrupt bit 7 mask
  VPORT_INT_7_bp = 7                  ; Pin Interrupt bit 7 position
  
  
  ;*************************************************************************
  ;** VREF - Voltage reference
  ;*************************************************************************
  
  ; VREF_CTRLA masks
  VREF_DAC0REFSEL_gm = 0x07           ; DAC0/AC0 reference select group mask
  VREF_DAC0REFSEL_gp = 0              ; DAC0/AC0 reference select group position
  VREF_DAC0REFSEL_0_bm = (1<<0)       ; DAC0/AC0 reference select bit 0 mask
  VREF_DAC0REFSEL_0_bp = 0            ; DAC0/AC0 reference select bit 0 position
  VREF_DAC0REFSEL_1_bm = (1<<1)       ; DAC0/AC0 reference select bit 1 mask
  VREF_DAC0REFSEL_1_bp = 1            ; DAC0/AC0 reference select bit 1 position
  VREF_DAC0REFSEL_2_bm = (1<<2)       ; DAC0/AC0 reference select bit 2 mask
  VREF_DAC0REFSEL_2_bp = 2            ; DAC0/AC0 reference select bit 2 position
  VREF_ADC0REFSEL_gm = 0x70           ; ADC0 reference select group mask
  VREF_ADC0REFSEL_gp = 4              ; ADC0 reference select group position
  VREF_ADC0REFSEL_0_bm = (1<<4)       ; ADC0 reference select bit 0 mask
  VREF_ADC0REFSEL_0_bp = 4            ; ADC0 reference select bit 0 position
  VREF_ADC0REFSEL_1_bm = (1<<5)       ; ADC0 reference select bit 1 mask
  VREF_ADC0REFSEL_1_bp = 5            ; ADC0 reference select bit 1 position
  VREF_ADC0REFSEL_2_bm = (1<<6)       ; ADC0 reference select bit 2 mask
  VREF_ADC0REFSEL_2_bp = 6            ; ADC0 reference select bit 2 position
  
  ; VREF_CTRLB masks
  VREF_DAC0REFEN_bm = 0x01            ; DAC0/AC0 reference enable bit mask
  VREF_DAC0REFEN_bp = 0               ; DAC0/AC0 reference enable bit position
  VREF_ADC0REFEN_bm = 0x02            ; ADC0 reference enable bit mask
  VREF_ADC0REFEN_bp = 1               ; ADC0 reference enable bit position
  
  ; ADC0 reference select
  VREF_ADC0REFSEL_0V55_gc = (0x00<<4) ; Voltage reference at 0.55V
  VREF_ADC0REFSEL_1V1_gc = (0x01<<4)  ; Voltage reference at 1.1V
  VREF_ADC0REFSEL_2V5_gc = (0x02<<4)  ; Voltage reference at 2.5V
  VREF_ADC0REFSEL_4V34_gc = (0x03<<4) ; Voltage reference at 4.34V
  VREF_ADC0REFSEL_1V5_gc = (0x04<<4)  ; Voltage reference at 1.5V
  
  ; DAC0/AC0 reference select
  VREF_DAC0REFSEL_0V55_gc = (0x00<<0) ; Voltage reference at 0.55V
  VREF_DAC0REFSEL_1V1_gc = (0x01<<0)  ; Voltage reference at 1.1V
  VREF_DAC0REFSEL_2V5_gc = (0x02<<0)  ; Voltage reference at 2.5V
  VREF_DAC0REFSEL_4V34_gc = (0x03<<0) ; Voltage reference at 4.34V
  VREF_DAC0REFSEL_1V5_gc = (0x04<<0)  ; Voltage reference at 1.5V
  
  
  ;*************************************************************************
  ;** WDT - Watch-Dog Timer
  ;*************************************************************************
  
  ; WDT_CTRLA masks
  WDT_PERIOD_gm = 0x0F                ; Period group mask
  WDT_PERIOD_gp = 0                   ; Period group position
  WDT_PERIOD_0_bm = (1<<0)            ; Period bit 0 mask
  WDT_PERIOD_0_bp = 0                 ; Period bit 0 position
  WDT_PERIOD_1_bm = (1<<1)            ; Period bit 1 mask
  WDT_PERIOD_1_bp = 1                 ; Period bit 1 position
  WDT_PERIOD_2_bm = (1<<2)            ; Period bit 2 mask
  WDT_PERIOD_2_bp = 2                 ; Period bit 2 position
  WDT_PERIOD_3_bm = (1<<3)            ; Period bit 3 mask
  WDT_PERIOD_3_bp = 3                 ; Period bit 3 position
  WDT_WINDOW_gm = 0xF0                ; Window group mask
  WDT_WINDOW_gp = 4                   ; Window group position
  WDT_WINDOW_0_bm = (1<<4)            ; Window bit 0 mask
  WDT_WINDOW_0_bp = 4                 ; Window bit 0 position
  WDT_WINDOW_1_bm = (1<<5)            ; Window bit 1 mask
  WDT_WINDOW_1_bp = 5                 ; Window bit 1 position
  WDT_WINDOW_2_bm = (1<<6)            ; Window bit 2 mask
  WDT_WINDOW_2_bp = 6                 ; Window bit 2 position
  WDT_WINDOW_3_bm = (1<<7)            ; Window bit 3 mask
  WDT_WINDOW_3_bp = 7                 ; Window bit 3 position
  
  ; WDT_STATUS masks
  WDT_SYNCBUSY_bm = 0x01              ; Syncronization busy bit mask
  WDT_SYNCBUSY_bp = 0                 ; Syncronization busy bit position
  WDT_LOCK_bm = 0x80                  ; Lock enable bit mask
  WDT_LOCK_bp = 7                     ; Lock enable bit position
  
  ; Period select
  WDT_PERIOD_OFF_gc = (0x00<<0)       ; Off
  WDT_PERIOD_8CLK_gc = (0x01<<0)      ; 8 cycles (8ms)
  WDT_PERIOD_16CLK_gc = (0x02<<0)     ; 16 cycles (16ms)
  WDT_PERIOD_32CLK_gc = (0x03<<0)     ; 32 cycles (32ms)
  WDT_PERIOD_64CLK_gc = (0x04<<0)     ; 64 cycles (64ms)
  WDT_PERIOD_128CLK_gc = (0x05<<0)    ; 128 cycles (0.128s)
  WDT_PERIOD_256CLK_gc = (0x06<<0)    ; 256 cycles (0.256s)
  WDT_PERIOD_512CLK_gc = (0x07<<0)    ; 512 cycles (0.512s)
  WDT_PERIOD_1KCLK_gc = (0x08<<0)     ; 1K cycles (1.0s)
  WDT_PERIOD_2KCLK_gc = (0x09<<0)     ; 2K cycles (2.0s)
  WDT_PERIOD_4KCLK_gc = (0x0A<<0)     ; 4K cycles (4.1s)
  WDT_PERIOD_8KCLK_gc = (0x0B<<0)     ; 8K cycles (8.2s)
  
  ; Window select
  WDT_WINDOW_OFF_gc = (0x00<<4)       ; Off
  WDT_WINDOW_8CLK_gc = (0x01<<4)      ; 8 cycles (8ms)
  WDT_WINDOW_16CLK_gc = (0x02<<4)     ; 16 cycles (16ms)
  WDT_WINDOW_32CLK_gc = (0x03<<4)     ; 32 cycles (32ms)
  WDT_WINDOW_64CLK_gc = (0x04<<4)     ; 64 cycles (64ms)
  WDT_WINDOW_128CLK_gc = (0x05<<4)    ; 128 cycles (0.128s)
  WDT_WINDOW_256CLK_gc = (0x06<<4)    ; 256 cycles (0.256s)
  WDT_WINDOW_512CLK_gc = (0x07<<4)    ; 512 cycles (0.512s)
  WDT_WINDOW_1KCLK_gc = (0x08<<4)     ; 1K cycles (1.0s)
  WDT_WINDOW_2KCLK_gc = (0x09<<4)     ; 2K cycles (2.0s)
  WDT_WINDOW_4KCLK_gc = (0x0A<<4)     ; 4K cycles (4.1s)
  WDT_WINDOW_8KCLK_gc = (0x0B<<4)     ; 8K cycles (8.2s)
  
  
  
  

[Registers]
'For specific details of the registers see the microcontroller datasheet
'The first parameter is the GCBASIC register name used in user code to expose the specific register
 AC0_CTRLA,1664
 AC0_MUXCTRLA,1666
 AC0_INTCTRL,1670
 AC0_STATUS,1671
 ADC0_CTRLA,1536
 ADC0_CTRLB,1537
 ADC0_CTRLC,1538
 ADC0_CTRLD,1539
 ADC0_CTRLE,1540
 ADC0_SAMPCTRL,1541
 ADC0_MUXPOS,1542
 ADC0_COMMAND,1544
 ADC0_EVCTRL,1545
 ADC0_INTCTRL,1546
 ADC0_INTFLAGS,1547
 ADC0_DBGCTRL,1548
 ADC0_TEMP,1549
 ADC0_RES,1552
 ADC0_RESL,1552
 ADC0_RESH,1553
 ADC0_WINLT,1554
 ADC0_WINLTL,1554
 ADC0_WINLTH,1555
 ADC0_WINHT,1556
 ADC0_WINHTL,1556
 ADC0_WINHTH,1557
 ADC0_CALIB,1558
 BOD_CTRLA,128
 BOD_CTRLB,129
 BOD_VLMCTRLA,136
 BOD_INTCTRL,137
 BOD_INTFLAGS,138
 BOD_STATUS,139
 CCL_CTRLA,448
 CCL_SEQCTRL0,449
 CCL_LUT0CTRLA,453
 CCL_LUT0CTRLB,454
 CCL_LUT0CTRLC,455
 CCL_TRUTH0,456
 CCL_LUT1CTRLA,457
 CCL_LUT1CTRLB,458
 CCL_LUT1CTRLC,459
 CCL_TRUTH1,460
 CLKCTRL_MCLKCTRLA,96
 CLKCTRL_MCLKCTRLB,97
 CLKCTRL_MCLKLOCK,98
 CLKCTRL_MCLKSTATUS,99
 CLKCTRL_OSC20MCTRLA,112
 CLKCTRL_OSC20MCALIBA,113
 CLKCTRL_OSC20MCALIBB,114
 CLKCTRL_OSC32KCTRLA,120
 CPU_CCP,52
; .equ CPU_SPL = 0x003D                    ; Stack Pointer Low a duplicate or resevered register or ALIAS_
; .equ CPU_SPH = 0x003E                    ; Stack Pointer High a duplicate or resevered register or ALIAS_
 CPU_SREG,63
 CPUINT_CTRLA,272
 CPUINT_STATUS,273
 CPUINT_LVL0PRI,274
 CPUINT_LVL1VEC,275
 CRCSCAN_CTRLA,288
 CRCSCAN_CTRLB,289
 CRCSCAN_STATUS,290
 EVSYS_ASYNCSTROBE,384
 EVSYS_SYNCSTROBE,385
 EVSYS_ASYNCCH0,386
 EVSYS_ASYNCCH1,387
 EVSYS_SYNCCH0,394
 EVSYS_ASYNCUSER0,402
 EVSYS_ASYNCUSER1,403
 EVSYS_ASYNCUSER2,404
 EVSYS_ASYNCUSER3,405
 EVSYS_ASYNCUSER4,406
 EVSYS_ASYNCUSER5,407
 EVSYS_ASYNCUSER6,408
 EVSYS_ASYNCUSER7,409
 EVSYS_ASYNCUSER8,410
 EVSYS_ASYNCUSER9,411
 EVSYS_ASYNCUSER10,412
 EVSYS_ASYNCUSER11,413
 EVSYS_ASYNCUSER12,414
 EVSYS_SYNCUSER0,418
 EVSYS_SYNCUSER1,419
 FUSE_WDTCFG,4736
 FUSE_BODCFG,4737
 FUSE_OSCCFG,4738
 FUSE_SYSCFG0,4741
 FUSE_SYSCFG1,4742
 FUSE_APPEND,4743
 FUSE_BOOTEND,4744
 GPIO_GPIOR0,28
 GPIO_GPIOR1,29
 GPIO_GPIOR2,30
 GPIO_GPIOR3,31
 LOCKBIT_LOCKBIT,4746
 NVMCTRL_CTRLA,4096
 NVMCTRL_CTRLB,4097
 NVMCTRL_STATUS,4098
 NVMCTRL_INTCTRL,4099
 NVMCTRL_INTFLAGS,4100
 NVMCTRL_DATA,4102
 NVMCTRL_DATAL,4102
 NVMCTRL_DATAH,4103
 NVMCTRL_ADDR,4104
 NVMCTRL_ADDRL,4104
 NVMCTRL_ADDRH,4105
 PORTA_DIR,1024
 PORTA_DIRSET,1025
 PORTA_DIRCLR,1026
 PORTA_DIRTGL,1027
 PORTA_OUT,1028
 PORTA_OUTSET,1029
 PORTA_OUTCLR,1030
 PORTA_OUTTGL,1031
 PORTA_IN,1032
 PORTA_INTFLAGS,1033
 PORTA_PIN0CTRL,1040
 PORTA_PIN1CTRL,1041
 PORTA_PIN2CTRL,1042
 PORTA_PIN3CTRL,1043
 PORTA_PIN4CTRL,1044
 PORTA_PIN5CTRL,1045
 PORTA_PIN6CTRL,1046
 PORTA_PIN7CTRL,1047
 PORTB_DIR,1056
 PORTB_DIRSET,1057
 PORTB_DIRCLR,1058
 PORTB_DIRTGL,1059
 PORTB_OUT,1060
 PORTB_OUTSET,1061
 PORTB_OUTCLR,1062
 PORTB_OUTTGL,1063
 PORTB_IN,1064
 PORTB_INTFLAGS,1065
 PORTB_PIN0CTRL,1072
 PORTB_PIN1CTRL,1073
 PORTB_PIN2CTRL,1074
 PORTB_PIN3CTRL,1075
 PORTB_PIN4CTRL,1076
 PORTB_PIN5CTRL,1077
 PORTB_PIN6CTRL,1078
 PORTB_PIN7CTRL,1079
 PORTC_DIR,1088
 PORTC_DIRSET,1089
 PORTC_DIRCLR,1090
 PORTC_DIRTGL,1091
 PORTC_OUT,1092
 PORTC_OUTSET,1093
 PORTC_OUTCLR,1094
 PORTC_OUTTGL,1095
 PORTC_IN,1096
 PORTC_INTFLAGS,1097
 PORTC_PIN0CTRL,1104
 PORTC_PIN1CTRL,1105
 PORTC_PIN2CTRL,1106
 PORTC_PIN3CTRL,1107
 PORTC_PIN4CTRL,1108
 PORTC_PIN5CTRL,1109
 PORTC_PIN6CTRL,1110
 PORTC_PIN7CTRL,1111
 PORTMUX_CTRLA,512
 PORTMUX_CTRLB,513
 PORTMUX_CTRLC,514
 PORTMUX_CTRLD,515
 RSTCTRL_RSTFR,64
 RSTCTRL_SWRR,65
 RTC_CTRLA,320
 RTC_STATUS,321
 RTC_INTCTRL,322
 RTC_INTFLAGS,323
 RTC_TEMP,324
 RTC_DBGCTRL,325
 RTC_CLKSEL,327
 RTC_CNT,328
 RTC_CNTL,328
 RTC_CNTH,329
 RTC_PER,330
 RTC_PERL,330
 RTC_PERH,331
; .equ RTC_CMP = 0x014C                    ; Compare a duplicate or resevered register or ALIAS_
; .equ RTC_CMPL = 0x014C                   ; Compare low byte a duplicate or resevered register or ALIAS_
; .equ RTC_CMPH = 0x014D                   ; Compare hi byte a duplicate or resevered register or ALIAS_
 RTC_PITCTRLA,336
 RTC_PITSTATUS,337
 RTC_PITINTCTRL,338
 RTC_PITINTFLAGS,339
 RTC_PITDBGCTRL,341
 SIGROW_DEVICEID0,4352
 SIGROW_DEVICEID1,4353
 SIGROW_DEVICEID2,4354
 SIGROW_SERNUM0,4355
 SIGROW_SERNUM1,4356
 SIGROW_SERNUM2,4357
 SIGROW_SERNUM3,4358
 SIGROW_SERNUM4,4359
 SIGROW_SERNUM5,4360
 SIGROW_SERNUM6,4361
 SIGROW_SERNUM7,4362
 SIGROW_SERNUM8,4363
 SIGROW_SERNUM9,4364
 SIGROW_TEMPSENSE0,4384
 SIGROW_TEMPSENSE1,4385
 SIGROW_OSC16ERR3V,4386
 SIGROW_OSC16ERR5V,4387
 SIGROW_OSC20ERR3V,4388
 SIGROW_OSC20ERR5V,4389
 SLPCTRL_CTRLA,80
 SPI0_CTRLA,2080
 SPI0_CTRLB,2081
 SPI0_INTCTRL,2082
 SPI0_INTFLAGS,2083
 SPI0_DATA,2084
 SYSCFG_REVID,3841
 SYSCFG_EXTBRK,3842
 TCA0_SINGLE_CTRLA,2560
 TCA0_SPLIT_CTRLA,2560
 TCA0_SINGLE_CTRLB,2561
 TCA0_SPLIT_CTRLB,2561
 TCA0_SINGLE_CTRLC,2562
 TCA0_SPLIT_CTRLC,2562
 TCA0_SINGLE_CTRLD,2563
 TCA0_SPLIT_CTRLD,2563
 TCA0_SINGLE_CTRLECLR,2564
 TCA0_SPLIT_CTRLECLR,2564
 TCA0_SINGLE_CTRLESET,2565
 TCA0_SPLIT_CTRLESET,2565
 TCA0_SINGLE_CTRLFCLR,2566
 TCA0_SINGLE_CTRLFSET,2567
 TCA0_SINGLE_EVCTRL,2569
 TCA0_SINGLE_INTCTRL,2570
 TCA0_SPLIT_INTCTRL,2570
 TCA0_SINGLE_INTFLAGS,2571
 TCA0_SPLIT_INTFLAGS,2571
 TCA0_SINGLE_DBGCTRL,2574
 TCA0_SPLIT_DBGCTRL,2574
 TCA0_SINGLE_TEMP,2575
 TCA0_SINGLE_CNT,2592
 TCA0_SINGLE_CNTL,2592
 TCA0_SINGLE_CNTH,2593
 TCA0_SPLIT_LCNT,2592
 TCA0_SPLIT_HCNT,2593
 TCA0_SINGLE_PER,2598
 TCA0_SINGLE_PERL,2598
 TCA0_SINGLE_PERH,2599
 TCA0_SPLIT_LPER,2598
 TCA0_SPLIT_HPER,2599
 TCA0_SINGLE_CMP0,2600
 TCA0_SINGLE_CMP0L,2600
 TCA0_SINGLE_CMP0H,2601
 TCA0_SPLIT_LCMP0,2600
 TCA0_SPLIT_HCMP0,2601
 TCA0_SINGLE_CMP1,2602
 TCA0_SINGLE_CMP1L,2602
 TCA0_SINGLE_CMP1H,2603
 TCA0_SPLIT_LCMP1,2602
 TCA0_SPLIT_HCMP1,2603
 TCA0_SINGLE_CMP2,2604
 TCA0_SINGLE_CMP2L,2604
 TCA0_SINGLE_CMP2H,2605
 TCA0_SPLIT_LCMP2,2604
 TCA0_SPLIT_HCMP2,2605
 TCA0_SINGLE_PERBUF,2614
 TCA0_SINGLE_PERBUFL,2614
 TCA0_SINGLE_PERBUFH,2615
 TCA0_SINGLE_CMP0BUF,2616
 TCA0_SINGLE_CMP0BUFL,2616
 TCA0_SINGLE_CMP0BUFH,2617
 TCA0_SINGLE_CMP1BUF,2618
 TCA0_SINGLE_CMP1BUFL,2618
 TCA0_SINGLE_CMP1BUFH,2619
 TCA0_SINGLE_CMP2BUF,2620
 TCA0_SINGLE_CMP2BUFL,2620
 TCA0_SINGLE_CMP2BUFH,2621
 TCB0_CTRLA,2624
 TCB0_CTRLB,2625
 TCB0_EVCTRL,2628
 TCB0_INTCTRL,2629
 TCB0_INTFLAGS,2630
 TCB0_STATUS,2631
 TCB0_DBGCTRL,2632
 TCB0_TEMP,2633
 TCB0_CNT,2634
 TCB0_CNTL,2634
 TCB0_CNTH,2635
 TCB0_CCMP,2636
 TCB0_CCMPL,2636
 TCB0_CCMPH,2637
 TWI0_CTRLA,2064
 TWI0_DBGCTRL,2066
 TWI0_MCTRLA,2067
 TWI0_MCTRLB,2068
 TWI0_MSTATUS,2069
 TWI0_MBAUD,2070
 TWI0_MADDR,2071
 TWI0_MDATA,2072
 TWI0_SCTRLA,2073
 TWI0_SCTRLB,2074
 TWI0_SSTATUS,2075
 TWI0_SADDR,2076
 TWI0_SDATA,2077
 TWI0_SADDRMASK,2078
 USART0_RXDATAL,2048
 USART0_RXDATAH,2049
 USART0_TXDATAL,2050
 USART0_TXDATAH,2051
 USART0_STATUS,2052
 USART0_CTRLA,2053
 USART0_CTRLB,2054
 USART0_CTRLC,2055
 USART0_BAUD,2056
 USART0_BAUDL,2056
 USART0_BAUDH,2057
 USART0_DBGCTRL,2059
 USART0_EVCTRL,2060
 USART0_TXPLCTRL,2061
 USART0_RXPLCTRL,2062
 USERROW_USERROW0,4864
 USERROW_USERROW1,4865
 USERROW_USERROW2,4866
 USERROW_USERROW3,4867
 USERROW_USERROW4,4868
 USERROW_USERROW5,4869
 USERROW_USERROW6,4870
 USERROW_USERROW7,4871
 USERROW_USERROW8,4872
 USERROW_USERROW9,4873
 USERROW_USERROW10,4874
 USERROW_USERROW11,4875
 USERROW_USERROW12,4876
 USERROW_USERROW13,4877
 USERROW_USERROW14,4878
 USERROW_USERROW15,4879
 USERROW_USERROW16,4880
 USERROW_USERROW17,4881
 USERROW_USERROW18,4882
 USERROW_USERROW19,4883
 USERROW_USERROW20,4884
 USERROW_USERROW21,4885
 USERROW_USERROW22,4886
 USERROW_USERROW23,4887
 USERROW_USERROW24,4888
 USERROW_USERROW25,4889
 USERROW_USERROW26,4890
 USERROW_USERROW27,4891
 USERROW_USERROW28,4892
 USERROW_USERROW29,4893
 USERROW_USERROW30,4894
 USERROW_USERROW31,4895
 VPORTA_DIR,0
 VPORTA_OUT,1
 VPORTA_IN,2
 VPORTA_INTFLAGS,3
 VPORTB_DIR,4
 VPORTB_OUT,5
 VPORTB_IN,6
 VPORTB_INTFLAGS,7
 VPORTC_DIR,8
 VPORTC_OUT,9
 VPORTC_IN,10
 VPORTC_INTFLAGS,11
 VREF_CTRLA,160
 VREF_CTRLB,161
 WDT_CTRLA,256
 WDT_STATUS,257

[Bits]
'For details of the bits (relative to a register in terms of registerbits) see the microcontroller datasheet
'The first parameter is the GCBASIC bit name used in user code to expose the specific registerbit
 ' Required for GCBASIC operations
  I,SREG,7
  T,SREG,6
  H,SREG,5
  S,SREG,4
  V,SREG,3
  N,SREG,2
  Z,SREG,1
  C,SREG,0
AC_ENABLE,AC,0			'  Enable bit position
AC_OUTEN,AC,6			'  Output Buffer Enable bit position
AC_RUNSTDBY,AC,7			'  Run in Standby Mode bit position
AC_INVERT,AC,7			'  Invert AC Output bit position
AC_CMP,AC,0			'  Analog Comparator 0 Interrupt Enable bit position
AC_STATE,AC,4			'  Analog Comparator State bit position
ADC_ENABLE,ADC,0			'  ADC Enable bit position
ADC_FREERUN,ADC,1			'  ADC Freerun mode bit position
ADC_RESSEL,ADC,2			'  ADC Resolution bit position
ADC_RUNSTBY,ADC,7			'  Run standby mode bit position
ADC_SAMPCAP,ADC,6			'  Sample Capacitance Selection bit position
ADC_ASDV,ADC,4			'  Automatic Sampling Delay Variation bit position
ADC_STCONV,ADC,0			'  Start Conversion Operation bit position
ADC_STARTEI,ADC,0			'  Start Event Input Enable bit position
ADC_RESRDY,ADC,0			'  Result Ready Interrupt Enable bit position
ADC_WCMP,ADC,1			'  Window Comparator Interrupt Enable bit position
ADC_DBGRUN,ADC,0			'  Debug run bit position
ADC_DUTYCYC,ADC,0			'  Duty Cycle bit position
BOD_SAMPFREQ,BOD,4			'  Sample frequency bit position
BOD_VLMIE,BOD,0			'  voltage level monitor interrrupt enable bit position
BOD_VLMIF,BOD,0			'  Voltage level monitor interrupt flag bit position
BOD_VLMS,BOD,0			'  Voltage level monitor status bit position
CCL_ENABLE,CCL,0			'  Enable bit position
CCL_RUNSTDBY,CCL,6			'  Run in Standby bit position
CCL_OUTEN,CCL,3			'  Output Enable bit position
CCL_CLKSRC,CCL,6			'  Clock Source Selection bit position
CCL_EDGEDET,CCL,7			'  Edge Detection Enable bit position
CLKCTRL_CLKOUT,CLKCTRL,7			'  System clock out bit position
CLKCTRL_PEN,CLKCTRL,0			'  Prescaler enable bit position
CLKCTRL_LOCKEN,CLKCTRL,0			'  Lock enable bit position
CLKCTRL_SOSC,CLKCTRL,0			'  System Oscillator changing bit position
CLKCTRL_OSC20MS,CLKCTRL,4			'  20MHz oscillator status bit position
CLKCTRL_OSC32KS,CLKCTRL,5			'  32KHz oscillator status bit position
CLKCTRL_EXTS,CLKCTRL,7			'  External Clock status bit position
CLKCTRL_RUNSTDBY,CLKCTRL,1			'  Run standby bit position
CLKCTRL_LOCK,CLKCTRL,7			'  Lock bit position
CPU_C,CPU,0			'  Carry Flag bit position
CPU_Z,CPU,1			'  Zero Flag bit position
CPU_N,CPU,2			'  Negative Flag bit position
CPU_V,CPU,3			'  Two's Complement Overflow Flag bit position
CPU_S,CPU,4			'  N Exclusive Or V Flag bit position
CPU_H,CPU,5			'  Half Carry Flag bit position
CPU_T,CPU,6			'  Transfer Bit bit position
CPU_I,CPU,7			'  Global Interrupt Enable Flag bit position
CPUINT_LVL0RR,CPUINT,0			'  Round-robin Scheduling Enable bit position
CPUINT_CVT,CPUINT,5			'  Compact Vector Table bit position
CPUINT_IVSEL,CPUINT,6			'  Interrupt Vector Select bit position
CPUINT_LVL0EX,CPUINT,0			'  Level 0 Interrupt Executing bit position
CPUINT_LVL1EX,CPUINT,1			'  Level 1 Interrupt Executing bit position
CPUINT_NMIEX,CPUINT,7			'  Non-maskable Interrupt Executing bit position
CRCSCAN_ENABLE,CRCSCAN,0			'  Enable CRC scan bit position
CRCSCAN_NMIEN,CRCSCAN,1			'  Enable NMI Trigger bit position
CRCSCAN_RESET,CRCSCAN,7			'  Reset CRC scan bit position
CRCSCAN_BUSY,CRCSCAN,0			'  CRC Busy bit position
CRCSCAN_OK,CRCSCAN,1			'  CRC Ok bit position
FUSE_SAMPFREQ,FUSE,4			'  BOD Sample Frequency bit position
FUSE_OSCLOCK,FUSE,7			'  Oscillator Lock bit position
FUSE_EESAVE,FUSE,0			'  EEPROM Save bit position
NVMCTRL_APCWP,NVMCTRL,0			'  Application code write protect bit position
NVMCTRL_BOOTLOCK,NVMCTRL,1			'  Boot Lock bit position
NVMCTRL_FBUSY,NVMCTRL,0			'  Flash busy bit position
NVMCTRL_EEBUSY,NVMCTRL,1			'  EEPROM busy bit position
NVMCTRL_WRERROR,NVMCTRL,2			'  Write error bit position
NVMCTRL_EEREADY,NVMCTRL,0			'  EEPROM Ready bit position
PORT_PULLUPEN,PORT,3			'  Pullup enable bit position
PORT_INVEN,PORT,7			'  Inverted I/O Enable bit position
PORTMUX_EVOUT0,PORTMUX,0			'  Event Output 0 bit position
PORTMUX_EVOUT1,PORTMUX,1			'  Event Output 1 bit position
PORTMUX_EVOUT2,PORTMUX,2			'  Event Output 2 bit position
PORTMUX_LUT0,PORTMUX,4			'  Configurable Custom Logic LUT0 bit position
PORTMUX_LUT1,PORTMUX,5			'  Configurable Custom Logic LUT1 bit position
PORTMUX_USART0,PORTMUX,0			'  Port Multiplexer USART0 bit position
PORTMUX_SPI0,PORTMUX,2			'  Port Multiplexer SPI0 bit position
PORTMUX_TCA00,PORTMUX,0			'  Port Multiplexer TCA0 Output 0 bit position
PORTMUX_TCA01,PORTMUX,1			'  Port Multiplexer TCA0 Output 1 bit position
PORTMUX_TCA02,PORTMUX,2			'  Port Multiplexer TCA0 Output 2 bit position
PORTMUX_TCA03,PORTMUX,3			'  Port Multiplexer TCA0 Output 3 bit position
PORTMUX_TCA04,PORTMUX,4			'  Port Multiplexer TCA0 Output 4 bit position
PORTMUX_TCA05,PORTMUX,5			'  Port Multiplexer TCA0 Output 5 bit position
PORTMUX_TCB0,PORTMUX,0			'  Port Multiplexer TCB bit position
RSTCTRL_PORF,RSTCTRL,0			'  Power on Reset flag bit position
RSTCTRL_BORF,RSTCTRL,1			'  Brown out detector Reset flag bit position
RSTCTRL_EXTRF,RSTCTRL,2			'  External Reset flag bit position
RSTCTRL_WDRF,RSTCTRL,3			'  Watch dog Reset flag bit position
RSTCTRL_SWRF,RSTCTRL,4			'  Software Reset flag bit position
RSTCTRL_UPDIRF,RSTCTRL,5			'  UPDI Reset flag bit position
RSTCTRL_SWRE,RSTCTRL,0			'  Software reset enable bit position
RTC_RTCEN,RTC,0			'  Enable bit position
RTC_RUNSTDBY,RTC,7			'  Run In Standby bit position
RTC_CTRLABUSY,RTC,0			'  CTRLA Synchronization Busy Flag bit position
RTC_CNTBUSY,RTC,1			'  Count Synchronization Busy Flag bit position
RTC_PERBUSY,RTC,2			'  Period Synchronization Busy Flag bit position
RTC_CMPBUSY,RTC,3			'  Comparator Synchronization Busy Flag bit position
RTC_OVF,RTC,0			'  Overflow Interrupt enable bit position
RTC_CMP,RTC,1			'  Compare Match Interrupt enable bit position
RTC_DBGRUN,RTC,0			'  Run in debug bit position
RTC_PITEN,RTC,0			'  Enable bit position
RTC_CTRLBUSY,RTC,0			'  CTRLA Synchronization Busy Flag bit position
RTC_PI,RTC,0			'  Periodic Interrupt bit position
SLPCTRL_SEN,SLPCTRL,0			'  Sleep enable bit position
SPI_ENABLE,SPI,0			'  Enable Module bit position
SPI_CLK2X,SPI,4			'  Enable Double Speed bit position
SPI_MASTER,SPI,5			'  Host Operation Enable bit position
SPI_DORD,SPI,6			'  Data Order Setting bit position
SPI_SSD,SPI,2			'  Client Select Disable bit position
SPI_BUFWR,SPI,6			'  Buffer Write Mode bit position
SPI_BUFEN,SPI,7			'  Buffer Mode Enable bit position
SPI_IE,SPI,0			'  Interrupt Enable bit position
SPI_SSIE,SPI,4			'  Client Select Trigger Interrupt Enable bit position
SPI_DREIE,SPI,5			'  Data Register Empty Interrupt Enable bit position
SPI_TXCIE,SPI,6			'  Transfer Complete Interrupt Enable bit position
SPI_RXCIE,SPI,7			'  Receive Complete Interrupt Enable bit position
SPI_BUFOVF,SPI,0			'  Buffer Overflow bit position
SPI_SSIF,SPI,4			'  Client Select Trigger Interrupt Flag bit position
SPI_DREIF,SPI,5			'  Data Register Empty Interrupt Flag bit position
SPI_TXCIF,SPI,6			'  Transfer Complete Interrupt Flag bit position
SPI_WRCOL,SPI,6			'  Write Collision bit position
SPI_RXCIF,SPI,7			'  Receive Complete Interrupt Flag bit position
SPI_IF,SPI,7			'  Interrupt Flag bit position
SYSCFG_ENEXTBRK,SYSCFG,0			'  External break enable bit position
TCA_SINGLE_ENABLE,TCA,0			'  Module Enable bit position
TCA_SINGLE_ALUPD,TCA,3			'  Auto Lock Update bit position
TCA_SINGLE_CMP0EN,TCA,4			'  Compare 0 Enable bit position
TCA_SINGLE_CMP1EN,TCA,5			'  Compare 1 Enable bit position
TCA_SINGLE_CMP2EN,TCA,6			'  Compare 2 Enable bit position
TCA_SINGLE_CMP0OV,TCA,0			'  Compare 0 Waveform Output Value bit position
TCA_SINGLE_CMP1OV,TCA,1			'  Compare 1 Waveform Output Value bit position
TCA_SINGLE_CMP2OV,TCA,2			'  Compare 2 Waveform Output Value bit position
TCA_SINGLE_SPLITM,TCA,0			'  Split Mode Enable bit position
TCA_SINGLE_DIR,TCA,0			'  Direction bit position
TCA_SINGLE_LUPD,TCA,1			'  Lock Update bit position
TCA_SINGLE_PERBV,TCA,0			'  Period Buffer Valid bit position
TCA_SINGLE_CMP0BV,TCA,1			'  Compare 0 Buffer Valid bit position
TCA_SINGLE_CMP1BV,TCA,2			'  Compare 1 Buffer Valid bit position
TCA_SINGLE_CMP2BV,TCA,3			'  Compare 2 Buffer Valid bit position
TCA_SINGLE_CNTEI,TCA,0			'  Count on Event Input bit position
TCA_SINGLE_OVF,TCA,0			'  Overflow Interrupt bit position
TCA_SINGLE_CMP0,TCA,4			'  Compare 0 Interrupt bit position
TCA_SINGLE_CMP1,TCA,5			'  Compare 1 Interrupt bit position
TCA_SINGLE_CMP2,TCA,6			'  Compare 2 Interrupt bit position
TCA_SINGLE_DBGRUN,TCA,0			'  Debug Run bit position
TCA_SPLIT_ENABLE,for CTRLA already defined,0			'  Module Enable bit position
TCA_SPLIT_LCMP0EN,TCA,0			'  Low Compare 0 Enable bit position
TCA_SPLIT_LCMP1EN,TCA,1			'  Low Compare 1 Enable bit position
TCA_SPLIT_LCMP2EN,TCA,2			'  Low Compare 2 Enable bit position
TCA_SPLIT_HCMP0EN,TCA,4			'  High Compare 0 Enable bit position
TCA_SPLIT_HCMP1EN,TCA,5			'  High Compare 1 Enable bit position
TCA_SPLIT_HCMP2EN,TCA,6			'  High Compare 2 Enable bit position
TCA_SPLIT_LCMP0OV,TCA,0			'  Low Compare 0 Output Value bit position
TCA_SPLIT_LCMP1OV,TCA,1			'  Low Compare 1 Output Value bit position
TCA_SPLIT_LCMP2OV,TCA,2			'  Low Compare 2 Output Value bit position
TCA_SPLIT_HCMP0OV,TCA,4			'  High Compare 0 Output Value bit position
TCA_SPLIT_HCMP1OV,TCA,5			'  High Compare 1 Output Value bit position
TCA_SPLIT_HCMP2OV,TCA,6			'  High Compare 2 Output Value bit position
TCA_SPLIT_SPLITM,TCA,0			'  Split Mode Enable bit position
TCA_SPLIT_LUNF,TCA,0			'  Low Underflow Interrupt Enable bit position
TCA_SPLIT_HUNF,TCA,1			'  High Underflow Interrupt Enable bit position
TCA_SPLIT_LCMP0,TCA,4			'  Low Compare 0 Interrupt Enable bit position
TCA_SPLIT_LCMP1,TCA,5			'  Low Compare 1 Interrupt Enable bit position
TCA_SPLIT_LCMP2,TCA,6			'  Low Compare 2 Interrupt Enable bit position
TCA_SPLIT_DBGRUN,TCA,0			'  Debug Run bit position
TCB_ENABLE,TCB,0			'  Enable bit position
TCB_SYNCUPD,TCB,4			'  Synchronize Update bit position
TCB_RUNSTDBY,TCB,6			'  Run Standby bit position
TCB_CCMPEN,TCB,4			'  Pin Output Enable bit position
TCB_CCMPINIT,TCB,5			'  Pin Initial State bit position
TCB_ASYNC,TCB,6			'  Asynchronous Enable bit position
TCB_CAPTEI,TCB,0			'  Event Input Enable bit position
TCB_EDGE,TCB,4			'  Event Edge bit position
TCB_FILTER,TCB,6			'  Input Capture Noise Cancellation Filter bit position
TCB_CAPT,TCB,0			'  Capture or Timeout bit position
TCB_RUN,TCB,0			'  Run bit position
TCB_DBGRUN,TCB,0			'  Debug Run bit position
TWI_FMPEN,TWI,1			'  FM Plus Enable bit position
TWI_SDASETUP,TWI,4			'  SDA Setup Time bit position
TWI_DBGRUN,TWI,0			'  Debug Run bit position
TWI_ENABLE,TWI,0			'  Enable TWI Host bit position
TWI_SMEN,TWI,1			'  Smart Mode Enable bit position
TWI_QCEN,TWI,4			'  Quick Command Enable bit position
TWI_WIEN,TWI,6			'  Write Interrupt Enable bit position
TWI_RIEN,TWI,7			'  Read Interrupt Enable bit position
TWI_ACKACT,TWI,2			'  Acknowledge Action bit position
TWI_FLUSH,TWI,3			'  Flush bit position
TWI_BUSERR,TWI,2			'  Bus Error bit position
TWI_ARBLOST,TWI,3			'  Arbitration Lost bit position
TWI_RXACK,TWI,4			'  Received Acknowledge bit position
TWI_CLKHOLD,TWI,5			'  Clock Hold bit position
TWI_WIF,TWI,6			'  Write Interrupt Flag bit position
TWI_RIF,TWI,7			'  Read Interrupt Flag bit position
TWI_PMEN,TWI,2			'  Promiscuous Mode Enable bit position
TWI_PIEN,TWI,5			'  Stop Interrupt Enable bit position
TWI_APIEN,TWI,6			'  Address/Stop Interrupt Enable bit position
TWI_DIEN,TWI,7			'  Data Interrupt Enable bit position
TWI_AP,TWI,0			'  Client Address or Stop bit position
TWI_DIR,TWI,1			'  Read/Write Direction bit position
TWI_COLL,TWI,3			'  Collision bit position
TWI_APIF,TWI,6			'  Address/Stop Interrupt Flag bit position
TWI_DIF,TWI,7			'  Data Interrupt Flag bit position
TWI_ADDREN,TWI,0			'  Address Enable bit position
USART_DATA8,USART,0			'  Receiver Data Register bit position
USART_PERR,USART,1			'  Parity Error bit position
USART_FERR,USART,2			'  Frame Error bit position
USART_BUFOVF,USART,6			'  Buffer Overflow bit position
USART_RXCIF,USART,7			'  Receive Complete Interrupt Flag bit position
USART_WFB,USART,0			'  Wait For Break bit position
USART_BDF,USART,1			'  Break Detected Flag bit position
USART_ISFIF,USART,3			'  Inconsistent Sync Field Interrupt Flag bit position
USART_RXSIF,USART,4			'  Receive Start Interrupt bit position
USART_DREIF,USART,5			'  Data Register Empty Flag bit position
USART_TXCIF,USART,6			'  Transmit Interrupt Flag bit position
USART_ABEIE,USART,2			'  Auto-baud Error Interrupt Enable bit position
USART_LBME,USART,3			'  Loop-back Mode Enable bit position
USART_RXSIE,USART,4			'  Receiver Start Frame Interrupt Enable bit position
USART_DREIE,USART,5			'  Data Register Empty Interrupt Enable bit position
USART_TXCIE,USART,6			'  Transmit Complete Interrupt Enable bit position
USART_RXCIE,USART,7			'  Receive Complete Interrupt Enable bit position
USART_MPCM,USART,0			'  Multi-processor Communication Mode bit position
USART_ODME,USART,3			'  Open Drain Mode Enable bit position
USART_SFDEN,USART,4			'  Start Frame Detection Enable bit position
USART_TXEN,USART,6			'  Transmitter Enable bit position
USART_RXEN,USART,7			'  Reciever enable bit position
USART_UCPHA,USART,1			'  SPI Host Mode, Clock Phase bit position
USART_UDORD,USART,2			'  SPI Host Mode, Data Order bit position
USART_SBMODE,USART,3			'  Stop Bit Mode bit position
USART_DBGRUN,USART,0			'  Debug Run bit position
USART_IREI,USART,0			'  IrDA Event Input Enable bit position
VREF_DAC0REFEN,VREF,0			'  DAC0/AC0 reference enable bit position
VREF_ADC0REFEN,VREF,1			'  ADC0 reference enable bit position
WDT_SYNCBUSY,WDT,0			'  Syncronization busy bit position
WDT_LOCK,WDT,7			'  Lock enable bit position

[FreeRAM]
'This is the extent of the RAM.  Inclusive of start and end address
3C00:4000

[ConfigOps]
NoConfig-PRG

[Config]
NoConfig-PRG
